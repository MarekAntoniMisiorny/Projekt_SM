
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800774c  0800774c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800774c  0800774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007754  08007754  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800775c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200000a8  08007804  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08007804  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a01  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a49  00000000  00000000  00038b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  0003c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  0003d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028509  00000000  00000000  0003e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c241  00000000  00000000  00066c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f7d  00000000  00000000  00082e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000525c  00000000  00000000  00176dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0017c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075a0 	.word	0x080075a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	080075a0 	.word	0x080075a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	b299      	uxth	r1, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f107 020f 	add.w	r2, r7, #15
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	f001 ff8f 	bl	8002500 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005e2:	2310      	movs	r3, #16
 80005e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	b299      	uxth	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f107 020f 	add.w	r2, r7, #15
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	f001 ff80 	bl	8002500 <HAL_I2C_Master_Transmit>
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	b299      	uxth	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2302      	movs	r3, #2
 8000626:	f002 f85f 	bl	80026e8 <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800062a:	7b3b      	ldrb	r3, [r7, #12]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	7b7a      	ldrb	r2, [r7, #13]
 8000630:	4313      	orrs	r3, r2
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800063a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800065c <BH1750_ReadIlluminance_lux+0x54>
 800063e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	ee07 3a90 	vmov	s15, r3
}
 8000650:	eeb0 0a67 	vmov.f32	s0, s15
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	3f99999a 	.word	0x3f99999a

08000660 <Bulb_State>:
#include <stdbool.h>
#include "stm32f7xx_hal.h"
#include "bulb.h"

void Bulb_State(bool state)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, state);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	461a      	mov	r2, r3
 800066e:	2108      	movs	r1, #8
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Bulb_State+0x20>)
 8000672:	f001 fe9b 	bl	80023ac <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020800 	.word	0x40020800

08000684 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000692:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800069a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800069e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80006a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80006a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80006a6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f80e 	bl	80006da <Lcd_init>

	return lcd;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	461d      	mov	r5, r3
 80006c2:	f107 0410 	add.w	r4, r7, #16
 80006c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bdb0      	pop	{r4, r5, r7, pc}

080006da <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7d9b      	ldrb	r3, [r3, #22]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10c      	bne.n	8000704 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80006ea:	2133      	movs	r1, #51	; 0x33
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f857 	bl	80007a0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80006f2:	2132      	movs	r1, #50	; 0x32
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f853 	bl	80007a0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006fa:	2128      	movs	r1, #40	; 0x28
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f84f 	bl	80007a0 <lcd_write_command>
 8000702:	e003      	b.n	800070c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000704:	2138      	movs	r1, #56	; 0x38
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f84a 	bl	80007a0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800070c:	2101      	movs	r1, #1
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f846 	bl	80007a0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000714:	210c      	movs	r1, #12
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f842 	bl	80007a0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800071c:	2106      	movs	r1, #6
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f83e 	bl	80007a0 <lcd_write_command>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	e00a      	b.n	8000752 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f858 	bl	80007fc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	3301      	adds	r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	7bfc      	ldrb	r4, [r7, #15]
 8000754:	6838      	ldr	r0, [r7, #0]
 8000756:	f7ff fd5b 	bl	8000210 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	429c      	cmp	r4, r3
 800075e:	d3ed      	bcc.n	800073c <Lcd_string+0x10>
	}
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
	...

0800076c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
 8000778:	4613      	mov	r3, r2
 800077a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <Lcd_cursor+0x30>)
 8000780:	5cd2      	ldrb	r2, [r2, r3]
 8000782:	78bb      	ldrb	r3, [r7, #2]
 8000784:	4413      	add	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	3b80      	subs	r3, #128	; 0x80
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f806 	bl	80007a0 <lcd_write_command>
	#endif
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	080075fc 	.word	0x080075fc

080007a0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f001 fdf8 	bl	80023ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7d9b      	ldrb	r3, [r3, #22]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d111      	bne.n	80007e8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	091b      	lsrs	r3, r3, #4
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2204      	movs	r2, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f842 	bl	8000858 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2204      	movs	r2, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f839 	bl	8000858 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80007e6:	e005      	b.n	80007f4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2208      	movs	r2, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f832 	bl	8000858 <lcd_write>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6898      	ldr	r0, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	899b      	ldrh	r3, [r3, #12]
 8000810:	2201      	movs	r2, #1
 8000812:	4619      	mov	r1, r3
 8000814:	f001 fdca 	bl	80023ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7d9b      	ldrb	r3, [r3, #22]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d111      	bne.n	8000844 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f814 	bl	8000858 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f80b 	bl	8000858 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000842:	e005      	b.n	8000850 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2208      	movs	r2, #8
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f804 	bl	8000858 <lcd_write>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
 8000864:	4613      	mov	r3, r2
 8000866:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	e019      	b.n	80008a2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	8819      	ldrh	r1, [r3, #0]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	fa42 f303 	asr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	f001 fd88 	bl	80023ac <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	3301      	adds	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	78bb      	ldrb	r3, [r7, #2]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3e1      	bcc.n	800086e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6918      	ldr	r0, [r3, #16]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8a9b      	ldrh	r3, [r3, #20]
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	f001 fd79 	bl	80023ac <HAL_GPIO_WritePin>
	DELAY(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f001 fa02 	bl	8001cc4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6918      	ldr	r0, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	8a9b      	ldrh	r3, [r3, #20]
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	f001 fd6e 	bl	80023ac <HAL_GPIO_WritePin>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (hled->Output.Duty) : (100.0f - hled->Output.Duty);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7b1b      	ldrb	r3, [r3, #12]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d103      	bne.n	80008f0 <LED_PWM_Init+0x18>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80008ee:	e006      	b.n	80008fe <LED_PWM_Init+0x26>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80008f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000914 <LED_PWM_Init+0x3c>
 80008fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hled->Output));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f97a 	bl	8000c00 <PWM_Init>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	42c80000 	.word	0x42c80000

08000918 <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	ed87 0a00 	vstr	s0, [r7]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (duty) : (100.0f - duty);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7b1b      	ldrb	r3, [r3, #12]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d006      	beq.n	800093a <LED_PWM_WriteDuty+0x22>
 800092c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000960 <LED_PWM_WriteDuty+0x48>
 8000930:	edd7 7a00 	vldr	s15, [r7]
 8000934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000938:	e001      	b.n	800093e <LED_PWM_WriteDuty+0x26>
 800093a:	edd7 7a00 	vldr	s15, [r7]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hled->Output), hled->Output.Duty);
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a02 	vldr	s15, [r3, #8]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	4610      	mov	r0, r2
 8000952:	f000 f96d 	bl	8000c30 <PWM_WriteDuty>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	42c80000 	.word	0x42c80000

08000964 <Light_Boundries>:
#include "delay_us.h"
#include "bh1750_config.h"
#include <stdio.h>
#include <stdlib.h>
int* Light_Boundries()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  int size = 4;
 800096a:	2304      	movs	r3, #4
 800096c:	61fb      	str	r3, [r7, #28]
  int* Boundries = (int*) malloc(sizeof(*Boundries) * size);
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f006 f8d4 	bl	8006b20 <malloc>
 8000978:	4603      	mov	r3, r0
 800097a:	61bb      	str	r3, [r7, #24]
  float H_Boundry_with_Bulb;
  float L_Boundry_With_Bulb;
  float H_Boundry_No_Bulb;
  float L_Boundry_No_Bulb;
  unsigned int illuminance_int = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

    Bulb_State(1); //Light Bulb
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fe6d 	bl	8000660 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99);
 8000986:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8000aa0 <Light_Boundries+0x13c>
 800098a:	4846      	ldr	r0, [pc, #280]	; (8000aa4 <Light_Boundries+0x140>)
 800098c:	f7ff ffc4 	bl	8000918 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 8000990:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000994:	f001 f996 	bl	8001cc4 <HAL_Delay>
    H_Boundry_with_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 8000998:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <Light_Boundries+0x144>)
 800099a:	f7ff fe35 	bl	8000608 <BH1750_ReadIlluminance_lux>
 800099e:	ed87 0a04 	vstr	s0, [r7, #16]
    illuminance_int =  H_Boundry_with_Bulb * 1000.0f;
 80009a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009a6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000aac <Light_Boundries+0x148>
 80009aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009b2:	ee17 3a90 	vmov	r3, s15
 80009b6:	617b      	str	r3, [r7, #20]
    Boundries[0] =   illuminance_int;
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	601a      	str	r2, [r3, #0]
    HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f001 f980 	bl	8001cc4 <HAL_Delay>
    Bulb_State(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4b 	bl	8000660 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0);
 80009ca:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8000ab0 <Light_Boundries+0x14c>
 80009ce:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <Light_Boundries+0x140>)
 80009d0:	f7ff ffa2 	bl	8000918 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d8:	f001 f974 	bl	8001cc4 <HAL_Delay>
    L_Boundry_With_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 80009dc:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <Light_Boundries+0x144>)
 80009de:	f7ff fe13 	bl	8000608 <BH1750_ReadIlluminance_lux>
 80009e2:	ed87 0a03 	vstr	s0, [r7, #12]
    illuminance_int =  L_Boundry_With_Bulb * 1000.0f;
 80009e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ea:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000aac <Light_Boundries+0x148>
 80009ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f6:	ee17 3a90 	vmov	r3, s15
 80009fa:	617b      	str	r3, [r7, #20]
    Boundries[1]=  illuminance_int;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	3304      	adds	r3, #4
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f001 f95d 	bl	8001cc4 <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fe28 	bl	8000660 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99); //Light LED
 8000a10:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8000aa0 <Light_Boundries+0x13c>
 8000a14:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <Light_Boundries+0x140>)
 8000a16:	f7ff ff7f 	bl	8000918 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 8000a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1e:	f001 f951 	bl	8001cc4 <HAL_Delay>
    H_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <Light_Boundries+0x144>)
 8000a24:	f7ff fdf0 	bl	8000608 <BH1750_ReadIlluminance_lux>
 8000a28:	ed87 0a02 	vstr	s0, [r7, #8]
    HAL_Delay(100);
 8000a2c:	2064      	movs	r0, #100	; 0x64
 8000a2e:	f001 f949 	bl	8001cc4 <HAL_Delay>
    illuminance_int = H_Boundry_No_Bulb * 1000.0f;
 8000a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a36:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000aac <Light_Boundries+0x148>
 8000a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a42:	ee17 3a90 	vmov	r3, s15
 8000a46:	617b      	str	r3, [r7, #20]
    Boundries[2]= illuminance_int;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f001 f937 	bl	8001cc4 <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fe02 	bl	8000660 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0); //OFF LED
 8000a5c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000ab0 <Light_Boundries+0x14c>
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <Light_Boundries+0x140>)
 8000a62:	f7ff ff59 	bl	8000918 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 8000a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6a:	f001 f92b 	bl	8001cc4 <HAL_Delay>
    L_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <Light_Boundries+0x144>)
 8000a70:	f7ff fdca 	bl	8000608 <BH1750_ReadIlluminance_lux>
 8000a74:	ed87 0a01 	vstr	s0, [r7, #4]
    illuminance_int = L_Boundry_No_Bulb * 1000.0f;
 8000a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a7c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000aac <Light_Boundries+0x148>
 8000a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a88:	ee17 3a90 	vmov	r3, s15
 8000a8c:	617b      	str	r3, [r7, #20]
    Boundries[3] =  illuminance_int;
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	330c      	adds	r3, #12
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	601a      	str	r2, [r3, #0]


  return Boundries;
 8000a96:	69bb      	ldr	r3, [r7, #24]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	42c60000 	.word	0x42c60000
 8000aa4:	20000010 	.word	0x20000010
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	447a0000 	.word	0x447a0000
 8000ab0:	00000000 	.word	0x00000000

08000ab4 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}
 
float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ac0:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8000ac4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad0:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000aea:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b12:	edd7 6a06 	vldr	s13, [r7, #24]
 8000b16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b72:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b88:	dd03      	ble.n	8000b92 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	e00f      	b.n	8000bb2 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b98:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba4:	d503      	bpl.n	8000bae <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	e001      	b.n	8000bb2 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8000bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bba:	eeb4 7a67 	vcmp.f32	s14, s15
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d013      	beq.n	8000bec <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	ee07 3a90 	vmov	s15, r3
}
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	3724      	adds	r7, #36	; 0x24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f80c 	bl	8000c30 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f003 fc16 	bl	8004454 <HAL_TIM_PWM_Start>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8000c3c:	edd7 7a00 	vldr	s15, [r7]
 8000c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c48:	d503      	bpl.n	8000c52 <PWM_WriteDuty+0x22>
    duty = 0.0;
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	e00a      	b.n	8000c68 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8000c52:	edd7 7a00 	vldr	s15, [r7]
 8000c56:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000d14 <PWM_WriteDuty+0xe4>
 8000c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c62:	dd01      	ble.n	8000c68 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <PWM_WriteDuty+0xe8>)
 8000c66:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	3301      	adds	r3, #1
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c80:	edd7 7a00 	vldr	s15, [r7]
 8000c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c88:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000d14 <PWM_WriteDuty+0xe4>
 8000c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 3a90 	vmov	r3, s15
 8000c98:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d105      	bne.n	8000cae <PWM_WriteDuty+0x7e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cac:	e02c      	b.n	8000d08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d105      	bne.n	8000cc2 <PWM_WriteDuty+0x92>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cc0:	e022      	b.n	8000d08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d105      	bne.n	8000cd6 <PWM_WriteDuty+0xa6>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000cd4:	e018      	b.n	8000d08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b0c      	cmp	r3, #12
 8000cdc:	d105      	bne.n	8000cea <PWM_WriteDuty+0xba>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ce8:	e00e      	b.n	8000d08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b10      	cmp	r3, #16
 8000cf0:	d105      	bne.n	8000cfe <PWM_WriteDuty+0xce>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000cfc:	e004      	b.n	8000d08 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	42c80000 	.word	0x42c80000
 8000d18:	42c80000 	.word	0x42c80000

08000d1c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	4baf      	ldr	r3, [pc, #700]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4aae      	ldr	r2, [pc, #696]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4bac      	ldr	r3, [pc, #688]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4ba9      	ldr	r3, [pc, #676]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4aa8      	ldr	r2, [pc, #672]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4ba6      	ldr	r3, [pc, #664]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	4ba3      	ldr	r3, [pc, #652]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4aa2      	ldr	r2, [pc, #648]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4ba0      	ldr	r3, [pc, #640]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	4b9d      	ldr	r3, [pc, #628]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a9c      	ldr	r2, [pc, #624]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b9a      	ldr	r3, [pc, #616]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b97      	ldr	r3, [pc, #604]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a96      	ldr	r2, [pc, #600]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b91      	ldr	r3, [pc, #580]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a90      	ldr	r2, [pc, #576]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b8e      	ldr	r3, [pc, #568]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a8a      	ldr	r2, [pc, #552]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	4b85      	ldr	r3, [pc, #532]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a84      	ldr	r2, [pc, #528]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b82      	ldr	r3, [pc, #520]	; (8000ff0 <MX_GPIO_Init+0x2d4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000df2:	2200      	movs	r2, #0
 8000df4:	217c      	movs	r1, #124	; 0x7c
 8000df6:	487f      	ldr	r0, [pc, #508]	; (8000ff4 <MX_GPIO_Init+0x2d8>)
 8000df8:	f001 fad8 	bl	80023ac <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_EN_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f248 0101 	movw	r1, #32769	; 0x8001
 8000e02:	487d      	ldr	r0, [pc, #500]	; (8000ff8 <MX_GPIO_Init+0x2dc>)
 8000e04:	f001 fad2 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIGHT_BULB_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2109      	movs	r1, #9
 8000e0c:	487b      	ldr	r0, [pc, #492]	; (8000ffc <MX_GPIO_Init+0x2e0>)
 8000e0e:	f001 facd 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e18:	4879      	ldr	r0, [pc, #484]	; (8001000 <MX_GPIO_Init+0x2e4>)
 8000e1a:	f001 fac7 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f244 2140 	movw	r1, #16960	; 0x4240
 8000e24:	4877      	ldr	r0, [pc, #476]	; (8001004 <MX_GPIO_Init+0x2e8>)
 8000e26:	f001 fac1 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000e2a:	237c      	movs	r3, #124	; 0x7c
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	486c      	ldr	r0, [pc, #432]	; (8000ff4 <MX_GPIO_Init+0x2d8>)
 8000e42:	f001 f907 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4867      	ldr	r0, [pc, #412]	; (8000ffc <MX_GPIO_Init+0x2e0>)
 8000e5e:	f001 f8f9 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LD6_Pin;
 8000e62:	f248 0301 	movw	r3, #32769	; 0x8001
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	485f      	ldr	r0, [pc, #380]	; (8000ff8 <MX_GPIO_Init+0x2dc>)
 8000e7c:	f001 f8ea 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LIGHT_BULB_Pin;
 8000e80:	2309      	movs	r3, #9
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4859      	ldr	r0, [pc, #356]	; (8000ffc <MX_GPIO_Init+0x2e0>)
 8000e98:	f001 f8dc 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e9c:	2332      	movs	r3, #50	; 0x32
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eac:	230b      	movs	r3, #11
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4851      	ldr	r0, [pc, #324]	; (8000ffc <MX_GPIO_Init+0x2e0>)
 8000eb8:	f001 f8cc 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ebc:	2386      	movs	r3, #134	; 0x86
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	484c      	ldr	r0, [pc, #304]	; (8001008 <MX_GPIO_Init+0x2ec>)
 8000ed8:	f001 f8bc 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000edc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4842      	ldr	r0, [pc, #264]	; (8001000 <MX_GPIO_Init+0x2e4>)
 8000ef6:	f001 f8ad 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 8000efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4839      	ldr	r0, [pc, #228]	; (8000ff8 <MX_GPIO_Init+0x2dc>)
 8000f12:	f001 f89f 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8000f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0x2d8>)
 8000f2e:	f001 f891 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f44:	230b      	movs	r3, #11
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482c      	ldr	r0, [pc, #176]	; (8001000 <MX_GPIO_Init+0x2e4>)
 8000f50:	f001 f880 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8000f54:	f244 2340 	movw	r3, #16960	; 0x4240
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4825      	ldr	r0, [pc, #148]	; (8001004 <MX_GPIO_Init+0x2e8>)
 8000f6e:	f001 f871 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	481f      	ldr	r0, [pc, #124]	; (8001004 <MX_GPIO_Init+0x2e8>)
 8000f86:	f001 f865 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_GPIO_Init+0x2ec>)
 8000fa8:	f001 f854 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_GPIO_Init+0x2ec>)
 8000fc2:	f001 f847 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd8:	230b      	movs	r3, #11
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <MX_GPIO_Init+0x2e8>)
 8000fe4:	f001 f836 	bl	8002054 <HAL_GPIO_Init>

}
 8000fe8:	bf00      	nop
 8000fea:	3738      	adds	r7, #56	; 0x38
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40021400 	.word	0x40021400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	40021800 	.word	0x40021800
 8001008:	40020000 	.word	0x40020000

0800100c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_I2C1_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <MX_I2C1_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_I2C1_Init+0x74>)
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <MX_I2C1_Init+0x7c>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_I2C1_Init+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_I2C1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_I2C1_Init+0x74>)
 8001048:	f001 f9ca 	bl	80023e0 <HAL_I2C_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 fa59 	bl	8001508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <MX_I2C1_Init+0x74>)
 800105a:	f001 fea7 	bl	8002dac <HAL_I2CEx_ConfigAnalogFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 fa50 	bl	8001508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_I2C1_Init+0x74>)
 800106c:	f001 fee9 	bl	8002e42 <HAL_I2CEx_ConfigDigitalFilter>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fa47 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000c4 	.word	0x200000c4
 8001084:	40005400 	.word	0x40005400
 8001088:	20404768 	.word	0x20404768

0800108c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0aa      	sub	sp, #168	; 0xa8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2284      	movs	r2, #132	; 0x84
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fe9f 	bl	8006df0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_I2C_MspInit+0xb4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d13c      	bne.n	8001136 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fc30 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010d6:	f000 fa17 	bl	8001508 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <HAL_I2C_MspInit+0xbc>)
 800111a:	f000 ff9b 	bl	8002054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_I2C_MspInit+0xb8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	37a8      	adds	r7, #168	; 0xa8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005400 	.word	0x40005400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b097      	sub	sp, #92	; 0x5c
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d174      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0xfa>
  {
    static unsigned int cnt = 0;
    cnt++;
 800115c:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001164:	6013      	str	r3, [r2, #0]
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8001166:	483c      	ldr	r0, [pc, #240]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001168:	f7ff fa4e 	bl	8000608 <BH1750_ReadIlluminance_lux>
 800116c:	eef0 7a40 	vmov.f32	s15, s0
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_kilo_lux_Int = Illuminance_lux * 1000.0f;
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001260 <HAL_TIM_PeriodElapsedCallback+0x114>
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 2a90 	vmov	r2, s15
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800118e:	601a      	str	r2, [r3, #0]


    duty_pid = PID_GetOutput(&hpid1, lux_ref, Illuminance_lux);  // [%]
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	eef0 0a47 	vmov.f32	s1, s14
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	4830      	ldr	r0, [pc, #192]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011ac:	f7ff fc82 	bl	8000ab4 <PID_GetOutput>
 80011b0:	eef0 7a40 	vmov.f32	s15, s0
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
    duty_p = duty_pid;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011c0:	6013      	str	r3, [r2, #0]
    if(duty_pid > 99)
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001278 <HAL_TIM_PeriodElapsedCallback+0x12c>
 80011cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	dd02      	ble.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x90>
    {
      duty_pid = 99;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011da:	601a      	str	r2, [r3, #0]
    }
    // to mysle nie potrzebne bo jest sauracja w pid ??

    int duty_pid_int = duty_pid;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    LED_PWM_WriteDuty(&hld1,duty_pid);
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	4822      	ldr	r0, [pc, #136]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011f8:	f7ff fb8e 	bl	8000918 <LED_PWM_WriteDuty>

    uint8_t tx_buffer[64];
    int tx_msg_len = sprintf((char*)tx_buffer, " %5u.%03u %d %d \n", Illuminance_kilo_lux_Int / 1000, Illuminance_kilo_lux_Int % 1000,lux_ref, duty_pid_int );
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	099c      	lsrs	r4, r3, #6
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800120e:	fba3 1302 	umull	r1, r3, r3, r2
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f107 0008 	add.w	r0, r7, #8
 8001226:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001228:	9101      	str	r1, [sp, #4]
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	4622      	mov	r2, r4
 800122e:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001230:	f005 fdbe 	bl	8006db0 <siprintf>
 8001234:	64b8      	str	r0, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8001236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001238:	b29a      	uxth	r2, r3
 800123a:	f107 0108 	add.w	r1, r7, #8
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001242:	f004 f9df 	bl	8005604 <HAL_UART_Transmit>
//      LCD_Illuminance_lux = Illuminance_kilo_lux_Int;
//      gcvt(LCD_Illuminance_lux,6,buffer); //Przepisz wartość do buffera
//    }

  }
}
 8001246:	bf00      	nop
 8001248:	3754      	adds	r7, #84	; 0x54
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	200001f4 	.word	0x200001f4
 8001254:	20000154 	.word	0x20000154
 8001258:	20000000 	.word	0x20000000
 800125c:	20000118 	.word	0x20000118
 8001260:	447a0000 	.word	0x447a0000
 8001264:	2000011c 	.word	0x2000011c
 8001268:	20000048 	.word	0x20000048
 800126c:	20000020 	.word	0x20000020
 8001270:	20000144 	.word	0x20000144
 8001274:	20000148 	.word	0x20000148
 8001278:	42c60000 	.word	0x42c60000
 800127c:	42c60000 	.word	0x42c60000
 8001280:	20000010 	.word	0x20000010
 8001284:	10624dd3 	.word	0x10624dd3
 8001288:	080075b8 	.word	0x080075b8
 800128c:	2000028c 	.word	0x2000028c

08001290 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
if(huart == &huart3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_UART_RxCpltCallback+0x30>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d10b      	bne.n	80012b8 <HAL_UART_RxCpltCallback+0x28>
{
user_reference = strtol((char*)&tx_buffer_received, 0, 10);
 80012a0:	220a      	movs	r2, #10
 80012a2:	2100      	movs	r1, #0
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <HAL_UART_RxCpltCallback+0x34>)
 80012a6:	f005 fd79 	bl	8006d9c <strtol>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_UART_RxCpltCallback+0x38>)
 80012ae:	6013      	str	r3, [r2, #0]
lux_ref = user_reference;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_UART_RxCpltCallback+0x38>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_UART_RxCpltCallback+0x3c>)
 80012b6:	6013      	str	r3, [r2, #0]
}
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000028c 	.word	0x2000028c
 80012c4:	20000128 	.word	0x20000128
 80012c8:	20000150 	.word	0x20000150
 80012cc:	20000048 	.word	0x20000048

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fc98 	bl	8001c0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f8a7 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff fd1d 	bl	8000d1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012e2:	f000 fbd1 	bl	8001a88 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80012e6:	f7ff fe91 	bl	800100c <MX_I2C1_Init>
  MX_TIM9_Init();
 80012ea:	f000 facb 	bl	8001884 <MX_TIM9_Init>
  MX_TIM7_Init();
 80012ee:	f000 fa91 	bl	8001814 <MX_TIM7_Init>
  MX_TIM3_Init();
 80012f2:	f000 fa17 	bl	8001724 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012f6:	f000 f9c1 	bl	800167c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  float Illuminance_lux_min = 0.0f;
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	; 0x38
  float Illuminance_lux_max = 0.0f;
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34

  int size = 4;
 8001306:	2304      	movs	r3, #4
 8001308:	633b      	str	r3, [r7, #48]	; 0x30


  BH1750_Init(&hbh1750);
 800130a:	4839      	ldr	r0, [pc, #228]	; (80013f0 <main+0x120>)
 800130c:	f7ff f956 	bl	80005bc <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001310:	4838      	ldr	r0, [pc, #224]	; (80013f4 <main+0x124>)
 8001312:	f002 ffc5 	bl	80042a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001316:	4838      	ldr	r0, [pc, #224]	; (80013f8 <main+0x128>)
 8001318:	f002 ff52 	bl	80041c0 <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  LED_PWM_Init(&hld1);
 800131c:	4837      	ldr	r0, [pc, #220]	; (80013fc <main+0x12c>)
 800131e:	f7ff fadb 	bl	80008d8 <LED_PWM_Init>


  //Bulb_State(1);

  //Swtórz granice światła
  tab =Light_Boundries();
 8001322:	f7ff fb1f 	bl	8000964 <Light_Boundries>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <main+0x130>)
 800132c:	601a      	str	r2, [r3, #0]
  free(tab);
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <main+0x130>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fbfc 	bl	8006b30 <free>
  //Ustaw LCD
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
   Lcd_PortType ports[] = { GPIOE, GPIOE, GPIOE, GPIOE };
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <main+0x134>)
 800133a:	f107 0420 	add.w	r4, r7, #32
 800133e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
   Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001344:	4a30      	ldr	r2, [pc, #192]	; (8001408 <main+0x138>)
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134e:	e883 0003 	stmia.w	r3, {r0, r1}

   // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
   lcd = Lcd_create(ports, pins, GPIOE, GPIO_PIN_6, GPIOF, GPIO_PIN_0, LCD_4_BIT_MODE);
 8001352:	4c2e      	ldr	r4, [pc, #184]	; (800140c <main+0x13c>)
 8001354:	4638      	mov	r0, r7
 8001356:	f107 0218 	add.w	r2, r7, #24
 800135a:	f107 0120 	add.w	r1, r7, #32
 800135e:	2300      	movs	r3, #0
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	2301      	movs	r3, #1
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <main+0x140>)
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <main+0x144>)
 8001370:	f7ff f988 	bl	8000684 <Lcd_create>
 8001374:	4625      	mov	r5, r4
 8001376:	463c      	mov	r4, r7
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}

   //Wyświetlanie napisu
   Lcd_cursor(&lcd, 0,0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	4820      	ldr	r0, [pc, #128]	; (800140c <main+0x13c>)
 800138a:	f7ff f9ef 	bl	800076c <Lcd_cursor>
              Lcd_string(&lcd, "Pomiar w lux ");
 800138e:	4922      	ldr	r1, [pc, #136]	; (8001418 <main+0x148>)
 8001390:	481e      	ldr	r0, [pc, #120]	; (800140c <main+0x13c>)
 8001392:	f7ff f9cb 	bl	800072c <Lcd_string>
  {
   // __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart3 , tx_buffer_received , 3 );
 8001396:	2203      	movs	r2, #3
 8001398:	4920      	ldr	r1, [pc, #128]	; (800141c <main+0x14c>)
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <main+0x150>)
 800139c:	f004 f9b5 	bl	800570a <HAL_UART_Receive_IT>
    //LCD
        //Wypisz wartość lux
        Lcd_cursor(&lcd, 1,7);
 80013a0:	2207      	movs	r2, #7
 80013a2:	2101      	movs	r1, #1
 80013a4:	4819      	ldr	r0, [pc, #100]	; (800140c <main+0x13c>)
 80013a6:	f7ff f9e1 	bl	800076c <Lcd_cursor>
                  Lcd_string(&lcd, buffer);
 80013aa:	491e      	ldr	r1, [pc, #120]	; (8001424 <main+0x154>)
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <main+0x13c>)
 80013ae:	f7ff f9bd 	bl	800072c <Lcd_string>
                  //usun poprzednie znaki
        for (int i = 0; i < 6; ++i) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013b6:	e016      	b.n	80013e6 <main+0x116>
                            if (buffer[i] == NULL) {
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <main+0x154>)
 80013ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10d      	bne.n	80013e0 <main+0x110>
                              Lcd_cursor(&lcd, 1,7 + i);
 80013c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3307      	adds	r3, #7
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	2101      	movs	r1, #1
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <main+0x13c>)
 80013d2:	f7ff f9cb 	bl	800076c <Lcd_cursor>
                                Lcd_string(&lcd, "    ");
 80013d6:	4914      	ldr	r1, [pc, #80]	; (8001428 <main+0x158>)
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <main+0x13c>)
 80013da:	f7ff f9a7 	bl	800072c <Lcd_string>
                                continue;
 80013de:	bf00      	nop
        for (int i = 0; i < 6; ++i) {
 80013e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e2:	3301      	adds	r3, #1
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	dde5      	ble.n	80013b8 <main+0xe8>
    HAL_UART_Receive_IT(&huart3 , tx_buffer_received , 3 );
 80013ec:	e7d3      	b.n	8001396 <main+0xc6>
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000
 80013f4:	200001f4 	.word	0x200001f4
 80013f8:	2000015c 	.word	0x2000015c
 80013fc:	20000010 	.word	0x20000010
 8001400:	2000014c 	.word	0x2000014c
 8001404:	080075e4 	.word	0x080075e4
 8001408:	080075f4 	.word	0x080075f4
 800140c:	2000012c 	.word	0x2000012c
 8001410:	40021400 	.word	0x40021400
 8001414:	40021000 	.word	0x40021000
 8001418:	080075cc 	.word	0x080075cc
 800141c:	20000128 	.word	0x20000128
 8001420:	2000028c 	.word	0x2000028c
 8001424:	20000120 	.word	0x20000120
 8001428:	080075dc 	.word	0x080075dc

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fcd8 	bl	8006df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001450:	f001 fd44 	bl	8002edc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <SystemClock_Config+0xd4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <SystemClock_Config+0xd4>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <SystemClock_Config+0xd4>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <SystemClock_Config+0xd8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <SystemClock_Config+0xd8>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <SystemClock_Config+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001484:	2301      	movs	r3, #1
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001488:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148e:	2302      	movs	r3, #2
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800149c:	23d8      	movs	r3, #216	; 0xd8
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014a4:	2303      	movs	r3, #3
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fd75 	bl	8002f9c <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014b8:	f000 f826 	bl	8001508 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014bc:	f001 fd1e 	bl	8002efc <HAL_PWREx_EnableOverDrive>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014c6:	f000 f81f 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2302      	movs	r3, #2
 80014d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2107      	movs	r1, #7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fffb 	bl	80034e4 <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014f4:	f000 f808 	bl	8001508 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>
	...

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x44>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x44>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x44>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_MspInit+0x44>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x44>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x44>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a8:	f000 fb6c 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM3_IRQHandler+0x10>)
 80015b6:	f003 f847 	bl	8004648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001a8 	.word	0x200001a8

080015c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <USART3_IRQHandler+0x10>)
 80015ca:	f004 f8e3 	bl	8005794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000028c 	.word	0x2000028c

080015d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM7_IRQHandler+0x10>)
 80015de:	f003 f833 	bl	8004648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200001f4 	.word	0x200001f4

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f005 fc00 	bl	8006e20 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20050000 	.word	0x20050000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000158 	.word	0x20000158
 8001654:	20000460 	.word	0x20000460

08001658 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <MX_TIM1_Init+0xa0>)
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <MX_TIM1_Init+0xa4>)
 800169e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_TIM1_Init+0xa0>)
 80016a2:	226b      	movs	r2, #107	; 0x6b
 80016a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM1_Init+0xa0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM1_Init+0xa0>)
 80016ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80016b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM1_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM1_Init+0xa0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM1_Init+0xa0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <MX_TIM1_Init+0xa0>)
 80016c8:	f002 fd22 	bl	8004110 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016d2:	f7ff ff19 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <MX_TIM1_Init+0xa0>)
 80016e4:	f003 f9e4 	bl	8004ab0 <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016ee:	f7ff ff0b 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_TIM1_Init+0xa0>)
 8001704:	f003 fe84 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800170e:	f7ff fefb 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000015c 	.word	0x2000015c
 8001720:	40010000 	.word	0x40010000

08001724 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <MX_TIM3_Init+0xe8>)
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <MX_TIM3_Init+0xec>)
 800175a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <MX_TIM3_Init+0xe8>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <MX_TIM3_Init+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <MX_TIM3_Init+0xe8>)
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <MX_TIM3_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <MX_TIM3_Init+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800177c:	4823      	ldr	r0, [pc, #140]	; (800180c <MX_TIM3_Init+0xe8>)
 800177e:	f002 fcc7 	bl	8004110 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001788:	f7ff febe 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	4619      	mov	r1, r3
 8001798:	481c      	ldr	r0, [pc, #112]	; (800180c <MX_TIM3_Init+0xe8>)
 800179a:	f003 f989 	bl	8004ab0 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017a4:	f7ff feb0 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a8:	4818      	ldr	r0, [pc, #96]	; (800180c <MX_TIM3_Init+0xe8>)
 80017aa:	f002 fdf1 	bl	8004390 <HAL_TIM_PWM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017b4:	f7ff fea8 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4811      	ldr	r0, [pc, #68]	; (800180c <MX_TIM3_Init+0xe8>)
 80017c8:	f003 fe22 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017d2:	f7ff fe99 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	; 0x60
 80017d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM3_Init+0xe8>)
 80017ee:	f003 f84b 	bl	8004888 <HAL_TIM_PWM_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017f8:	f7ff fe86 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM3_Init+0xe8>)
 80017fe:	f000 f90b 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	; 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001a8 	.word	0x200001a8
 8001810:	40000400 	.word	0x40000400

08001814 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_TIM7_Init+0x68>)
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <MX_TIM7_Init+0x6c>)
 8001828:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_TIM7_Init+0x68>)
 800182c:	f240 4237 	movw	r2, #1079	; 0x437
 8001830:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_TIM7_Init+0x68>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_TIM7_Init+0x68>)
 800183a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800183e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_TIM7_Init+0x68>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM7_Init+0x68>)
 8001848:	f002 fc62 	bl	8004110 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001852:	f7ff fe59 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_TIM7_Init+0x68>)
 8001864:	f003 fdd4 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800186e:	f7ff fe4b 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200001f4 	.word	0x200001f4
 8001880:	40001400 	.word	0x40001400

08001884 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM9_Init+0x6c>)
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <MX_TIM9_Init+0x70>)
 800189a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_TIM9_Init+0x6c>)
 800189e:	226b      	movs	r2, #107	; 0x6b
 80018a0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ae:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018be:	f002 fc27 	bl	8004110 <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80018c8:	f7ff fe1e 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM9_Init+0x6c>)
 80018d8:	f003 f8ea 	bl	8004ab0 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80018e2:	f7ff fe11 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000240 	.word	0x20000240
 80018f4:	40014000 	.word	0x40014000

080018f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <HAL_TIM_Base_MspInit+0x108>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001932:	e060      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <HAL_TIM_Base_MspInit+0x110>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d114      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201d      	movs	r0, #29
 800195c:	f000 fab1 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001960:	201d      	movs	r0, #29
 8001962:	f000 faca 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 8001966:	e046      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_TIM_Base_MspInit+0x114>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d114      	bne.n	800199c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2037      	movs	r0, #55	; 0x37
 8001990:	f000 fa97 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001994:	2037      	movs	r0, #55	; 0x37
 8001996:	f000 fab0 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 800199a:	e02c      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM9)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_TIM_Base_MspInit+0x118>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d127      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_Base_MspInit+0x10c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <HAL_TIM_Base_MspInit+0x11c>)
 80019f2:	f000 fb2f 	bl	8002054 <HAL_GPIO_Init>
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40001400 	.word	0x40001400
 8001a10:	40014000 	.word	0x40014000
 8001a14:	40020000 	.word	0x40020000

08001a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_TIM_MspPostInit+0x64>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11b      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a52:	2340      	movs	r3, #64	; 0x40
 8001a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_TIM_MspPostInit+0x6c>)
 8001a6e:	f000 faf1 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <MX_USART3_UART_Init+0x5c>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART3_UART_Init+0x58>)
 8001acc:	f003 fd4c 	bl	8005568 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ad6:	f7ff fd17 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000028c 	.word	0x2000028c
 8001ae4:	40004800 	.word	0x40004800

08001ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0aa      	sub	sp, #168	; 0xa8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2284      	movs	r2, #132	; 0x84
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 f971 	bl	8006df0 <memset>
  if(uartHandle->Instance==USART3)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a26      	ldr	r2, [pc, #152]	; (8001bac <HAL_UART_MspInit+0xc4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d144      	bne.n	8001ba2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 ff02 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b32:	f7ff fce9 	bl	8001508 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_UART_MspInit+0xc8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b80:	2307      	movs	r3, #7
 8001b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <HAL_UART_MspInit+0xcc>)
 8001b8e:	f000 fa61 	bl	8002054 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2027      	movs	r0, #39	; 0x27
 8001b98:	f000 f993 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b9c:	2027      	movs	r0, #39	; 0x27
 8001b9e:	f000 f9ac 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	37a8      	adds	r7, #168	; 0xa8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40004800 	.word	0x40004800
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020c00 	.word	0x40020c00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd4:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be2:	f7ff fd39 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f005 f921 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fb71 	bl	80012d0 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001bfc:	0800775c 	.word	0x0800775c
  ldr r2, =_sbss
 8001c00:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001c04:	20000460 	.word	0x20000460

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>

08001c0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f000 f94c 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f805 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1a:	f7ff fc7b 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f967 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f92f 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000004c 	.word	0x2000004c
 8001c7c:	20000054 	.word	0x20000054
 8001c80:	20000050 	.word	0x20000050

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000054 	.word	0x20000054
 8001ca8:	20000314 	.word	0x20000314

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000314 	.word	0x20000314

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000054 	.word	0x20000054

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	05fa0000 	.word	0x05fa0000

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff feb6 	bl	8001cac <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d008      	beq.n	8001f60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e052      	b.n	8002006 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0216 	bic.w	r2, r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d103      	bne.n	8001f90 <HAL_DMA_Abort+0x62>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0208 	bic.w	r2, r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e013      	b.n	8001fda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fe7b 	bl	8001cac <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d90c      	bls.n	8001fda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e015      	b.n	8002006 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1e4      	bne.n	8001fb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	223f      	movs	r2, #63	; 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d004      	beq.n	800202c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00c      	b.n	8002046 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e175      	b.n	8002360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8164 	bne.w	800235a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x56>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80be 	beq.w	800235a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_GPIO_Init+0x324>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_GPIO_Init+0x324>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_GPIO_Init+0x324>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021f6:	4a61      	ldr	r2, [pc, #388]	; (800237c <HAL_GPIO_Init+0x328>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_GPIO_Init+0x32c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d037      	beq.n	8002292 <HAL_GPIO_Init+0x23e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_GPIO_Init+0x330>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_GPIO_Init+0x23a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_GPIO_Init+0x334>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <HAL_GPIO_Init+0x236>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a55      	ldr	r2, [pc, #340]	; (800238c <HAL_GPIO_Init+0x338>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x232>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a54      	ldr	r2, [pc, #336]	; (8002390 <HAL_GPIO_Init+0x33c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x22e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a53      	ldr	r2, [pc, #332]	; (8002394 <HAL_GPIO_Init+0x340>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x22a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_GPIO_Init+0x344>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a51      	ldr	r2, [pc, #324]	; (800239c <HAL_GPIO_Init+0x348>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_GPIO_Init+0x34c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_GPIO_Init+0x350>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x21a>
 800226a:	2309      	movs	r3, #9
 800226c:	e012      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800226e:	230a      	movs	r3, #10
 8002270:	e010      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002272:	2308      	movs	r3, #8
 8002274:	e00e      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002276:	2307      	movs	r3, #7
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800227a:	2306      	movs	r3, #6
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x240>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x240>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <HAL_GPIO_Init+0x328>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_GPIO_Init+0x354>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_GPIO_Init+0x354>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_GPIO_Init+0x354>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_GPIO_Init+0x354>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_GPIO_Init+0x354>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_GPIO_Init+0x354>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_GPIO_Init+0x354>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_GPIO_Init+0x354>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f ae86 	bls.w	8002074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40021800 	.word	0x40021800
 800239c:	40021c00 	.word	0x40021c00
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40022400 	.word	0x40022400
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fe40 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	e006      	b.n	8002468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d104      	bne.n	800247a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_I2C_Init+0x11c>)
 8002486:	430b      	orrs	r3, r1
 8002488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69d9      	ldr	r1, [r3, #28]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	02008000 	.word	0x02008000

08002500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	4613      	mov	r3, r2
 8002512:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b20      	cmp	r3, #32
 800251e:	f040 80da 	bne.w	80026d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x30>
 800252c:	2302      	movs	r3, #2
 800252e:	e0d3      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002538:	f7ff fbb8 	bl	8001cac <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2319      	movs	r3, #25
 8002544:	2201      	movs	r2, #1
 8002546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f9e6 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0be      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2bff      	cmp	r3, #255	; 0xff
 800258a:	d90e      	bls.n	80025aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	b2da      	uxtb	r2, r3
 8002598:	8979      	ldrh	r1, [r7, #10]
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbd0 	bl	8002d48 <I2C_TransferConfig>
 80025a8:	e06c      	b.n	8002684 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fbbf 	bl	8002d48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025ca:	e05b      	b.n	8002684 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	6a39      	ldr	r1, [r7, #32]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f9e3 	bl	800299c <I2C_WaitOnTXISFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e07b      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d034      	beq.n	8002684 <HAL_I2C_Master_Transmit+0x184>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	2b00      	cmp	r3, #0
 8002620:	d130      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f975 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e04d      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	d90e      	bls.n	8002664 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	b2da      	uxtb	r2, r3
 8002652:	8979      	ldrh	r1, [r7, #10]
 8002654:	2300      	movs	r3, #0
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fb73 	bl	8002d48 <I2C_TransferConfig>
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb62 	bl	8002d48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d19e      	bne.n	80025cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f9c2 	bl	8002a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01a      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2220      	movs	r2, #32
 80026a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	80002000 	.word	0x80002000
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	f040 80db 	bne.w	80028c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2C_Master_Receive+0x30>
 8002714:	2302      	movs	r3, #2
 8002716:	e0d4      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002720:	f7ff fac4 	bl	8001cac <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2319      	movs	r3, #25
 800272c:	2201      	movs	r2, #1
 800272e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8f2 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0bf      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2222      	movs	r2, #34	; 0x22
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2bff      	cmp	r3, #255	; 0xff
 8002772:	d90e      	bls.n	8002792 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_I2C_Master_Receive+0x1e4>)
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fadc 	bl	8002d48 <I2C_TransferConfig>
 8002790:	e06d      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_I2C_Master_Receive+0x1e4>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 facb 	bl	8002d48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027b2:	e05c      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6a39      	ldr	r1, [r7, #32]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f96b 	bl	8002a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e07c      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d034      	beq.n	800286e <HAL_I2C_Master_Receive+0x186>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d130      	bne.n	800286e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2200      	movs	r2, #0
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f880 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e04d      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	; 0xff
 800282e:	d90e      	bls.n	800284e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa7e 	bl	8002d48 <I2C_TransferConfig>
 800284c:	e00f      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fa6d 	bl	8002d48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d19d      	bne.n	80027b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f8cd 	bl	8002a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e01a      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2220      	movs	r2, #32
 8002892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_I2C_Master_Receive+0x1e8>)
 80028a0:	400b      	ands	r3, r1
 80028a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	80002400 	.word	0x80002400
 80028d0:	fe00e800 	.word	0xfe00e800

080028d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d103      	bne.n	80028f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d007      	beq.n	8002910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	619a      	str	r2, [r3, #24]
  }
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	e022      	b.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d01e      	beq.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7ff f9b9 	bl	8001cac <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d113      	bne.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e00f      	b.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d0cd      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029a8:	e02c      	b.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f8ea 	bl	8002b88 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02a      	b.n	8002a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d01e      	beq.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f971 	bl	8001cac <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d1cb      	bne.n	80029aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a28:	e028      	b.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f8aa 	bl	8002b88 <I2C_IsErrorOccurred>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e026      	b.n	8002a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3e:	f7ff f935 	bl	8001cac <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d113      	bne.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e007      	b.n	8002a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d1cf      	bne.n	8002a2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa0:	e064      	b.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f86e 	bl	8002b88 <I2C_IsErrorOccurred>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e062      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d138      	bne.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d105      	bne.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e04e      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d107      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2204      	movs	r2, #4
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
 8002afa:	e002      	b.n	8002b02 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2220      	movs	r2, #32
 8002b08:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff f8b9 	bl	8001cac <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d193      	bne.n	8002aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fe00e800 	.word	0xfe00e800

08002b88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d068      	beq.n	8002c86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bbc:	e049      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d045      	beq.n	8002c52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f871 	bl	8001cac <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_IsErrorOccurred+0x54>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d13a      	bne.n	8002c52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	d121      	bne.n	8002c44 <I2C_IsErrorOccurred+0xbc>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c06:	d01d      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d01a      	beq.n	8002c44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c1e:	f7ff f845 	bl	8001cac <HAL_GetTick>
 8002c22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e00e      	b.n	8002c44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c26:	f7ff f841 	bl	8001cac <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b19      	cmp	r3, #25
 8002c32:	d907      	bls.n	8002c44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f043 0320 	orr.w	r3, r3, #32
 8002c3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c42:	e006      	b.n	8002c52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d1e9      	bne.n	8002c26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d003      	beq.n	8002c68 <I2C_IsErrorOccurred+0xe0>
 8002c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0aa      	beq.n	8002bbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2220      	movs	r2, #32
 8002c76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01c      	beq.n	8002d36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fde9 	bl	80028d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <I2C_IsErrorOccurred+0x1bc>)
 8002d0e:	400b      	ands	r3, r1
 8002d10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fe00e800 	.word	0xfe00e800

08002d48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	4613      	mov	r3, r2
 8002d58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d60:	7a7b      	ldrb	r3, [r7, #9]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <I2C_TransferConfig+0x60>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	ea02 0103 	and.w	r1, r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	03ff63ff 	.word	0x03ff63ff

08002dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d138      	bne.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e032      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d139      	bne.n	8002ecc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e033      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2224      	movs	r2, #36	; 0x24
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40007000 	.word	0x40007000

08002efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f2a:	f7fe febf 	bl	8001cac <HAL_GetTick>
 8002f2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f30:	e009      	b.n	8002f46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f32:	f7fe febb 	bl	8001cac <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f40:	d901      	bls.n	8002f46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e022      	b.n	8002f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d1ee      	bne.n	8002f32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f60:	f7fe fea4 	bl	8001cac <HAL_GetTick>
 8002f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f66:	e009      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f68:	f7fe fea0 	bl	8001cac <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f76:	d901      	bls.n	8002f7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e007      	b.n	8002f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f88:	d1ee      	bne.n	8002f68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e291      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b96      	ldr	r3, [pc, #600]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fcc:	4b93      	ldr	r3, [pc, #588]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002fd8:	4b90      	ldr	r3, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06c      	beq.n	80030cc <HAL_RCC_OscConfig+0x130>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e26b      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x7a>
 8003008:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x9c>
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7e      	ldr	r2, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b7c      	ldr	r3, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7b      	ldr	r2, [pc, #492]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xc0>
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b73      	ldr	r3, [pc, #460]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a72      	ldr	r2, [pc, #456]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b6c      	ldr	r3, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6b      	ldr	r2, [pc, #428]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fe16 	bl	8001cac <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fe12 	bl	8001cac <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e21f      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xe8>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fe02 	bl	8001cac <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fdfe 	bl	8001cac <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e20b      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x110>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d069      	beq.n	80031ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e6:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x190>
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x17a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1df      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	493d      	ldr	r1, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	e040      	b.n	80031ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a38      	ldr	r2, [pc, #224]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fdb4 	bl	8001cac <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe fdb0 	bl	8001cac <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1bd      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4929      	ldr	r1, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
 800317a:	e018      	b.n	80031ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x280>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a26      	ldr	r2, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x280>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fd90 	bl	8001cac <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe fd8c 	bl	8001cac <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e199      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d038      	beq.n	800322c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fd6d 	bl	8001cac <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe fd69 	bl	8001cac <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e176      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x23a>
 80031f4:	e01a      	b.n	800322c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x280>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe fd53 	bl	8001cac <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fd4f 	bl	8001cac <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d903      	bls.n	8003220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e15c      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
 800321c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b91      	ldr	r3, [pc, #580]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a4 	beq.w	8003382 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a87      	ldr	r2, [pc, #540]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800326e:	4b7f      	ldr	r3, [pc, #508]	; (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7e      	ldr	r2, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe fd17 	bl	8001cac <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fe fd13 	bl	8001cac <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e120      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b75      	ldr	r3, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x31a>
 80032a8:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e02d      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x33c>
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a69      	ldr	r2, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a66      	ldr	r2, [pc, #408]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	e01c      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d10c      	bne.n	80032fa <HAL_RCC_OscConfig+0x35e>
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a60      	ldr	r2, [pc, #384]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	e00b      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fe fcc7 	bl	8001cac <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe fcc3 	bl	8001cac <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0ce      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ee      	beq.n	8003322 <HAL_RCC_OscConfig+0x386>
 8003344:	e014      	b.n	8003370 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fcb1 	bl	8001cac <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe fcad 	bl	8001cac <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80a4 	beq.w	80034d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d06b      	beq.n	8003470 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d149      	bne.n	8003434 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a30      	ldr	r2, [pc, #192]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc7e 	bl	8001cac <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fc7a 	bl	8001cac <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4313      	orrs	r3, r2
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fc4e 	bl	8001cac <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fc4a 	bl	8001cac <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e057      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x478>
 8003432:	e04f      	b.n	80034d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800343a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fc34 	bl	8001cac <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fc30 	bl	8001cac <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e03d      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x4ac>
 8003466:	e035      	b.n	80034d4 <HAL_RCC_OscConfig+0x538>
 8003468:	40023800 	.word	0x40023800
 800346c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x544>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0d0      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d910      	bls.n	800352c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 020f 	bic.w	r2, r3, #15
 8003512:	4965      	ldr	r1, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d040      	beq.n	8003608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d115      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e073      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06b      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c6:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f023 0203 	bic.w	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4936      	ldr	r1, [pc, #216]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d8:	f7fe fb68 	bl	8001cac <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fe fb64 	bl	8001cac <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e053      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 020c 	and.w	r2, r3, #12
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	429a      	cmp	r2, r3
 8003606:	d1eb      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d210      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4922      	ldr	r1, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fac4 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08007600 	.word	0x08007600
 80036b4:	2000004c 	.word	0x2000004c
 80036b8:	20000050 	.word	0x20000050

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c0:	b094      	sub	sp, #80	; 0x50
 80036c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	647b      	str	r3, [r7, #68]	; 0x44
 80036c8:	2300      	movs	r3, #0
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	2300      	movs	r3, #0
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d4:	4b79      	ldr	r3, [pc, #484]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d00d      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x40>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	f200 80e1 	bhi.w	80038a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ee:	e0db      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b73      	ldr	r3, [pc, #460]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f4:	e0db      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f6:	4b73      	ldr	r3, [pc, #460]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036fa:	e0d8      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fc:	4b6f      	ldr	r3, [pc, #444]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003706:	4b6d      	ldr	r3, [pc, #436]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d063      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	2200      	movs	r2, #0
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
 800371c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
 8003726:	2300      	movs	r3, #0
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
 800372a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800372e:	4622      	mov	r2, r4
 8003730:	462b      	mov	r3, r5
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0159      	lsls	r1, r3, #5
 800373c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003740:	0150      	lsls	r0, r2, #5
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4621      	mov	r1, r4
 8003748:	1a51      	subs	r1, r2, r1
 800374a:	6139      	str	r1, [r7, #16]
 800374c:	4629      	mov	r1, r5
 800374e:	eb63 0301 	sbc.w	r3, r3, r1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003760:	4659      	mov	r1, fp
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	4651      	mov	r1, sl
 8003766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800376a:	4651      	mov	r1, sl
 800376c:	018a      	lsls	r2, r1, #6
 800376e:	4651      	mov	r1, sl
 8003770:	ebb2 0801 	subs.w	r8, r2, r1
 8003774:	4659      	mov	r1, fp
 8003776:	eb63 0901 	sbc.w	r9, r3, r1
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800378a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800378e:	4690      	mov	r8, r2
 8003790:	4699      	mov	r9, r3
 8003792:	4623      	mov	r3, r4
 8003794:	eb18 0303 	adds.w	r3, r8, r3
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	462b      	mov	r3, r5
 800379c:	eb49 0303 	adc.w	r3, r9, r3
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ae:	4629      	mov	r1, r5
 80037b0:	024b      	lsls	r3, r1, #9
 80037b2:	4621      	mov	r1, r4
 80037b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b8:	4621      	mov	r1, r4
 80037ba:	024a      	lsls	r2, r1, #9
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	2200      	movs	r2, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037cc:	f7fc fd78 	bl	80002c0 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d8:	e058      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	4611      	mov	r1, r2
 80037e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ea:	623b      	str	r3, [r7, #32]
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037f4:	4642      	mov	r2, r8
 80037f6:	464b      	mov	r3, r9
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	0159      	lsls	r1, r3, #5
 8003802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003806:	0150      	lsls	r0, r2, #5
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4641      	mov	r1, r8
 800380e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003812:	4649      	mov	r1, r9
 8003814:	eb63 0b01 	sbc.w	fp, r3, r1
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800382c:	ebb2 040a 	subs.w	r4, r2, sl
 8003830:	eb63 050b 	sbc.w	r5, r3, fp
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	00eb      	lsls	r3, r5, #3
 800383e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003842:	00e2      	lsls	r2, r4, #3
 8003844:	4614      	mov	r4, r2
 8003846:	461d      	mov	r5, r3
 8003848:	4643      	mov	r3, r8
 800384a:	18e3      	adds	r3, r4, r3
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	464b      	mov	r3, r9
 8003850:	eb45 0303 	adc.w	r3, r5, r3
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003862:	4629      	mov	r1, r5
 8003864:	028b      	lsls	r3, r1, #10
 8003866:	4621      	mov	r1, r4
 8003868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800386c:	4621      	mov	r1, r4
 800386e:	028a      	lsls	r2, r1, #10
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	2200      	movs	r2, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	61fa      	str	r2, [r7, #28]
 800387c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003880:	f7fc fd1e 	bl	80002c0 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_GetSysClockFreq+0x200>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800389c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800389e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3750      	adds	r7, #80	; 0x50
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	007a1200 	.word	0x007a1200

080038c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000004c 	.word	0x2000004c

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	08007610 	.word	0x08007610

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800390c:	f7ff ffdc 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0b5b      	lsrs	r3, r3, #13
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08007610 	.word	0x08007610

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003958:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a68      	ldr	r2, [pc, #416]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	4964      	ldr	r1, [pc, #400]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398a:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	494a      	ldr	r1, [pc, #296]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 808b 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fe f938 	bl	8001cac <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fe f934 	bl	8001cac <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e357      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d035      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d02e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7c:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe f8fc 	bl	8001cac <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fe f8f8 	bl	8001cac <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e319      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ee      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003af6:	400b      	ands	r3, r1
 8003af8:	4901      	ldr	r1, [pc, #4]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000
 8003b08:	0ffffcff 	.word	0x0ffffcff
 8003b0c:	4baa      	ldr	r3, [pc, #680]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4aa9      	ldr	r2, [pc, #676]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b16:	6093      	str	r3, [r2, #8]
 8003b18:	4ba7      	ldr	r3, [pc, #668]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	49a4      	ldr	r1, [pc, #656]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b36:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	4a9e      	ldr	r2, [pc, #632]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b46:	4b9c      	ldr	r3, [pc, #624]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	4999      	ldr	r1, [pc, #612]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b64:	4b94      	ldr	r3, [pc, #592]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	4991      	ldr	r1, [pc, #580]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b86:	4b8c      	ldr	r3, [pc, #560]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	4988      	ldr	r1, [pc, #544]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba8:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb6:	4980      	ldr	r1, [pc, #512]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bca:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4977      	ldr	r1, [pc, #476]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bec:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	496f      	ldr	r1, [pc, #444]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f023 020c 	bic.w	r2, r3, #12
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	4966      	ldr	r1, [pc, #408]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c30:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	495e      	ldr	r1, [pc, #376]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c60:	4955      	ldr	r1, [pc, #340]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	493c      	ldr	r1, [pc, #240]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	4933      	ldr	r1, [pc, #204]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cfc:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d0a:	492b      	ldr	r1, [pc, #172]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d011      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2c:	4922      	ldr	r1, [pc, #136]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6c:	4912      	ldr	r1, [pc, #72]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d90:	4909      	ldr	r1, [pc, #36]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d006      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80d9 	beq.w	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dac:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a01      	ldr	r2, [pc, #4]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003db6:	e001      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fd ff75 	bl	8001cac <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dc6:	f7fd ff71 	bl	8001cac <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e194      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df8:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	0e1b      	lsrs	r3, r3, #24
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	071b      	lsls	r3, r3, #28
 8003e2c:	4957      	ldr	r1, [pc, #348]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d02e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d129      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e60:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	0f1b      	lsrs	r3, r3, #28
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	019a      	lsls	r2, r3, #6
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	071b      	lsls	r3, r3, #28
 8003e94:	493d      	ldr	r1, [pc, #244]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea2:	f023 021f 	bic.w	r2, r3, #31
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4937      	ldr	r1, [pc, #220]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01d      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	0f1b      	lsrs	r3, r3, #28
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	019a      	lsls	r2, r3, #6
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	4925      	ldr	r1, [pc, #148]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	019a      	lsls	r2, r3, #6
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	071b      	lsls	r3, r3, #28
 8003f24:	4919      	ldr	r1, [pc, #100]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fd feb8 	bl	8001cac <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f40:	f7fd feb4 	bl	8001cac <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0d7      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 80cd 	bne.w	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f72:	f7fd fe9b 	bl	8001cac <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f7a:	f7fd fe97 	bl	8001cac <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	; 0x64
 8003f86:	d903      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0ba      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f90:	4b5e      	ldr	r3, [pc, #376]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d0ed      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02e      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12a      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc6:	4b51      	ldr	r3, [pc, #324]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd4:	4b4d      	ldr	r3, [pc, #308]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	0f1b      	lsrs	r3, r3, #28
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	019a      	lsls	r2, r3, #6
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4944      	ldr	r1, [pc, #272]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004002:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004008:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	493d      	ldr	r1, [pc, #244]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d022      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004030:	d11d      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	0e1b      	lsrs	r3, r3, #24
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	0f1b      	lsrs	r3, r3, #28
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	4929      	ldr	r1, [pc, #164]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	0c1b      	lsrs	r3, r3, #16
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	019a      	lsls	r2, r3, #6
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	4917      	ldr	r1, [pc, #92]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4911      	ldr	r1, [pc, #68]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd fde8 	bl	8001cac <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040e0:	f7fd fde4 	bl	8001cac <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e007      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fe:	d1ef      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e049      	b.n	80041b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fbde 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fda0 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04c      	b.n	8004272 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a26      	ldr	r2, [pc, #152]	; (8004280 <HAL_TIM_Base_Start+0xc0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d01d      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a22      	ldr	r2, [pc, #136]	; (8004284 <HAL_TIM_Base_Start+0xc4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a21      	ldr	r2, [pc, #132]	; (8004288 <HAL_TIM_Base_Start+0xc8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_TIM_Base_Start+0xcc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_TIM_Base_Start+0xd0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_TIM_Base_Start+0xd4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_Base_Start+0x70>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_TIM_Base_Start+0xd8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d115      	bne.n	800425c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_TIM_Base_Start+0xdc>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b06      	cmp	r3, #6
 8004240:	d015      	beq.n	800426e <HAL_TIM_Base_Start+0xae>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d011      	beq.n	800426e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e008      	b.n	800426e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e000      	b.n	8004270 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40010400 	.word	0x40010400
 8004294:	40014000 	.word	0x40014000
 8004298:	40001800 	.word	0x40001800
 800429c:	00010007 	.word	0x00010007

080042a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e054      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_TIM_Base_Start_IT+0xd0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d022      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d01d      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a22      	ldr	r2, [pc, #136]	; (8004374 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	; (8004378 <HAL_TIM_Base_Start_IT+0xd8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <HAL_TIM_Base_Start_IT+0xdc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_TIM_Base_Start_IT+0xe0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_TIM_Base_Start_IT+0xe4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x80>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIM_Base_Start_IT+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d115      	bne.n	800434c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_TIM_Base_Start_IT+0xec>)
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d015      	beq.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d011      	beq.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	e008      	b.n	800435e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e000      	b.n	8004360 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40010400 	.word	0x40010400
 8004384:	40014000 	.word	0x40014000
 8004388:	40001800 	.word	0x40001800
 800438c:	00010007 	.word	0x00010007

08004390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e049      	b.n	8004436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f841 	bl	800443e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f000 fc60 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_TIM_PWM_Start+0x24>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e03c      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d109      	bne.n	8004492 <HAL_TIM_PWM_Start+0x3e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e02f      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d109      	bne.n	80044ac <HAL_TIM_PWM_Start+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e022      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d109      	bne.n	80044c6 <HAL_TIM_PWM_Start+0x72>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	bf14      	ite	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	2300      	moveq	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	e015      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d109      	bne.n	80044e0 <HAL_TIM_PWM_Start+0x8c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e008      	b.n	80044f2 <HAL_TIM_PWM_Start+0x9e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e092      	b.n	8004620 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Start+0xb6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	e023      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Start+0xc6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004518:	e01b      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d104      	bne.n	800452a <HAL_TIM_PWM_Start+0xd6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	e013      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d104      	bne.n	800453a <HAL_TIM_PWM_Start+0xe6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004538:	e00b      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b10      	cmp	r3, #16
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0xf6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	e003      	b.n	8004552 <HAL_TIM_PWM_Start+0xfe>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 ff32 	bl	80053c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a30      	ldr	r2, [pc, #192]	; (8004628 <HAL_TIM_PWM_Start+0x1d4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_PWM_Start+0x120>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2f      	ldr	r2, [pc, #188]	; (800462c <HAL_TIM_PWM_Start+0x1d8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_TIM_PWM_Start+0x124>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_TIM_PWM_Start+0x126>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_TIM_PWM_Start+0x1d4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d01d      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_TIM_PWM_Start+0x1dc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_TIM_PWM_Start+0x1e0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_TIM_PWM_Start+0x1e4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_TIM_PWM_Start+0x1d8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIM_PWM_Start+0x1e8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIM_PWM_Start+0x18a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_TIM_PWM_Start+0x1ec>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d115      	bne.n	800460a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_TIM_PWM_Start+0x1f0>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d015      	beq.n	800461c <HAL_TIM_PWM_Start+0x1c8>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f6:	d011      	beq.n	800461c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	e008      	b.n	800461c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e000      	b.n	800461e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40010000 	.word	0x40010000
 800462c:	40010400 	.word	0x40010400
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40014000 	.word	0x40014000
 8004640:	40001800 	.word	0x40001800
 8004644:	00010007 	.word	0x00010007

08004648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0202 	mvn.w	r2, #2
 8004674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fae4 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fad6 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fae7 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0204 	mvn.w	r2, #4
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 faba 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 faac 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fabd 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0208 	mvn.w	r2, #8
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa90 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa82 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fa93 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa66 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa58 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa69 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0201 	mvn.w	r2, #1
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc fcc0 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fea4 	bl	8005540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fe97 	bl	8005554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d10e      	bne.n	8004852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d107      	bne.n	8004852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fa17 	bl	8004c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b20      	cmp	r3, #32
 800485e:	d10e      	bne.n	800487e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d107      	bne.n	800487e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0220 	mvn.w	r2, #32
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fe57 	bl	800552c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0ff      	b.n	8004aa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b14      	cmp	r3, #20
 80048b2:	f200 80f0 	bhi.w	8004a96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004a97 	.word	0x08004a97
 80048c4:	08004a97 	.word	0x08004a97
 80048c8:	08004a97 	.word	0x08004a97
 80048cc:	08004951 	.word	0x08004951
 80048d0:	08004a97 	.word	0x08004a97
 80048d4:	08004a97 	.word	0x08004a97
 80048d8:	08004a97 	.word	0x08004a97
 80048dc:	08004993 	.word	0x08004993
 80048e0:	08004a97 	.word	0x08004a97
 80048e4:	08004a97 	.word	0x08004a97
 80048e8:	08004a97 	.word	0x08004a97
 80048ec:	080049d3 	.word	0x080049d3
 80048f0:	08004a97 	.word	0x08004a97
 80048f4:	08004a97 	.word	0x08004a97
 80048f8:	08004a97 	.word	0x08004a97
 80048fc:	08004a15 	.word	0x08004a15
 8004900:	08004a97 	.word	0x08004a97
 8004904:	08004a97 	.word	0x08004a97
 8004908:	08004a97 	.word	0x08004a97
 800490c:	08004a55 	.word	0x08004a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fa5c 	bl	8004dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]
      break;
 800494e:	e0a5      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 faae 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
      break;
 8004990:	e084      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb05 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0208 	orr.w	r2, r2, #8
 80049ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0204 	bic.w	r2, r2, #4
 80049bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	61da      	str	r2, [r3, #28]
      break;
 80049d0:	e064      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fb5b 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	61da      	str	r2, [r3, #28]
      break;
 8004a12:	e043      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb92 	bl	8005144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a52:	e023      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fbc4 	bl	80051e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a94:	e002      	b.n	8004a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop

08004ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_ConfigClockSource+0x1c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0b4      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x186>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_TIM_ConfigClockSource+0x190>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b04:	d03e      	beq.n	8004b84 <HAL_TIM_ConfigClockSource+0xd4>
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	f200 8087 	bhi.w	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	f000 8086 	beq.w	8004c22 <HAL_TIM_ConfigClockSource+0x172>
 8004b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1a:	d87f      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d01a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xa6>
 8004b20:	2b70      	cmp	r3, #112	; 0x70
 8004b22:	d87b      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d050      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x11a>
 8004b28:	2b60      	cmp	r3, #96	; 0x60
 8004b2a:	d877      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d03c      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xfa>
 8004b30:	2b50      	cmp	r3, #80	; 0x50
 8004b32:	d873      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d058      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x13a>
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d86f      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d064      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x15a>
 8004b40:	2b30      	cmp	r3, #48	; 0x30
 8004b42:	d86b      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d060      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d867      	bhi.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x15a>
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d05a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	e062      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b66:	f000 fc0d 	bl	8005384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	609a      	str	r2, [r3, #8]
      break;
 8004b82:	e04f      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b94:	f000 fbf6 	bl	8005384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba6:	609a      	str	r2, [r3, #8]
      break;
 8004ba8:	e03c      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f000 fb6a 	bl	8005290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2150      	movs	r1, #80	; 0x50
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fbc3 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004bc8:	e02c      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 fb89 	bl	80052ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2160      	movs	r1, #96	; 0x60
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fbb3 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004be8:	e01c      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 fb4a 	bl	8005290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fba3 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004c08:	e00c      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f000 fb9a 	bl	800534e <TIM_ITRx_SetConfig>
      break;
 8004c1a:	e003      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	fffeff88 	.word	0xfffeff88

08004c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a40      	ldr	r2, [pc, #256]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d00f      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3b      	ldr	r2, [pc, #236]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d027      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d023      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2b      	ldr	r2, [pc, #172]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d017      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <TIM_Base_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <TIM_Base_SetConfig+0x138>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <TIM_Base_SetConfig+0x13c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	40001c00 	.word	0x40001c00
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <TIM_OC1_SetConfig+0xd8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0302 	bic.w	r3, r3, #2
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC1_SetConfig+0x64>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0308 	bic.w	r3, r3, #8
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	fffeff8f 	.word	0xfffeff8f
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0210 	bic.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <TIM_OC2_SetConfig+0xe4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC2_SetConfig+0x68>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC2_SetConfig+0x94>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d113      	bne.n	8004f74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	feff8fff 	.word	0xfeff8fff
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a22      	ldr	r2, [pc, #136]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <TIM_OC3_SetConfig+0xe8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x92>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <TIM_OC3_SetConfig+0xe8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	fffeff8f 	.word	0xfffeff8f
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <TIM_OC4_SetConfig+0xa4>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_OC4_SetConfig+0xa8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x68>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <TIM_OC4_SetConfig+0xac>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	feff8fff 	.word	0xfeff8fff
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <TIM_OC5_SetConfig+0x98>)
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <TIM_OC5_SetConfig+0x9c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_OC5_SetConfig+0x5e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <TIM_OC5_SetConfig+0xa0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d109      	bne.n	80051b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	fffeff8f 	.word	0xfffeff8f
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <TIM_OC6_SetConfig+0x9c>)
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <TIM_OC6_SetConfig+0xa0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC6_SetConfig+0x60>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <TIM_OC6_SetConfig+0xa4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	feff8fff 	.word	0xfeff8fff
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400

08005290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0201 	bic.w	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 030a 	bic.w	r3, r3, #10
 80052cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b087      	sub	sp, #28
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0210 	bic.w	r2, r3, #16
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800532a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	f043 0307 	orr.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2201      	movs	r2, #1
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e06d      	b.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a30      	ldr	r2, [pc, #192]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d108      	bne.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a20      	ldr	r2, [pc, #128]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d01d      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a15      	ldr	r2, [pc, #84]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10c      	bne.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40001800 	.word	0x40001800

0800552c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e040      	b.n	80055fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc faac 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fbe6 	bl	8005d78 <UART_SetConfig>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e022      	b.n	80055fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fe3e 	bl	8006240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fec5 	bl	8006384 <UART_CheckIdleState>
 80055fa:	4603      	mov	r3, r0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005618:	2b20      	cmp	r3, #32
 800561a:	d171      	bne.n	8005700 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Transmit+0x24>
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e06a      	b.n	8005702 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2221      	movs	r2, #33	; 0x21
 8005638:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563a:	f7fc fb37 	bl	8001cac <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d108      	bne.n	800566c <HAL_UART_Transmit+0x68>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e003      	b.n	8005674 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005674:	e02c      	b.n	80056d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 feb6 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e038      	b.n	8005702 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3302      	adds	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e007      	b.n	80056be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1cc      	bne.n	8005676 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2140      	movs	r1, #64	; 0x40
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fe83 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e005      	b.n	8005702 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08a      	sub	sp, #40	; 0x28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	4613      	mov	r3, r2
 8005716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571e:	2b20      	cmp	r3, #32
 8005720:	d132      	bne.n	8005788 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_Receive_IT+0x24>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e02b      	b.n	800578a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	61bb      	str	r3, [r7, #24]
   return(result);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	461a      	mov	r2, r3
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fefe 	bl	8006580 <UART_Start_Receive_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	e000      	b.n	800578a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	; 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b0ba      	sub	sp, #232	; 0xe8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057be:	f640 030f 	movw	r3, #2063	; 0x80f
 80057c2:	4013      	ands	r3, r2
 80057c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d115      	bne.n	80057fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00f      	beq.n	80057fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8297 	beq.w	8005d20 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
      }
      return;
 80057fa:	e291      	b.n	8005d20 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8117 	beq.w	8005a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005816:	4b85      	ldr	r3, [pc, #532]	; (8005a2c <HAL_UART_IRQHandler+0x298>)
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 810a 	beq.w	8005a34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d011      	beq.n	8005850 <HAL_UART_IRQHandler+0xbc>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2201      	movs	r2, #1
 800583e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d011      	beq.n	8005880 <HAL_UART_IRQHandler+0xec>
 800585c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2202      	movs	r2, #2
 800586e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HAL_UART_IRQHandler+0x11c>
 800588c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2204      	movs	r2, #4
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a6:	f043 0202 	orr.w	r2, r3, #2
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d017      	beq.n	80058ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2208      	movs	r2, #8
 80058da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	f043 0208 	orr.w	r2, r3, #8
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <HAL_UART_IRQHandler+0x18a>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 81fd 	beq.w	8005d24 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800596a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800596e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04f      	beq.n	8005a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fec8 	bl	800670c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d141      	bne.n	8005a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d9      	bne.n	800598a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d013      	beq.n	8005a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <HAL_UART_IRQHandler+0x29c>)
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc fb0f 	bl	800200e <HAL_DMA_Abort_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d017      	beq.n	8005a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e00f      	b.n	8005a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9a0 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00b      	b.n	8005a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f99c 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e007      	b.n	8005a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f998 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a24:	e17e      	b.n	8005d24 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a26:	bf00      	nop
    return;
 8005a28:	e17c      	b.n	8005d24 <HAL_UART_IRQHandler+0x590>
 8005a2a:	bf00      	nop
 8005a2c:	04000120 	.word	0x04000120
 8005a30:	080067d5 	.word	0x080067d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f040 814c 	bne.w	8005cd6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 8145 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 813e 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	f040 80b6 	bne.w	8005bde <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8150 	beq.w	8005d28 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f080 8148 	bcs.w	8005d28 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aac:	f000 8086 	beq.w	8005bbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1da      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e1      	bne.n	8005afa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e3      	bne.n	8005b36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e4      	bne.n	8005b7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fc f9b9 	bl	8001f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8c2 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bdc:	e0a4      	b.n	8005d28 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8096 	beq.w	8005d2c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8091 	beq.w	8005d2c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c64:	633a      	str	r2, [r7, #48]	; 0x30
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	617b      	str	r3, [r7, #20]
   return(result);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e4      	bne.n	8005c8c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f846 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd4:	e02a      	b.n	8005d2c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00e      	beq.n	8005d00 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01c      	beq.n	8005d30 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
    }
    return;
 8005cfe:	e017      	b.n	8005d30 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d012      	beq.n	8005d32 <HAL_UART_IRQHandler+0x59e>
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fd71 	bl	8006800 <UART_EndTransmit_IT>
    return;
 8005d1e:	e008      	b.n	8005d32 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d20:	bf00      	nop
 8005d22:	e006      	b.n	8005d32 <HAL_UART_IRQHandler+0x59e>
    return;
 8005d24:	bf00      	nop
 8005d26:	e004      	b.n	8005d32 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_IRQHandler+0x59e>
    return;
 8005d30:	bf00      	nop
  }

}
 8005d32:	37e8      	adds	r7, #232	; 0xe8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4ba6      	ldr	r3, [pc, #664]	; (800603c <UART_SetConfig+0x2c4>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a94      	ldr	r2, [pc, #592]	; (8006040 <UART_SetConfig+0x2c8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d120      	bne.n	8005e36 <UART_SetConfig+0xbe>
 8005df4:	4b93      	ldr	r3, [pc, #588]	; (8006044 <UART_SetConfig+0x2cc>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d816      	bhi.n	8005e30 <UART_SetConfig+0xb8>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x90>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e1f 	.word	0x08005e1f
 8005e14:	08005e2b 	.word	0x08005e2b
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e150      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e14d      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e24:	2304      	movs	r3, #4
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e14a      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e147      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e30:	2310      	movs	r3, #16
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e144      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a83      	ldr	r2, [pc, #524]	; (8006048 <UART_SetConfig+0x2d0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d132      	bne.n	8005ea6 <UART_SetConfig+0x12e>
 8005e40:	4b80      	ldr	r3, [pc, #512]	; (8006044 <UART_SetConfig+0x2cc>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d828      	bhi.n	8005ea0 <UART_SetConfig+0x128>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0xdc>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005ea1 	.word	0x08005ea1
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005e8f 	.word	0x08005e8f
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005e9b 	.word	0x08005e9b
 8005e88:	2300      	movs	r3, #0
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e118      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e115      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e94:	2304      	movs	r3, #4
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e112      	b.n	80060c0 <UART_SetConfig+0x348>
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e10f      	b.n	80060c0 <UART_SetConfig+0x348>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e10c      	b.n	80060c0 <UART_SetConfig+0x348>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a68      	ldr	r2, [pc, #416]	; (800604c <UART_SetConfig+0x2d4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d120      	bne.n	8005ef2 <UART_SetConfig+0x17a>
 8005eb0:	4b64      	ldr	r3, [pc, #400]	; (8006044 <UART_SetConfig+0x2cc>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eba:	2b30      	cmp	r3, #48	; 0x30
 8005ebc:	d013      	beq.n	8005ee6 <UART_SetConfig+0x16e>
 8005ebe:	2b30      	cmp	r3, #48	; 0x30
 8005ec0:	d814      	bhi.n	8005eec <UART_SetConfig+0x174>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d009      	beq.n	8005eda <UART_SetConfig+0x162>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d810      	bhi.n	8005eec <UART_SetConfig+0x174>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <UART_SetConfig+0x15c>
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d006      	beq.n	8005ee0 <UART_SetConfig+0x168>
 8005ed2:	e00b      	b.n	8005eec <UART_SetConfig+0x174>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e0f2      	b.n	80060c0 <UART_SetConfig+0x348>
 8005eda:	2302      	movs	r3, #2
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e0ef      	b.n	80060c0 <UART_SetConfig+0x348>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e0ec      	b.n	80060c0 <UART_SetConfig+0x348>
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e0e9      	b.n	80060c0 <UART_SetConfig+0x348>
 8005eec:	2310      	movs	r3, #16
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e0e6      	b.n	80060c0 <UART_SetConfig+0x348>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a56      	ldr	r2, [pc, #344]	; (8006050 <UART_SetConfig+0x2d8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d120      	bne.n	8005f3e <UART_SetConfig+0x1c6>
 8005efc:	4b51      	ldr	r3, [pc, #324]	; (8006044 <UART_SetConfig+0x2cc>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f06:	2bc0      	cmp	r3, #192	; 0xc0
 8005f08:	d013      	beq.n	8005f32 <UART_SetConfig+0x1ba>
 8005f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f0c:	d814      	bhi.n	8005f38 <UART_SetConfig+0x1c0>
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d009      	beq.n	8005f26 <UART_SetConfig+0x1ae>
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d810      	bhi.n	8005f38 <UART_SetConfig+0x1c0>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <UART_SetConfig+0x1a8>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d006      	beq.n	8005f2c <UART_SetConfig+0x1b4>
 8005f1e:	e00b      	b.n	8005f38 <UART_SetConfig+0x1c0>
 8005f20:	2300      	movs	r3, #0
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e0cc      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f26:	2302      	movs	r3, #2
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e0c9      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e0c6      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f32:	2308      	movs	r3, #8
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e0c3      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e0c0      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a44      	ldr	r2, [pc, #272]	; (8006054 <UART_SetConfig+0x2dc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d125      	bne.n	8005f94 <UART_SetConfig+0x21c>
 8005f48:	4b3e      	ldr	r3, [pc, #248]	; (8006044 <UART_SetConfig+0x2cc>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f56:	d017      	beq.n	8005f88 <UART_SetConfig+0x210>
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5c:	d817      	bhi.n	8005f8e <UART_SetConfig+0x216>
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f62:	d00b      	beq.n	8005f7c <UART_SetConfig+0x204>
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d811      	bhi.n	8005f8e <UART_SetConfig+0x216>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <UART_SetConfig+0x1fe>
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d006      	beq.n	8005f82 <UART_SetConfig+0x20a>
 8005f74:	e00b      	b.n	8005f8e <UART_SetConfig+0x216>
 8005f76:	2300      	movs	r3, #0
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e0a1      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e09e      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f82:	2304      	movs	r3, #4
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e09b      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e098      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	77fb      	strb	r3, [r7, #31]
 8005f92:	e095      	b.n	80060c0 <UART_SetConfig+0x348>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <UART_SetConfig+0x2e0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d125      	bne.n	8005fea <UART_SetConfig+0x272>
 8005f9e:	4b29      	ldr	r3, [pc, #164]	; (8006044 <UART_SetConfig+0x2cc>)
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fac:	d017      	beq.n	8005fde <UART_SetConfig+0x266>
 8005fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb2:	d817      	bhi.n	8005fe4 <UART_SetConfig+0x26c>
 8005fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb8:	d00b      	beq.n	8005fd2 <UART_SetConfig+0x25a>
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d811      	bhi.n	8005fe4 <UART_SetConfig+0x26c>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <UART_SetConfig+0x254>
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d006      	beq.n	8005fd8 <UART_SetConfig+0x260>
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x26c>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e076      	b.n	80060c0 <UART_SetConfig+0x348>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e073      	b.n	80060c0 <UART_SetConfig+0x348>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e070      	b.n	80060c0 <UART_SetConfig+0x348>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e06d      	b.n	80060c0 <UART_SetConfig+0x348>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e06a      	b.n	80060c0 <UART_SetConfig+0x348>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <UART_SetConfig+0x2e4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d138      	bne.n	8006066 <UART_SetConfig+0x2ee>
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <UART_SetConfig+0x2cc>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ffe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006002:	d017      	beq.n	8006034 <UART_SetConfig+0x2bc>
 8006004:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006008:	d82a      	bhi.n	8006060 <UART_SetConfig+0x2e8>
 800600a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600e:	d00b      	beq.n	8006028 <UART_SetConfig+0x2b0>
 8006010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006014:	d824      	bhi.n	8006060 <UART_SetConfig+0x2e8>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <UART_SetConfig+0x2aa>
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601e:	d006      	beq.n	800602e <UART_SetConfig+0x2b6>
 8006020:	e01e      	b.n	8006060 <UART_SetConfig+0x2e8>
 8006022:	2300      	movs	r3, #0
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e04b      	b.n	80060c0 <UART_SetConfig+0x348>
 8006028:	2302      	movs	r3, #2
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e048      	b.n	80060c0 <UART_SetConfig+0x348>
 800602e:	2304      	movs	r3, #4
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e045      	b.n	80060c0 <UART_SetConfig+0x348>
 8006034:	2308      	movs	r3, #8
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e042      	b.n	80060c0 <UART_SetConfig+0x348>
 800603a:	bf00      	nop
 800603c:	efff69f3 	.word	0xefff69f3
 8006040:	40011000 	.word	0x40011000
 8006044:	40023800 	.word	0x40023800
 8006048:	40004400 	.word	0x40004400
 800604c:	40004800 	.word	0x40004800
 8006050:	40004c00 	.word	0x40004c00
 8006054:	40005000 	.word	0x40005000
 8006058:	40011400 	.word	0x40011400
 800605c:	40007800 	.word	0x40007800
 8006060:	2310      	movs	r3, #16
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e02c      	b.n	80060c0 <UART_SetConfig+0x348>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a72      	ldr	r2, [pc, #456]	; (8006234 <UART_SetConfig+0x4bc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d125      	bne.n	80060bc <UART_SetConfig+0x344>
 8006070:	4b71      	ldr	r3, [pc, #452]	; (8006238 <UART_SetConfig+0x4c0>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800607a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800607e:	d017      	beq.n	80060b0 <UART_SetConfig+0x338>
 8006080:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006084:	d817      	bhi.n	80060b6 <UART_SetConfig+0x33e>
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	d00b      	beq.n	80060a4 <UART_SetConfig+0x32c>
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006090:	d811      	bhi.n	80060b6 <UART_SetConfig+0x33e>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <UART_SetConfig+0x326>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609a:	d006      	beq.n	80060aa <UART_SetConfig+0x332>
 800609c:	e00b      	b.n	80060b6 <UART_SetConfig+0x33e>
 800609e:	2300      	movs	r3, #0
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e00d      	b.n	80060c0 <UART_SetConfig+0x348>
 80060a4:	2302      	movs	r3, #2
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e00a      	b.n	80060c0 <UART_SetConfig+0x348>
 80060aa:	2304      	movs	r3, #4
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e007      	b.n	80060c0 <UART_SetConfig+0x348>
 80060b0:	2308      	movs	r3, #8
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e004      	b.n	80060c0 <UART_SetConfig+0x348>
 80060b6:	2310      	movs	r3, #16
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e001      	b.n	80060c0 <UART_SetConfig+0x348>
 80060bc:	2310      	movs	r3, #16
 80060be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d15b      	bne.n	8006182 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d828      	bhi.n	8006122 <UART_SetConfig+0x3aa>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x360>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fd fbf0 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8006100:	61b8      	str	r0, [r7, #24]
        break;
 8006102:	e013      	b.n	800612c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fd fc00 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8006108:	61b8      	str	r0, [r7, #24]
        break;
 800610a:	e00f      	b.n	800612c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b4b      	ldr	r3, [pc, #300]	; (800623c <UART_SetConfig+0x4c4>)
 800610e:	61bb      	str	r3, [r7, #24]
        break;
 8006110:	e00c      	b.n	800612c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fd fad3 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8006116:	61b8      	str	r0, [r7, #24]
        break;
 8006118:	e008      	b.n	800612c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	61bb      	str	r3, [r7, #24]
        break;
 8006120:	e004      	b.n	800612c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	77bb      	strb	r3, [r7, #30]
        break;
 800612a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d074      	beq.n	800621c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	005a      	lsls	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	441a      	add	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	fbb2 f3f3 	udiv	r3, r2, r3
 8006146:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d916      	bls.n	800617c <UART_SetConfig+0x404>
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d212      	bcs.n	800617c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f023 030f 	bic.w	r3, r3, #15
 800615e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	b29b      	uxth	r3, r3
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	b29a      	uxth	r2, r3
 800616c:	89fb      	ldrh	r3, [r7, #14]
 800616e:	4313      	orrs	r3, r2
 8006170:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	89fa      	ldrh	r2, [r7, #14]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	e04f      	b.n	800621c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	77bb      	strb	r3, [r7, #30]
 8006180:	e04c      	b.n	800621c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006182:	7ffb      	ldrb	r3, [r7, #31]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d828      	bhi.n	80061da <UART_SetConfig+0x462>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x418>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c5 	.word	0x080061c5
 800619c:	080061db 	.word	0x080061db
 80061a0:	080061cb 	.word	0x080061cb
 80061a4:	080061db 	.word	0x080061db
 80061a8:	080061db 	.word	0x080061db
 80061ac:	080061db 	.word	0x080061db
 80061b0:	080061d3 	.word	0x080061d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7fd fb94 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 80061b8:	61b8      	str	r0, [r7, #24]
        break;
 80061ba:	e013      	b.n	80061e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fd fba4 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 80061c0:	61b8      	str	r0, [r7, #24]
        break;
 80061c2:	e00f      	b.n	80061e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c4:	4b1d      	ldr	r3, [pc, #116]	; (800623c <UART_SetConfig+0x4c4>)
 80061c6:	61bb      	str	r3, [r7, #24]
        break;
 80061c8:	e00c      	b.n	80061e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ca:	f7fd fa77 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 80061ce:	61b8      	str	r0, [r7, #24]
        break;
 80061d0:	e008      	b.n	80061e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d6:	61bb      	str	r3, [r7, #24]
        break;
 80061d8:	e004      	b.n	80061e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	77bb      	strb	r3, [r7, #30]
        break;
 80061e2:	bf00      	nop
    }

    if (pclk != 0U)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d018      	beq.n	800621c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	085a      	lsrs	r2, r3, #1
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	441a      	add	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b0f      	cmp	r3, #15
 8006202:	d909      	bls.n	8006218 <UART_SetConfig+0x4a0>
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d205      	bcs.n	8006218 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e001      	b.n	800621c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006228:	7fbb      	ldrb	r3, [r7, #30]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3720      	adds	r7, #32
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40007c00 	.word	0x40007c00
 8006238:	40023800 	.word	0x40023800
 800623c:	00f42400 	.word	0x00f42400

08006240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01a      	beq.n	8006356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633e:	d10a      	bne.n	8006356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af02      	add	r7, sp, #8
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006394:	f7fb fc8a 	bl	8001cac <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d10e      	bne.n	80063c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f81b 	bl	80063f2 <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e011      	b.n	80063ea <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b09c      	sub	sp, #112	; 0x70
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	603b      	str	r3, [r7, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006402:	e0a7      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	f000 80a3 	beq.w	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fb fc4d 	bl	8001cac <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <UART_WaitOnFlagUntilTimeout+0x32>
 800641e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006420:	2b00      	cmp	r3, #0
 8006422:	d13f      	bne.n	80064a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006438:	667b      	str	r3, [r7, #100]	; 0x64
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006444:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e6      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	663b      	str	r3, [r7, #96]	; 0x60
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006476:	64ba      	str	r2, [r7, #72]	; 0x48
 8006478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800647c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e068      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d050      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d148      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
 80064ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800651e:	623a      	str	r2, [r7, #32]
 8006520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e010      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	429a      	cmp	r2, r3
 8006570:	f43f af48 	beq.w	8006404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3770      	adds	r7, #112	; 0x70
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006580:	b480      	push	{r7}
 8006582:	b097      	sub	sp, #92	; 0x5c
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	88fa      	ldrh	r2, [r7, #6]
 8006598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	d10e      	bne.n	80065d2 <UART_Start_Receive_IT+0x52>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <UART_Start_Receive_IT+0x48>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065c6:	e02d      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	22ff      	movs	r2, #255	; 0xff
 80065cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065d0:	e028      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10d      	bne.n	80065f6 <UART_Start_Receive_IT+0x76>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <UART_Start_Receive_IT+0x6c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ea:	e01b      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	227f      	movs	r2, #127	; 0x7f
 80065f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065f4:	e016      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065fe:	d10d      	bne.n	800661c <UART_Start_Receive_IT+0x9c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <UART_Start_Receive_IT+0x92>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	227f      	movs	r2, #127	; 0x7f
 800660c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006610:	e008      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	223f      	movs	r2, #63	; 0x3f
 8006616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800661a:	e003      	b.n	8006624 <UART_Start_Receive_IT+0xa4>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2222      	movs	r2, #34	; 0x22
 8006630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3308      	adds	r3, #8
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	657b      	str	r3, [r7, #84]	; 0x54
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3308      	adds	r3, #8
 8006652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006654:	64ba      	str	r2, [r7, #72]	; 0x48
 8006656:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800665a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e5      	bne.n	8006634 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d107      	bne.n	8006682 <UART_Start_Receive_IT+0x102>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a21      	ldr	r2, [pc, #132]	; (8006704 <UART_Start_Receive_IT+0x184>)
 800667e:	669a      	str	r2, [r3, #104]	; 0x68
 8006680:	e002      	b.n	8006688 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a20      	ldr	r2, [pc, #128]	; (8006708 <UART_Start_Receive_IT+0x188>)
 8006686:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d019      	beq.n	80066c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_Start_Receive_IT+0x110>
 80066c2:	e018      	b.n	80066f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	613b      	str	r3, [r7, #16]
   return(result);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	653b      	str	r3, [r7, #80]	; 0x50
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	6a3a      	ldr	r2, [r7, #32]
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e6      	bne.n	80066c4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	375c      	adds	r7, #92	; 0x5c
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	080069bb 	.word	0x080069bb
 8006708:	08006855 	.word	0x08006855

0800670c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b095      	sub	sp, #84	; 0x54
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	643b      	str	r3, [r7, #64]	; 0x40
 8006734:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	61fb      	str	r3, [r7, #28]
   return(result);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	64bb      	str	r3, [r7, #72]	; 0x48
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e5      	bne.n	8006746 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677e:	2b01      	cmp	r3, #1
 8006780:	d118      	bne.n	80067b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f023 0310 	bic.w	r3, r3, #16
 8006796:	647b      	str	r3, [r7, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6979      	ldr	r1, [r7, #20]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	613b      	str	r3, [r7, #16]
   return(result);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067c8:	bf00      	nop
 80067ca:	3754      	adds	r7, #84	; 0x54
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff faaa 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	60bb      	str	r3, [r7, #8]
   return(result);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	613b      	str	r3, [r7, #16]
   return(result);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fa76 	bl	8005d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684c:	bf00      	nop
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b096      	sub	sp, #88	; 0x58
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006862:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686c:	2b22      	cmp	r3, #34	; 0x22
 800686e:	f040 8098 	bne.w	80069a2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800687c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006880:	b2d9      	uxtb	r1, r3
 8006882:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006886:	b2da      	uxtb	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	400a      	ands	r2, r1
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d17b      	bne.n	80069b2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
 80068da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	623b      	str	r3, [r7, #32]
   return(result);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800690c:	633a      	str	r2, [r7, #48]	; 0x30
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	2b01      	cmp	r3, #1
 800693a:	d12e      	bne.n	800699a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	64bb      	str	r3, [r7, #72]	; 0x48
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	617b      	str	r3, [r7, #20]
   return(result);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b10      	cmp	r3, #16
 8006980:	d103      	bne.n	800698a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f9e4 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006998:	e00b      	b.n	80069b2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fa fc78 	bl	8001290 <HAL_UART_RxCpltCallback>
}
 80069a0:	e007      	b.n	80069b2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0208 	orr.w	r2, r2, #8
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	3758      	adds	r7, #88	; 0x58
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b096      	sub	sp, #88	; 0x58
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d2:	2b22      	cmp	r3, #34	; 0x22
 80069d4:	f040 8098 	bne.w	8006b08 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069f0:	4013      	ands	r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	1c9a      	adds	r2, r3, #2
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d17b      	bne.n	8006b18 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d12e      	bne.n	8006b00 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0310 	bic.w	r3, r3, #16
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac6:	61bb      	str	r3, [r7, #24]
 8006ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6979      	ldr	r1, [r7, #20]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d103      	bne.n	8006af0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2210      	movs	r2, #16
 8006aee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff f931 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006afe:	e00b      	b.n	8006b18 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fa fbc5 	bl	8001290 <HAL_UART_RxCpltCallback>
}
 8006b06:	e007      	b.n	8006b18 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	619a      	str	r2, [r3, #24]
}
 8006b18:	bf00      	nop
 8006b1a:	3758      	adds	r7, #88	; 0x58
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <malloc>:
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <malloc+0xc>)
 8006b22:	4601      	mov	r1, r0
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	f000 b82b 	b.w	8006b80 <_malloc_r>
 8006b2a:	bf00      	nop
 8006b2c:	200000a4 	.word	0x200000a4

08006b30 <free>:
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <free+0xc>)
 8006b32:	4601      	mov	r1, r0
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	f000 b99f 	b.w	8006e78 <_free_r>
 8006b3a:	bf00      	nop
 8006b3c:	200000a4 	.word	0x200000a4

08006b40 <sbrk_aligned>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4e0e      	ldr	r6, [pc, #56]	; (8006b7c <sbrk_aligned+0x3c>)
 8006b44:	460c      	mov	r4, r1
 8006b46:	6831      	ldr	r1, [r6, #0]
 8006b48:	4605      	mov	r5, r0
 8006b4a:	b911      	cbnz	r1, 8006b52 <sbrk_aligned+0x12>
 8006b4c:	f000 f958 	bl	8006e00 <_sbrk_r>
 8006b50:	6030      	str	r0, [r6, #0]
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f953 	bl	8006e00 <_sbrk_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d00a      	beq.n	8006b74 <sbrk_aligned+0x34>
 8006b5e:	1cc4      	adds	r4, r0, #3
 8006b60:	f024 0403 	bic.w	r4, r4, #3
 8006b64:	42a0      	cmp	r0, r4
 8006b66:	d007      	beq.n	8006b78 <sbrk_aligned+0x38>
 8006b68:	1a21      	subs	r1, r4, r0
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 f948 	bl	8006e00 <_sbrk_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d101      	bne.n	8006b78 <sbrk_aligned+0x38>
 8006b74:	f04f 34ff 	mov.w	r4, #4294967295
 8006b78:	4620      	mov	r0, r4
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	2000031c 	.word	0x2000031c

08006b80 <_malloc_r>:
 8006b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b84:	1ccd      	adds	r5, r1, #3
 8006b86:	f025 0503 	bic.w	r5, r5, #3
 8006b8a:	3508      	adds	r5, #8
 8006b8c:	2d0c      	cmp	r5, #12
 8006b8e:	bf38      	it	cc
 8006b90:	250c      	movcc	r5, #12
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	4607      	mov	r7, r0
 8006b96:	db01      	blt.n	8006b9c <_malloc_r+0x1c>
 8006b98:	42a9      	cmp	r1, r5
 8006b9a:	d905      	bls.n	8006ba8 <_malloc_r+0x28>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	2600      	movs	r6, #0
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c7c <_malloc_r+0xfc>
 8006bac:	f000 f868 	bl	8006c80 <__malloc_lock>
 8006bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb4:	461c      	mov	r4, r3
 8006bb6:	bb5c      	cbnz	r4, 8006c10 <_malloc_r+0x90>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f7ff ffc0 	bl	8006b40 <sbrk_aligned>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	d155      	bne.n	8006c72 <_malloc_r+0xf2>
 8006bc6:	f8d8 4000 	ldr.w	r4, [r8]
 8006bca:	4626      	mov	r6, r4
 8006bcc:	2e00      	cmp	r6, #0
 8006bce:	d145      	bne.n	8006c5c <_malloc_r+0xdc>
 8006bd0:	2c00      	cmp	r4, #0
 8006bd2:	d048      	beq.n	8006c66 <_malloc_r+0xe6>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4638      	mov	r0, r7
 8006bda:	eb04 0903 	add.w	r9, r4, r3
 8006bde:	f000 f90f 	bl	8006e00 <_sbrk_r>
 8006be2:	4581      	cmp	r9, r0
 8006be4:	d13f      	bne.n	8006c66 <_malloc_r+0xe6>
 8006be6:	6821      	ldr	r1, [r4, #0]
 8006be8:	1a6d      	subs	r5, r5, r1
 8006bea:	4629      	mov	r1, r5
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff ffa7 	bl	8006b40 <sbrk_aligned>
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d037      	beq.n	8006c66 <_malloc_r+0xe6>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	442b      	add	r3, r5
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d038      	beq.n	8006c76 <_malloc_r+0xf6>
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	42a2      	cmp	r2, r4
 8006c08:	d12b      	bne.n	8006c62 <_malloc_r+0xe2>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	e00f      	b.n	8006c30 <_malloc_r+0xb0>
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	1b52      	subs	r2, r2, r5
 8006c14:	d41f      	bmi.n	8006c56 <_malloc_r+0xd6>
 8006c16:	2a0b      	cmp	r2, #11
 8006c18:	d917      	bls.n	8006c4a <_malloc_r+0xca>
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	6025      	str	r5, [r4, #0]
 8006c20:	bf18      	it	ne
 8006c22:	6059      	strne	r1, [r3, #4]
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	bf08      	it	eq
 8006c28:	f8c8 1000 	streq.w	r1, [r8]
 8006c2c:	5162      	str	r2, [r4, r5]
 8006c2e:	604b      	str	r3, [r1, #4]
 8006c30:	4638      	mov	r0, r7
 8006c32:	f104 060b 	add.w	r6, r4, #11
 8006c36:	f000 f829 	bl	8006c8c <__malloc_unlock>
 8006c3a:	f026 0607 	bic.w	r6, r6, #7
 8006c3e:	1d23      	adds	r3, r4, #4
 8006c40:	1af2      	subs	r2, r6, r3
 8006c42:	d0ae      	beq.n	8006ba2 <_malloc_r+0x22>
 8006c44:	1b9b      	subs	r3, r3, r6
 8006c46:	50a3      	str	r3, [r4, r2]
 8006c48:	e7ab      	b.n	8006ba2 <_malloc_r+0x22>
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	6862      	ldr	r2, [r4, #4]
 8006c4e:	d1dd      	bne.n	8006c0c <_malloc_r+0x8c>
 8006c50:	f8c8 2000 	str.w	r2, [r8]
 8006c54:	e7ec      	b.n	8006c30 <_malloc_r+0xb0>
 8006c56:	4623      	mov	r3, r4
 8006c58:	6864      	ldr	r4, [r4, #4]
 8006c5a:	e7ac      	b.n	8006bb6 <_malloc_r+0x36>
 8006c5c:	4634      	mov	r4, r6
 8006c5e:	6876      	ldr	r6, [r6, #4]
 8006c60:	e7b4      	b.n	8006bcc <_malloc_r+0x4c>
 8006c62:	4613      	mov	r3, r2
 8006c64:	e7cc      	b.n	8006c00 <_malloc_r+0x80>
 8006c66:	230c      	movs	r3, #12
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f000 f80e 	bl	8006c8c <__malloc_unlock>
 8006c70:	e797      	b.n	8006ba2 <_malloc_r+0x22>
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	e7dc      	b.n	8006c30 <_malloc_r+0xb0>
 8006c76:	605b      	str	r3, [r3, #4]
 8006c78:	deff      	udf	#255	; 0xff
 8006c7a:	bf00      	nop
 8006c7c:	20000318 	.word	0x20000318

08006c80 <__malloc_lock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__malloc_lock+0x8>)
 8006c82:	f000 b8f7 	b.w	8006e74 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	2000045c 	.word	0x2000045c

08006c8c <__malloc_unlock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__malloc_unlock+0x8>)
 8006c8e:	f000 b8f2 	b.w	8006e76 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	2000045c 	.word	0x2000045c

08006c98 <_strtol_l.constprop.0>:
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9e:	d001      	beq.n	8006ca4 <_strtol_l.constprop.0+0xc>
 8006ca0:	2b24      	cmp	r3, #36	; 0x24
 8006ca2:	d906      	bls.n	8006cb2 <_strtol_l.constprop.0+0x1a>
 8006ca4:	f000 f8bc 	bl	8006e20 <__errno>
 8006ca8:	2316      	movs	r3, #22
 8006caa:	6003      	str	r3, [r0, #0]
 8006cac:	2000      	movs	r0, #0
 8006cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d98 <_strtol_l.constprop.0+0x100>
 8006cb6:	460d      	mov	r5, r1
 8006cb8:	462e      	mov	r6, r5
 8006cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cbe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006cc2:	f017 0708 	ands.w	r7, r7, #8
 8006cc6:	d1f7      	bne.n	8006cb8 <_strtol_l.constprop.0+0x20>
 8006cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8006cca:	d132      	bne.n	8006d32 <_strtol_l.constprop.0+0x9a>
 8006ccc:	782c      	ldrb	r4, [r5, #0]
 8006cce:	2701      	movs	r7, #1
 8006cd0:	1cb5      	adds	r5, r6, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05b      	beq.n	8006d8e <_strtol_l.constprop.0+0xf6>
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d109      	bne.n	8006cee <_strtol_l.constprop.0+0x56>
 8006cda:	2c30      	cmp	r4, #48	; 0x30
 8006cdc:	d107      	bne.n	8006cee <_strtol_l.constprop.0+0x56>
 8006cde:	782c      	ldrb	r4, [r5, #0]
 8006ce0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ce4:	2c58      	cmp	r4, #88	; 0x58
 8006ce6:	d14d      	bne.n	8006d84 <_strtol_l.constprop.0+0xec>
 8006ce8:	786c      	ldrb	r4, [r5, #1]
 8006cea:	2310      	movs	r3, #16
 8006cec:	3502      	adds	r5, #2
 8006cee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006cf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cf6:	f04f 0e00 	mov.w	lr, #0
 8006cfa:	fbb8 f9f3 	udiv	r9, r8, r3
 8006cfe:	4676      	mov	r6, lr
 8006d00:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d04:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d08:	f1bc 0f09 	cmp.w	ip, #9
 8006d0c:	d816      	bhi.n	8006d3c <_strtol_l.constprop.0+0xa4>
 8006d0e:	4664      	mov	r4, ip
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	dd24      	ble.n	8006d5e <_strtol_l.constprop.0+0xc6>
 8006d14:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d18:	d008      	beq.n	8006d2c <_strtol_l.constprop.0+0x94>
 8006d1a:	45b1      	cmp	r9, r6
 8006d1c:	d31c      	bcc.n	8006d58 <_strtol_l.constprop.0+0xc0>
 8006d1e:	d101      	bne.n	8006d24 <_strtol_l.constprop.0+0x8c>
 8006d20:	45a2      	cmp	sl, r4
 8006d22:	db19      	blt.n	8006d58 <_strtol_l.constprop.0+0xc0>
 8006d24:	fb06 4603 	mla	r6, r6, r3, r4
 8006d28:	f04f 0e01 	mov.w	lr, #1
 8006d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d30:	e7e8      	b.n	8006d04 <_strtol_l.constprop.0+0x6c>
 8006d32:	2c2b      	cmp	r4, #43	; 0x2b
 8006d34:	bf04      	itt	eq
 8006d36:	782c      	ldrbeq	r4, [r5, #0]
 8006d38:	1cb5      	addeq	r5, r6, #2
 8006d3a:	e7ca      	b.n	8006cd2 <_strtol_l.constprop.0+0x3a>
 8006d3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d40:	f1bc 0f19 	cmp.w	ip, #25
 8006d44:	d801      	bhi.n	8006d4a <_strtol_l.constprop.0+0xb2>
 8006d46:	3c37      	subs	r4, #55	; 0x37
 8006d48:	e7e2      	b.n	8006d10 <_strtol_l.constprop.0+0x78>
 8006d4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006d4e:	f1bc 0f19 	cmp.w	ip, #25
 8006d52:	d804      	bhi.n	8006d5e <_strtol_l.constprop.0+0xc6>
 8006d54:	3c57      	subs	r4, #87	; 0x57
 8006d56:	e7db      	b.n	8006d10 <_strtol_l.constprop.0+0x78>
 8006d58:	f04f 3eff 	mov.w	lr, #4294967295
 8006d5c:	e7e6      	b.n	8006d2c <_strtol_l.constprop.0+0x94>
 8006d5e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d62:	d105      	bne.n	8006d70 <_strtol_l.constprop.0+0xd8>
 8006d64:	2322      	movs	r3, #34	; 0x22
 8006d66:	6003      	str	r3, [r0, #0]
 8006d68:	4646      	mov	r6, r8
 8006d6a:	b942      	cbnz	r2, 8006d7e <_strtol_l.constprop.0+0xe6>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	e79e      	b.n	8006cae <_strtol_l.constprop.0+0x16>
 8006d70:	b107      	cbz	r7, 8006d74 <_strtol_l.constprop.0+0xdc>
 8006d72:	4276      	negs	r6, r6
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	d0f9      	beq.n	8006d6c <_strtol_l.constprop.0+0xd4>
 8006d78:	f1be 0f00 	cmp.w	lr, #0
 8006d7c:	d000      	beq.n	8006d80 <_strtol_l.constprop.0+0xe8>
 8006d7e:	1e69      	subs	r1, r5, #1
 8006d80:	6011      	str	r1, [r2, #0]
 8006d82:	e7f3      	b.n	8006d6c <_strtol_l.constprop.0+0xd4>
 8006d84:	2430      	movs	r4, #48	; 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1b1      	bne.n	8006cee <_strtol_l.constprop.0+0x56>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	e7af      	b.n	8006cee <_strtol_l.constprop.0+0x56>
 8006d8e:	2c30      	cmp	r4, #48	; 0x30
 8006d90:	d0a5      	beq.n	8006cde <_strtol_l.constprop.0+0x46>
 8006d92:	230a      	movs	r3, #10
 8006d94:	e7ab      	b.n	8006cee <_strtol_l.constprop.0+0x56>
 8006d96:	bf00      	nop
 8006d98:	08007619 	.word	0x08007619

08006d9c <strtol>:
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	460a      	mov	r2, r1
 8006da0:	4601      	mov	r1, r0
 8006da2:	4802      	ldr	r0, [pc, #8]	; (8006dac <strtol+0x10>)
 8006da4:	6800      	ldr	r0, [r0, #0]
 8006da6:	f7ff bf77 	b.w	8006c98 <_strtol_l.constprop.0>
 8006daa:	bf00      	nop
 8006dac:	200000a4 	.word	0x200000a4

08006db0 <siprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b500      	push	{lr}
 8006db4:	b09c      	sub	sp, #112	; 0x70
 8006db6:	ab1d      	add	r3, sp, #116	; 0x74
 8006db8:	9002      	str	r0, [sp, #8]
 8006dba:	9006      	str	r0, [sp, #24]
 8006dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dc0:	4809      	ldr	r0, [pc, #36]	; (8006de8 <siprintf+0x38>)
 8006dc2:	9107      	str	r1, [sp, #28]
 8006dc4:	9104      	str	r1, [sp, #16]
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <siprintf+0x3c>)
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	a902      	add	r1, sp, #8
 8006dd4:	f000 f8f6 	bl	8006fc4 <_svfiprintf_r>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	b01c      	add	sp, #112	; 0x70
 8006de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de4:	b003      	add	sp, #12
 8006de6:	4770      	bx	lr
 8006de8:	200000a4 	.word	0x200000a4
 8006dec:	ffff0208 	.word	0xffff0208

08006df0 <memset>:
 8006df0:	4402      	add	r2, r0
 8006df2:	4603      	mov	r3, r0
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d100      	bne.n	8006dfa <memset+0xa>
 8006df8:	4770      	bx	lr
 8006dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfe:	e7f9      	b.n	8006df4 <memset+0x4>

08006e00 <_sbrk_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_sbrk_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fa fbee 	bl	80015ec <_sbrk>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_sbrk_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_sbrk_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000458 	.word	0x20000458

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	200000a4 	.word	0x200000a4

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4d0d      	ldr	r5, [pc, #52]	; (8006e64 <__libc_init_array+0x38>)
 8006e30:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	2600      	movs	r6, #0
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	4d0b      	ldr	r5, [pc, #44]	; (8006e6c <__libc_init_array+0x40>)
 8006e3e:	4c0c      	ldr	r4, [pc, #48]	; (8006e70 <__libc_init_array+0x44>)
 8006e40:	f000 fbae 	bl	80075a0 <_init>
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	2600      	movs	r6, #0
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	08007754 	.word	0x08007754
 8006e68:	08007754 	.word	0x08007754
 8006e6c:	08007754 	.word	0x08007754
 8006e70:	08007758 	.word	0x08007758

08006e74 <__retarget_lock_acquire_recursive>:
 8006e74:	4770      	bx	lr

08006e76 <__retarget_lock_release_recursive>:
 8006e76:	4770      	bx	lr

08006e78 <_free_r>:
 8006e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	d044      	beq.n	8006f08 <_free_r+0x90>
 8006e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e82:	9001      	str	r0, [sp, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f1a1 0404 	sub.w	r4, r1, #4
 8006e8a:	bfb8      	it	lt
 8006e8c:	18e4      	addlt	r4, r4, r3
 8006e8e:	f7ff fef7 	bl	8006c80 <__malloc_lock>
 8006e92:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <_free_r+0x94>)
 8006e94:	9801      	ldr	r0, [sp, #4]
 8006e96:	6813      	ldr	r3, [r2, #0]
 8006e98:	b933      	cbnz	r3, 8006ea8 <_free_r+0x30>
 8006e9a:	6063      	str	r3, [r4, #4]
 8006e9c:	6014      	str	r4, [r2, #0]
 8006e9e:	b003      	add	sp, #12
 8006ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ea4:	f7ff bef2 	b.w	8006c8c <__malloc_unlock>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d908      	bls.n	8006ebe <_free_r+0x46>
 8006eac:	6825      	ldr	r5, [r4, #0]
 8006eae:	1961      	adds	r1, r4, r5
 8006eb0:	428b      	cmp	r3, r1
 8006eb2:	bf01      	itttt	eq
 8006eb4:	6819      	ldreq	r1, [r3, #0]
 8006eb6:	685b      	ldreq	r3, [r3, #4]
 8006eb8:	1949      	addeq	r1, r1, r5
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	e7ed      	b.n	8006e9a <_free_r+0x22>
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	b10b      	cbz	r3, 8006ec8 <_free_r+0x50>
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	d9fa      	bls.n	8006ebe <_free_r+0x46>
 8006ec8:	6811      	ldr	r1, [r2, #0]
 8006eca:	1855      	adds	r5, r2, r1
 8006ecc:	42a5      	cmp	r5, r4
 8006ece:	d10b      	bne.n	8006ee8 <_free_r+0x70>
 8006ed0:	6824      	ldr	r4, [r4, #0]
 8006ed2:	4421      	add	r1, r4
 8006ed4:	1854      	adds	r4, r2, r1
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	d1e0      	bne.n	8006e9e <_free_r+0x26>
 8006edc:	681c      	ldr	r4, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	6053      	str	r3, [r2, #4]
 8006ee2:	440c      	add	r4, r1
 8006ee4:	6014      	str	r4, [r2, #0]
 8006ee6:	e7da      	b.n	8006e9e <_free_r+0x26>
 8006ee8:	d902      	bls.n	8006ef0 <_free_r+0x78>
 8006eea:	230c      	movs	r3, #12
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	e7d6      	b.n	8006e9e <_free_r+0x26>
 8006ef0:	6825      	ldr	r5, [r4, #0]
 8006ef2:	1961      	adds	r1, r4, r5
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	bf04      	itt	eq
 8006ef8:	6819      	ldreq	r1, [r3, #0]
 8006efa:	685b      	ldreq	r3, [r3, #4]
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	bf04      	itt	eq
 8006f00:	1949      	addeq	r1, r1, r5
 8006f02:	6021      	streq	r1, [r4, #0]
 8006f04:	6054      	str	r4, [r2, #4]
 8006f06:	e7ca      	b.n	8006e9e <_free_r+0x26>
 8006f08:	b003      	add	sp, #12
 8006f0a:	bd30      	pop	{r4, r5, pc}
 8006f0c:	20000318 	.word	0x20000318

08006f10 <__ssputs_r>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	688e      	ldr	r6, [r1, #8]
 8006f16:	461f      	mov	r7, r3
 8006f18:	42be      	cmp	r6, r7
 8006f1a:	680b      	ldr	r3, [r1, #0]
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	4690      	mov	r8, r2
 8006f22:	d82c      	bhi.n	8006f7e <__ssputs_r+0x6e>
 8006f24:	898a      	ldrh	r2, [r1, #12]
 8006f26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f2a:	d026      	beq.n	8006f7a <__ssputs_r+0x6a>
 8006f2c:	6965      	ldr	r5, [r4, #20]
 8006f2e:	6909      	ldr	r1, [r1, #16]
 8006f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f34:	eba3 0901 	sub.w	r9, r3, r1
 8006f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f3c:	1c7b      	adds	r3, r7, #1
 8006f3e:	444b      	add	r3, r9
 8006f40:	106d      	asrs	r5, r5, #1
 8006f42:	429d      	cmp	r5, r3
 8006f44:	bf38      	it	cc
 8006f46:	461d      	movcc	r5, r3
 8006f48:	0553      	lsls	r3, r2, #21
 8006f4a:	d527      	bpl.n	8006f9c <__ssputs_r+0x8c>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7ff fe17 	bl	8006b80 <_malloc_r>
 8006f52:	4606      	mov	r6, r0
 8006f54:	b360      	cbz	r0, 8006fb0 <__ssputs_r+0xa0>
 8006f56:	6921      	ldr	r1, [r4, #16]
 8006f58:	464a      	mov	r2, r9
 8006f5a:	f000 fadb 	bl	8007514 <memcpy>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	6126      	str	r6, [r4, #16]
 8006f6c:	6165      	str	r5, [r4, #20]
 8006f6e:	444e      	add	r6, r9
 8006f70:	eba5 0509 	sub.w	r5, r5, r9
 8006f74:	6026      	str	r6, [r4, #0]
 8006f76:	60a5      	str	r5, [r4, #8]
 8006f78:	463e      	mov	r6, r7
 8006f7a:	42be      	cmp	r6, r7
 8006f7c:	d900      	bls.n	8006f80 <__ssputs_r+0x70>
 8006f7e:	463e      	mov	r6, r7
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	4632      	mov	r2, r6
 8006f84:	4641      	mov	r1, r8
 8006f86:	f000 faab 	bl	80074e0 <memmove>
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	1b9b      	subs	r3, r3, r6
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	4433      	add	r3, r6
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	2000      	movs	r0, #0
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	462a      	mov	r2, r5
 8006f9e:	f000 fac7 	bl	8007530 <_realloc_r>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d1e0      	bne.n	8006f6a <__ssputs_r+0x5a>
 8006fa8:	6921      	ldr	r1, [r4, #16]
 8006faa:	4650      	mov	r0, sl
 8006fac:	f7ff ff64 	bl	8006e78 <_free_r>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	f8ca 3000 	str.w	r3, [sl]
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc2:	e7e9      	b.n	8006f98 <__ssputs_r+0x88>

08006fc4 <_svfiprintf_r>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	4698      	mov	r8, r3
 8006fca:	898b      	ldrh	r3, [r1, #12]
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	b09d      	sub	sp, #116	; 0x74
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	d50e      	bpl.n	8006ff6 <_svfiprintf_r+0x32>
 8006fd8:	690b      	ldr	r3, [r1, #16]
 8006fda:	b963      	cbnz	r3, 8006ff6 <_svfiprintf_r+0x32>
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	f7ff fdcf 	bl	8006b80 <_malloc_r>
 8006fe2:	6028      	str	r0, [r5, #0]
 8006fe4:	6128      	str	r0, [r5, #16]
 8006fe6:	b920      	cbnz	r0, 8006ff2 <_svfiprintf_r+0x2e>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	e0d0      	b.n	8007194 <_svfiprintf_r+0x1d0>
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	616b      	str	r3, [r5, #20]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffa:	2320      	movs	r3, #32
 8006ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007000:	f8cd 800c 	str.w	r8, [sp, #12]
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071ac <_svfiprintf_r+0x1e8>
 800700a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700e:	f04f 0901 	mov.w	r9, #1
 8007012:	4623      	mov	r3, r4
 8007014:	469a      	mov	sl, r3
 8007016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701a:	b10a      	cbz	r2, 8007020 <_svfiprintf_r+0x5c>
 800701c:	2a25      	cmp	r2, #37	; 0x25
 800701e:	d1f9      	bne.n	8007014 <_svfiprintf_r+0x50>
 8007020:	ebba 0b04 	subs.w	fp, sl, r4
 8007024:	d00b      	beq.n	800703e <_svfiprintf_r+0x7a>
 8007026:	465b      	mov	r3, fp
 8007028:	4622      	mov	r2, r4
 800702a:	4629      	mov	r1, r5
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff ff6f 	bl	8006f10 <__ssputs_r>
 8007032:	3001      	adds	r0, #1
 8007034:	f000 80a9 	beq.w	800718a <_svfiprintf_r+0x1c6>
 8007038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703a:	445a      	add	r2, fp
 800703c:	9209      	str	r2, [sp, #36]	; 0x24
 800703e:	f89a 3000 	ldrb.w	r3, [sl]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80a1 	beq.w	800718a <_svfiprintf_r+0x1c6>
 8007048:	2300      	movs	r3, #0
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007052:	f10a 0a01 	add.w	sl, sl, #1
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	9307      	str	r3, [sp, #28]
 800705a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705e:	931a      	str	r3, [sp, #104]	; 0x68
 8007060:	4654      	mov	r4, sl
 8007062:	2205      	movs	r2, #5
 8007064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007068:	4850      	ldr	r0, [pc, #320]	; (80071ac <_svfiprintf_r+0x1e8>)
 800706a:	f7f9 f8d9 	bl	8000220 <memchr>
 800706e:	9a04      	ldr	r2, [sp, #16]
 8007070:	b9d8      	cbnz	r0, 80070aa <_svfiprintf_r+0xe6>
 8007072:	06d0      	lsls	r0, r2, #27
 8007074:	bf44      	itt	mi
 8007076:	2320      	movmi	r3, #32
 8007078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707c:	0711      	lsls	r1, r2, #28
 800707e:	bf44      	itt	mi
 8007080:	232b      	movmi	r3, #43	; 0x2b
 8007082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007086:	f89a 3000 	ldrb.w	r3, [sl]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d015      	beq.n	80070ba <_svfiprintf_r+0xf6>
 800708e:	9a07      	ldr	r2, [sp, #28]
 8007090:	4654      	mov	r4, sl
 8007092:	2000      	movs	r0, #0
 8007094:	f04f 0c0a 	mov.w	ip, #10
 8007098:	4621      	mov	r1, r4
 800709a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709e:	3b30      	subs	r3, #48	; 0x30
 80070a0:	2b09      	cmp	r3, #9
 80070a2:	d94d      	bls.n	8007140 <_svfiprintf_r+0x17c>
 80070a4:	b1b0      	cbz	r0, 80070d4 <_svfiprintf_r+0x110>
 80070a6:	9207      	str	r2, [sp, #28]
 80070a8:	e014      	b.n	80070d4 <_svfiprintf_r+0x110>
 80070aa:	eba0 0308 	sub.w	r3, r0, r8
 80070ae:	fa09 f303 	lsl.w	r3, r9, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	46a2      	mov	sl, r4
 80070b8:	e7d2      	b.n	8007060 <_svfiprintf_r+0x9c>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	1d19      	adds	r1, r3, #4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	9103      	str	r1, [sp, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bfbb      	ittet	lt
 80070c6:	425b      	neglt	r3, r3
 80070c8:	f042 0202 	orrlt.w	r2, r2, #2
 80070cc:	9307      	strge	r3, [sp, #28]
 80070ce:	9307      	strlt	r3, [sp, #28]
 80070d0:	bfb8      	it	lt
 80070d2:	9204      	strlt	r2, [sp, #16]
 80070d4:	7823      	ldrb	r3, [r4, #0]
 80070d6:	2b2e      	cmp	r3, #46	; 0x2e
 80070d8:	d10c      	bne.n	80070f4 <_svfiprintf_r+0x130>
 80070da:	7863      	ldrb	r3, [r4, #1]
 80070dc:	2b2a      	cmp	r3, #42	; 0x2a
 80070de:	d134      	bne.n	800714a <_svfiprintf_r+0x186>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	9203      	str	r2, [sp, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfb8      	it	lt
 80070ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f0:	3402      	adds	r4, #2
 80070f2:	9305      	str	r3, [sp, #20]
 80070f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071bc <_svfiprintf_r+0x1f8>
 80070f8:	7821      	ldrb	r1, [r4, #0]
 80070fa:	2203      	movs	r2, #3
 80070fc:	4650      	mov	r0, sl
 80070fe:	f7f9 f88f 	bl	8000220 <memchr>
 8007102:	b138      	cbz	r0, 8007114 <_svfiprintf_r+0x150>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	eba0 000a 	sub.w	r0, r0, sl
 800710a:	2240      	movs	r2, #64	; 0x40
 800710c:	4082      	lsls	r2, r0
 800710e:	4313      	orrs	r3, r2
 8007110:	3401      	adds	r4, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	4825      	ldr	r0, [pc, #148]	; (80071b0 <_svfiprintf_r+0x1ec>)
 800711a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711e:	2206      	movs	r2, #6
 8007120:	f7f9 f87e 	bl	8000220 <memchr>
 8007124:	2800      	cmp	r0, #0
 8007126:	d038      	beq.n	800719a <_svfiprintf_r+0x1d6>
 8007128:	4b22      	ldr	r3, [pc, #136]	; (80071b4 <_svfiprintf_r+0x1f0>)
 800712a:	bb1b      	cbnz	r3, 8007174 <_svfiprintf_r+0x1b0>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	3307      	adds	r3, #7
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	3308      	adds	r3, #8
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713a:	4433      	add	r3, r6
 800713c:	9309      	str	r3, [sp, #36]	; 0x24
 800713e:	e768      	b.n	8007012 <_svfiprintf_r+0x4e>
 8007140:	fb0c 3202 	mla	r2, ip, r2, r3
 8007144:	460c      	mov	r4, r1
 8007146:	2001      	movs	r0, #1
 8007148:	e7a6      	b.n	8007098 <_svfiprintf_r+0xd4>
 800714a:	2300      	movs	r3, #0
 800714c:	3401      	adds	r4, #1
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	4619      	mov	r1, r3
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715c:	3a30      	subs	r2, #48	; 0x30
 800715e:	2a09      	cmp	r2, #9
 8007160:	d903      	bls.n	800716a <_svfiprintf_r+0x1a6>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0c6      	beq.n	80070f4 <_svfiprintf_r+0x130>
 8007166:	9105      	str	r1, [sp, #20]
 8007168:	e7c4      	b.n	80070f4 <_svfiprintf_r+0x130>
 800716a:	fb0c 2101 	mla	r1, ip, r1, r2
 800716e:	4604      	mov	r4, r0
 8007170:	2301      	movs	r3, #1
 8007172:	e7f0      	b.n	8007156 <_svfiprintf_r+0x192>
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	462a      	mov	r2, r5
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <_svfiprintf_r+0x1f4>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4638      	mov	r0, r7
 8007180:	f3af 8000 	nop.w
 8007184:	1c42      	adds	r2, r0, #1
 8007186:	4606      	mov	r6, r0
 8007188:	d1d6      	bne.n	8007138 <_svfiprintf_r+0x174>
 800718a:	89ab      	ldrh	r3, [r5, #12]
 800718c:	065b      	lsls	r3, r3, #25
 800718e:	f53f af2d 	bmi.w	8006fec <_svfiprintf_r+0x28>
 8007192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007194:	b01d      	add	sp, #116	; 0x74
 8007196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719a:	ab03      	add	r3, sp, #12
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	462a      	mov	r2, r5
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <_svfiprintf_r+0x1f4>)
 80071a2:	a904      	add	r1, sp, #16
 80071a4:	4638      	mov	r0, r7
 80071a6:	f000 f879 	bl	800729c <_printf_i>
 80071aa:	e7eb      	b.n	8007184 <_svfiprintf_r+0x1c0>
 80071ac:	08007719 	.word	0x08007719
 80071b0:	08007723 	.word	0x08007723
 80071b4:	00000000 	.word	0x00000000
 80071b8:	08006f11 	.word	0x08006f11
 80071bc:	0800771f 	.word	0x0800771f

080071c0 <_printf_common>:
 80071c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	4616      	mov	r6, r2
 80071c6:	4699      	mov	r9, r3
 80071c8:	688a      	ldr	r2, [r1, #8]
 80071ca:	690b      	ldr	r3, [r1, #16]
 80071cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d0:	4293      	cmp	r3, r2
 80071d2:	bfb8      	it	lt
 80071d4:	4613      	movlt	r3, r2
 80071d6:	6033      	str	r3, [r6, #0]
 80071d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071dc:	4607      	mov	r7, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	b10a      	cbz	r2, 80071e6 <_printf_common+0x26>
 80071e2:	3301      	adds	r3, #1
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	0699      	lsls	r1, r3, #26
 80071ea:	bf42      	ittt	mi
 80071ec:	6833      	ldrmi	r3, [r6, #0]
 80071ee:	3302      	addmi	r3, #2
 80071f0:	6033      	strmi	r3, [r6, #0]
 80071f2:	6825      	ldr	r5, [r4, #0]
 80071f4:	f015 0506 	ands.w	r5, r5, #6
 80071f8:	d106      	bne.n	8007208 <_printf_common+0x48>
 80071fa:	f104 0a19 	add.w	sl, r4, #25
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	6832      	ldr	r2, [r6, #0]
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	42ab      	cmp	r3, r5
 8007206:	dc26      	bgt.n	8007256 <_printf_common+0x96>
 8007208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800720c:	1e13      	subs	r3, r2, #0
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	bf18      	it	ne
 8007212:	2301      	movne	r3, #1
 8007214:	0692      	lsls	r2, r2, #26
 8007216:	d42b      	bmi.n	8007270 <_printf_common+0xb0>
 8007218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800721c:	4649      	mov	r1, r9
 800721e:	4638      	mov	r0, r7
 8007220:	47c0      	blx	r8
 8007222:	3001      	adds	r0, #1
 8007224:	d01e      	beq.n	8007264 <_printf_common+0xa4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	6922      	ldr	r2, [r4, #16]
 800722a:	f003 0306 	and.w	r3, r3, #6
 800722e:	2b04      	cmp	r3, #4
 8007230:	bf02      	ittt	eq
 8007232:	68e5      	ldreq	r5, [r4, #12]
 8007234:	6833      	ldreq	r3, [r6, #0]
 8007236:	1aed      	subeq	r5, r5, r3
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	bf0c      	ite	eq
 800723c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007240:	2500      	movne	r5, #0
 8007242:	4293      	cmp	r3, r2
 8007244:	bfc4      	itt	gt
 8007246:	1a9b      	subgt	r3, r3, r2
 8007248:	18ed      	addgt	r5, r5, r3
 800724a:	2600      	movs	r6, #0
 800724c:	341a      	adds	r4, #26
 800724e:	42b5      	cmp	r5, r6
 8007250:	d11a      	bne.n	8007288 <_printf_common+0xc8>
 8007252:	2000      	movs	r0, #0
 8007254:	e008      	b.n	8007268 <_printf_common+0xa8>
 8007256:	2301      	movs	r3, #1
 8007258:	4652      	mov	r2, sl
 800725a:	4649      	mov	r1, r9
 800725c:	4638      	mov	r0, r7
 800725e:	47c0      	blx	r8
 8007260:	3001      	adds	r0, #1
 8007262:	d103      	bne.n	800726c <_printf_common+0xac>
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	3501      	adds	r5, #1
 800726e:	e7c6      	b.n	80071fe <_printf_common+0x3e>
 8007270:	18e1      	adds	r1, r4, r3
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	2030      	movs	r0, #48	; 0x30
 8007276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800727a:	4422      	add	r2, r4
 800727c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007284:	3302      	adds	r3, #2
 8007286:	e7c7      	b.n	8007218 <_printf_common+0x58>
 8007288:	2301      	movs	r3, #1
 800728a:	4622      	mov	r2, r4
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d0e6      	beq.n	8007264 <_printf_common+0xa4>
 8007296:	3601      	adds	r6, #1
 8007298:	e7d9      	b.n	800724e <_printf_common+0x8e>
	...

0800729c <_printf_i>:
 800729c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	7e0f      	ldrb	r7, [r1, #24]
 80072a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072a4:	2f78      	cmp	r7, #120	; 0x78
 80072a6:	4691      	mov	r9, r2
 80072a8:	4680      	mov	r8, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	469a      	mov	sl, r3
 80072ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072b2:	d807      	bhi.n	80072c4 <_printf_i+0x28>
 80072b4:	2f62      	cmp	r7, #98	; 0x62
 80072b6:	d80a      	bhi.n	80072ce <_printf_i+0x32>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	f000 80d4 	beq.w	8007466 <_printf_i+0x1ca>
 80072be:	2f58      	cmp	r7, #88	; 0x58
 80072c0:	f000 80c0 	beq.w	8007444 <_printf_i+0x1a8>
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072cc:	e03a      	b.n	8007344 <_printf_i+0xa8>
 80072ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072d2:	2b15      	cmp	r3, #21
 80072d4:	d8f6      	bhi.n	80072c4 <_printf_i+0x28>
 80072d6:	a101      	add	r1, pc, #4	; (adr r1, 80072dc <_printf_i+0x40>)
 80072d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007349 	.word	0x08007349
 80072e4:	080072c5 	.word	0x080072c5
 80072e8:	080072c5 	.word	0x080072c5
 80072ec:	080072c5 	.word	0x080072c5
 80072f0:	080072c5 	.word	0x080072c5
 80072f4:	08007349 	.word	0x08007349
 80072f8:	080072c5 	.word	0x080072c5
 80072fc:	080072c5 	.word	0x080072c5
 8007300:	080072c5 	.word	0x080072c5
 8007304:	080072c5 	.word	0x080072c5
 8007308:	0800744d 	.word	0x0800744d
 800730c:	08007375 	.word	0x08007375
 8007310:	08007407 	.word	0x08007407
 8007314:	080072c5 	.word	0x080072c5
 8007318:	080072c5 	.word	0x080072c5
 800731c:	0800746f 	.word	0x0800746f
 8007320:	080072c5 	.word	0x080072c5
 8007324:	08007375 	.word	0x08007375
 8007328:	080072c5 	.word	0x080072c5
 800732c:	080072c5 	.word	0x080072c5
 8007330:	0800740f 	.word	0x0800740f
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	602a      	str	r2, [r5, #0]
 800733c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007344:	2301      	movs	r3, #1
 8007346:	e09f      	b.n	8007488 <_printf_i+0x1ec>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	0607      	lsls	r7, r0, #24
 800734e:	f103 0104 	add.w	r1, r3, #4
 8007352:	6029      	str	r1, [r5, #0]
 8007354:	d501      	bpl.n	800735a <_printf_i+0xbe>
 8007356:	681e      	ldr	r6, [r3, #0]
 8007358:	e003      	b.n	8007362 <_printf_i+0xc6>
 800735a:	0646      	lsls	r6, r0, #25
 800735c:	d5fb      	bpl.n	8007356 <_printf_i+0xba>
 800735e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007362:	2e00      	cmp	r6, #0
 8007364:	da03      	bge.n	800736e <_printf_i+0xd2>
 8007366:	232d      	movs	r3, #45	; 0x2d
 8007368:	4276      	negs	r6, r6
 800736a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800736e:	485a      	ldr	r0, [pc, #360]	; (80074d8 <_printf_i+0x23c>)
 8007370:	230a      	movs	r3, #10
 8007372:	e012      	b.n	800739a <_printf_i+0xfe>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	1d19      	adds	r1, r3, #4
 800737a:	6029      	str	r1, [r5, #0]
 800737c:	0605      	lsls	r5, r0, #24
 800737e:	d501      	bpl.n	8007384 <_printf_i+0xe8>
 8007380:	681e      	ldr	r6, [r3, #0]
 8007382:	e002      	b.n	800738a <_printf_i+0xee>
 8007384:	0641      	lsls	r1, r0, #25
 8007386:	d5fb      	bpl.n	8007380 <_printf_i+0xe4>
 8007388:	881e      	ldrh	r6, [r3, #0]
 800738a:	4853      	ldr	r0, [pc, #332]	; (80074d8 <_printf_i+0x23c>)
 800738c:	2f6f      	cmp	r7, #111	; 0x6f
 800738e:	bf0c      	ite	eq
 8007390:	2308      	moveq	r3, #8
 8007392:	230a      	movne	r3, #10
 8007394:	2100      	movs	r1, #0
 8007396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800739a:	6865      	ldr	r5, [r4, #4]
 800739c:	60a5      	str	r5, [r4, #8]
 800739e:	2d00      	cmp	r5, #0
 80073a0:	bfa2      	ittt	ge
 80073a2:	6821      	ldrge	r1, [r4, #0]
 80073a4:	f021 0104 	bicge.w	r1, r1, #4
 80073a8:	6021      	strge	r1, [r4, #0]
 80073aa:	b90e      	cbnz	r6, 80073b0 <_printf_i+0x114>
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	d04b      	beq.n	8007448 <_printf_i+0x1ac>
 80073b0:	4615      	mov	r5, r2
 80073b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80073b6:	fb03 6711 	mls	r7, r3, r1, r6
 80073ba:	5dc7      	ldrb	r7, [r0, r7]
 80073bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073c0:	4637      	mov	r7, r6
 80073c2:	42bb      	cmp	r3, r7
 80073c4:	460e      	mov	r6, r1
 80073c6:	d9f4      	bls.n	80073b2 <_printf_i+0x116>
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d10b      	bne.n	80073e4 <_printf_i+0x148>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	07de      	lsls	r6, r3, #31
 80073d0:	d508      	bpl.n	80073e4 <_printf_i+0x148>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	6861      	ldr	r1, [r4, #4]
 80073d6:	4299      	cmp	r1, r3
 80073d8:	bfde      	ittt	le
 80073da:	2330      	movle	r3, #48	; 0x30
 80073dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073e4:	1b52      	subs	r2, r2, r5
 80073e6:	6122      	str	r2, [r4, #16]
 80073e8:	f8cd a000 	str.w	sl, [sp]
 80073ec:	464b      	mov	r3, r9
 80073ee:	aa03      	add	r2, sp, #12
 80073f0:	4621      	mov	r1, r4
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff fee4 	bl	80071c0 <_printf_common>
 80073f8:	3001      	adds	r0, #1
 80073fa:	d14a      	bne.n	8007492 <_printf_i+0x1f6>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b004      	add	sp, #16
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f043 0320 	orr.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	4833      	ldr	r0, [pc, #204]	; (80074dc <_printf_i+0x240>)
 8007410:	2778      	movs	r7, #120	; 0x78
 8007412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6829      	ldr	r1, [r5, #0]
 800741a:	061f      	lsls	r7, r3, #24
 800741c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007420:	d402      	bmi.n	8007428 <_printf_i+0x18c>
 8007422:	065f      	lsls	r7, r3, #25
 8007424:	bf48      	it	mi
 8007426:	b2b6      	uxthmi	r6, r6
 8007428:	07df      	lsls	r7, r3, #31
 800742a:	bf48      	it	mi
 800742c:	f043 0320 	orrmi.w	r3, r3, #32
 8007430:	6029      	str	r1, [r5, #0]
 8007432:	bf48      	it	mi
 8007434:	6023      	strmi	r3, [r4, #0]
 8007436:	b91e      	cbnz	r6, 8007440 <_printf_i+0x1a4>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	f023 0320 	bic.w	r3, r3, #32
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	2310      	movs	r3, #16
 8007442:	e7a7      	b.n	8007394 <_printf_i+0xf8>
 8007444:	4824      	ldr	r0, [pc, #144]	; (80074d8 <_printf_i+0x23c>)
 8007446:	e7e4      	b.n	8007412 <_printf_i+0x176>
 8007448:	4615      	mov	r5, r2
 800744a:	e7bd      	b.n	80073c8 <_printf_i+0x12c>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	6826      	ldr	r6, [r4, #0]
 8007450:	6961      	ldr	r1, [r4, #20]
 8007452:	1d18      	adds	r0, r3, #4
 8007454:	6028      	str	r0, [r5, #0]
 8007456:	0635      	lsls	r5, r6, #24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	d501      	bpl.n	8007460 <_printf_i+0x1c4>
 800745c:	6019      	str	r1, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0x1ca>
 8007460:	0670      	lsls	r0, r6, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0x1c0>
 8007464:	8019      	strh	r1, [r3, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	4615      	mov	r5, r2
 800746c:	e7bc      	b.n	80073e8 <_printf_i+0x14c>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	602a      	str	r2, [r5, #0]
 8007474:	681d      	ldr	r5, [r3, #0]
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	2100      	movs	r1, #0
 800747a:	4628      	mov	r0, r5
 800747c:	f7f8 fed0 	bl	8000220 <memchr>
 8007480:	b108      	cbz	r0, 8007486 <_printf_i+0x1ea>
 8007482:	1b40      	subs	r0, r0, r5
 8007484:	6060      	str	r0, [r4, #4]
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	2300      	movs	r3, #0
 800748c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007490:	e7aa      	b.n	80073e8 <_printf_i+0x14c>
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	462a      	mov	r2, r5
 8007496:	4649      	mov	r1, r9
 8007498:	4640      	mov	r0, r8
 800749a:	47d0      	blx	sl
 800749c:	3001      	adds	r0, #1
 800749e:	d0ad      	beq.n	80073fc <_printf_i+0x160>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	d413      	bmi.n	80074ce <_printf_i+0x232>
 80074a6:	68e0      	ldr	r0, [r4, #12]
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	4298      	cmp	r0, r3
 80074ac:	bfb8      	it	lt
 80074ae:	4618      	movlt	r0, r3
 80074b0:	e7a6      	b.n	8007400 <_printf_i+0x164>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4632      	mov	r2, r6
 80074b6:	4649      	mov	r1, r9
 80074b8:	4640      	mov	r0, r8
 80074ba:	47d0      	blx	sl
 80074bc:	3001      	adds	r0, #1
 80074be:	d09d      	beq.n	80073fc <_printf_i+0x160>
 80074c0:	3501      	adds	r5, #1
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	9903      	ldr	r1, [sp, #12]
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dcf2      	bgt.n	80074b2 <_printf_i+0x216>
 80074cc:	e7eb      	b.n	80074a6 <_printf_i+0x20a>
 80074ce:	2500      	movs	r5, #0
 80074d0:	f104 0619 	add.w	r6, r4, #25
 80074d4:	e7f5      	b.n	80074c2 <_printf_i+0x226>
 80074d6:	bf00      	nop
 80074d8:	0800772a 	.word	0x0800772a
 80074dc:	0800773b 	.word	0x0800773b

080074e0 <memmove>:
 80074e0:	4288      	cmp	r0, r1
 80074e2:	b510      	push	{r4, lr}
 80074e4:	eb01 0402 	add.w	r4, r1, r2
 80074e8:	d902      	bls.n	80074f0 <memmove+0x10>
 80074ea:	4284      	cmp	r4, r0
 80074ec:	4623      	mov	r3, r4
 80074ee:	d807      	bhi.n	8007500 <memmove+0x20>
 80074f0:	1e43      	subs	r3, r0, #1
 80074f2:	42a1      	cmp	r1, r4
 80074f4:	d008      	beq.n	8007508 <memmove+0x28>
 80074f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074fe:	e7f8      	b.n	80074f2 <memmove+0x12>
 8007500:	4402      	add	r2, r0
 8007502:	4601      	mov	r1, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	d100      	bne.n	800750a <memmove+0x2a>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007512:	e7f7      	b.n	8007504 <memmove+0x24>

08007514 <memcpy>:
 8007514:	440a      	add	r2, r1
 8007516:	4291      	cmp	r1, r2
 8007518:	f100 33ff 	add.w	r3, r0, #4294967295
 800751c:	d100      	bne.n	8007520 <memcpy+0xc>
 800751e:	4770      	bx	lr
 8007520:	b510      	push	{r4, lr}
 8007522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752a:	4291      	cmp	r1, r2
 800752c:	d1f9      	bne.n	8007522 <memcpy+0xe>
 800752e:	bd10      	pop	{r4, pc}

08007530 <_realloc_r>:
 8007530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	4680      	mov	r8, r0
 8007536:	4614      	mov	r4, r2
 8007538:	460e      	mov	r6, r1
 800753a:	b921      	cbnz	r1, 8007546 <_realloc_r+0x16>
 800753c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007540:	4611      	mov	r1, r2
 8007542:	f7ff bb1d 	b.w	8006b80 <_malloc_r>
 8007546:	b92a      	cbnz	r2, 8007554 <_realloc_r+0x24>
 8007548:	f7ff fc96 	bl	8006e78 <_free_r>
 800754c:	4625      	mov	r5, r4
 800754e:	4628      	mov	r0, r5
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	f000 f81b 	bl	800758e <_malloc_usable_size_r>
 8007558:	4284      	cmp	r4, r0
 800755a:	4607      	mov	r7, r0
 800755c:	d802      	bhi.n	8007564 <_realloc_r+0x34>
 800755e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007562:	d812      	bhi.n	800758a <_realloc_r+0x5a>
 8007564:	4621      	mov	r1, r4
 8007566:	4640      	mov	r0, r8
 8007568:	f7ff fb0a 	bl	8006b80 <_malloc_r>
 800756c:	4605      	mov	r5, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	d0ed      	beq.n	800754e <_realloc_r+0x1e>
 8007572:	42bc      	cmp	r4, r7
 8007574:	4622      	mov	r2, r4
 8007576:	4631      	mov	r1, r6
 8007578:	bf28      	it	cs
 800757a:	463a      	movcs	r2, r7
 800757c:	f7ff ffca 	bl	8007514 <memcpy>
 8007580:	4631      	mov	r1, r6
 8007582:	4640      	mov	r0, r8
 8007584:	f7ff fc78 	bl	8006e78 <_free_r>
 8007588:	e7e1      	b.n	800754e <_realloc_r+0x1e>
 800758a:	4635      	mov	r5, r6
 800758c:	e7df      	b.n	800754e <_realloc_r+0x1e>

0800758e <_malloc_usable_size_r>:
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	1f18      	subs	r0, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfbc      	itt	lt
 8007598:	580b      	ldrlt	r3, [r1, r0]
 800759a:	18c0      	addlt	r0, r0, r3
 800759c:	4770      	bx	lr
	...

080075a0 <_init>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr

080075ac <_fini>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr
