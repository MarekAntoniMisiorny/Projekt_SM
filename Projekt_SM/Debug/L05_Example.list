
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a154  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800a328  0800a328  0001a328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200000b4  0800a7a4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800a7a4  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198db  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd3  00000000  00000000  00039a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f27  00000000  00000000  0003ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0a7  00000000  00000000  0003faf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d508  00000000  00000000  00069b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5b6e  00000000  00000000  000870a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000615c  00000000  00000000  0017cc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00182d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a30c 	.word	0x0800a30c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800a30c 	.word	0x0800a30c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f107 020f 	add.w	r2, r7, #15
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f002 f91f 	bl	800311c <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	b299      	uxth	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f107 020f 	add.w	r2, r7, #15
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f002 f910 	bl	800311c <HAL_I2C_Master_Transmit>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	f002 f9ef 	bl	8003304 <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	7b7a      	ldrb	r2, [r7, #13]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000f58 <BH1750_ReadIlluminance_lux+0x54>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	ee07 3a90 	vmov	s15, r3
}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	3f99999a 	.word	0x3f99999a

08000f5c <Bulb_State>:
#include <stdbool.h>
#include "stm32f7xx_hal.h"
#include "bulb.h"

void Bulb_State(bool state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, state);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <Bulb_State+0x20>)
 8000f6e:	f002 f82b 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020800 	.word	0x40020800

08000f80 <delay_us>:

#include <stdio.h>
#include "tim.h"

void delay_us(uint16_t us)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
uint16_t cnt =0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	81fb      	strh	r3, [r7, #14]
//  __HAL_TIM_SET_COUNTER(&htim1,0); //set counter value to 0
//  int timer_check =  __HAL_TIM_GET_COUNTER(&htim1);
//  while(__HAL_TIM_GET_COUNTER(&htim1) < us); //wait for counter to reach the us input in the parameter

  __HAL_TIM_SET_COUNTER(&htim1,0); //set counter value to 0
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <delay_us+0x4c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  while( cnt<us)
 8000f96:	e00d      	b.n	8000fb4 <delay_us+0x34>
  {
  if(__HAL_TIM_GET_COUNTER(&htim1) >=999 ){__HAL_TIM_SET_COUNTER(&htim1,0); cnt=cnt+1; };
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <delay_us+0x4c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d906      	bls.n	8000fb4 <delay_us+0x34>
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <delay_us+0x4c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	81fb      	strh	r3, [r7, #14]
  while( cnt<us)
 8000fb4:	89fa      	ldrh	r2, [r7, #14]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3ed      	bcc.n	8000f98 <delay_us+0x18>
};
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000180 	.word	0x20000180

08000fd0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000fde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000fe2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000fe6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000fea:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fee:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ff0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ff2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f80e 	bl	8001026 <Lcd_init>

	return lcd;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	461d      	mov	r5, r3
 800100e:	f107 0410 	add.w	r4, r7, #16
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bdb0      	pop	{r4, r5, r7, pc}

08001026 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7d9b      	ldrb	r3, [r3, #22]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001036:	2133      	movs	r1, #51	; 0x33
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f857 	bl	80010ec <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800103e:	2132      	movs	r1, #50	; 0x32
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f853 	bl	80010ec <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001046:	2128      	movs	r1, #40	; 0x28
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f84f 	bl	80010ec <lcd_write_command>
 800104e:	e003      	b.n	8001058 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001050:	2138      	movs	r1, #56	; 0x38
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f84a 	bl	80010ec <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001058:	2101      	movs	r1, #1
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f846 	bl	80010ec <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001060:	210c      	movs	r1, #12
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f842 	bl	80010ec <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001068:	2106      	movs	r1, #6
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f83e 	bl	80010ec <lcd_write_command>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e00a      	b.n	800109e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f858 	bl	8001148 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3301      	adds	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	7bfc      	ldrb	r4, [r7, #15]
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff f8b5 	bl	8000210 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	429c      	cmp	r4, r3
 80010aa:	d3ed      	bcc.n	8001088 <Lcd_string+0x10>
	}
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
	...

080010b8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
 80010c4:	4613      	mov	r3, r2
 80010c6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <Lcd_cursor+0x30>)
 80010cc:	5cd2      	ldrb	r2, [r2, r3]
 80010ce:	78bb      	ldrb	r3, [r7, #2]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3b80      	subs	r3, #128	; 0x80
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f806 	bl	80010ec <lcd_write_command>
	#endif
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	0800a36c 	.word	0x0800a36c

080010ec <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	899b      	ldrh	r3, [r3, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	f001 ff60 	bl	8002fc8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7d9b      	ldrb	r3, [r3, #22]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2204      	movs	r2, #4
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f842 	bl	80011a4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2204      	movs	r2, #4
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f839 	bl	80011a4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001132:	e005      	b.n	8001140 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2208      	movs	r2, #8
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f832 	bl	80011a4 <lcd_write>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6898      	ldr	r0, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	899b      	ldrh	r3, [r3, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	4619      	mov	r1, r3
 8001160:	f001 ff32 	bl	8002fc8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7d9b      	ldrb	r3, [r3, #22]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2204      	movs	r2, #4
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f814 	bl	80011a4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2204      	movs	r2, #4
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f80b 	bl	80011a4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800118e:	e005      	b.n	800119c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2208      	movs	r2, #8
 8001194:	4619      	mov	r1, r3
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f804 	bl	80011a4 <lcd_write>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
 80011b0:	4613      	mov	r3, r2
 80011b2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e019      	b.n	80011ee <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	8819      	ldrh	r1, [r3, #0]
 80011d2:	78fa      	ldrb	r2, [r7, #3]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	fa42 f303 	asr.w	r3, r2, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	f001 fef0 	bl	8002fc8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3301      	adds	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3e1      	bcc.n	80011ba <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6918      	ldr	r0, [r3, #16]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	8a9b      	ldrh	r3, [r3, #20]
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	f001 fee1 	bl	8002fc8 <HAL_GPIO_WritePin>
	DELAY(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f001 fb6a 	bl	80028e0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6918      	ldr	r0, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8a9b      	ldrh	r3, [r3, #20]
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	f001 fed6 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (hled->Output.Duty) : (100.0f - hled->Output.Duty);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7b1b      	ldrb	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <LED_PWM_Init+0x18>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a02 	vldr	s15, [r3, #8]
 800123a:	e006      	b.n	800124a <LED_PWM_Init+0x26>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001242:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001260 <LED_PWM_Init+0x3c>
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hled->Output));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f9e4 	bl	8001620 <PWM_Init>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	42c80000 	.word	0x42c80000

08001264 <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	ed87 0a00 	vstr	s0, [r7]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (duty) : (100.0f - duty);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7b1b      	ldrb	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d006      	beq.n	8001286 <LED_PWM_WriteDuty+0x22>
 8001278:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80012ac <LED_PWM_WriteDuty+0x48>
 800127c:	edd7 7a00 	vldr	s15, [r7]
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	e001      	b.n	800128a <LED_PWM_WriteDuty+0x26>
 8001286:	edd7 7a00 	vldr	s15, [r7]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hled->Output), hled->Output.Duty);
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a02 	vldr	s15, [r3, #8]
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	4610      	mov	r0, r2
 800129e:	f000 f9d7 	bl	8001650 <PWM_WriteDuty>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	42c80000 	.word	0x42c80000

080012b0 <Light_Boundries>:
#include "delay_us.h"
#include "bh1750_config.h"
#include <stdio.h>
#include <stdlib.h>
int* Light_Boundries()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0
  int size = 4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	623b      	str	r3, [r7, #32]
  int size_temp = 10;
 80012ba:	230a      	movs	r3, #10
 80012bc:	61fb      	str	r3, [r7, #28]
  int* Boundries = (int*) malloc(sizeof(*Boundries) * size);
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 fa7e 	bl	80077c4 <malloc>
 80012c8:	4603      	mov	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
  int Boundries_temp = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  float H_Boundry_with_Bulb;
  float L_Boundry_With_Bulb;
  float H_Boundry_No_Bulb;
  float L_Boundry_No_Bulb;
  unsigned int illuminance_int = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

    Bulb_State(1); //Light Bulb
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fe41 	bl	8000f5c <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99);
 80012da:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80014bc <Light_Boundries+0x20c>
 80012de:	4878      	ldr	r0, [pc, #480]	; (80014c0 <Light_Boundries+0x210>)
 80012e0:	f7ff ffc0 	bl	8001264 <LED_PWM_WriteDuty>
    delay_us(2000);
 80012e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e8:	f7ff fe4a 	bl	8000f80 <delay_us>

    for (int i = 0; i < 10;i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
 80012f0:	e01e      	b.n	8001330 <Light_Boundries+0x80>
    {
      LED_PWM_WriteDuty(&hld1, 99);
 80012f2:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80014bc <Light_Boundries+0x20c>
 80012f6:	4872      	ldr	r0, [pc, #456]	; (80014c0 <Light_Boundries+0x210>)
 80012f8:	f7ff ffb4 	bl	8001264 <LED_PWM_WriteDuty>
      H_Boundry_with_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 80012fc:	4871      	ldr	r0, [pc, #452]	; (80014c4 <Light_Boundries+0x214>)
 80012fe:	f7ff fe01 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
      illuminance_int =  (unsigned int)(H_Boundry_with_Bulb * 1000.0f);
 8001306:	edd7 7a01 	vldr	s15, [r7, #4]
 800130a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80014c8 <Light_Boundries+0x218>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	617b      	str	r3, [r7, #20]
      Boundries_temp = Boundries_temp + illuminance_int;
 800131c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
      delay_us(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f7ff fe2b 	bl	8000f80 <delay_us>
    for (int i = 0; i < 10;i++)
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	3301      	adds	r3, #1
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001332:	2b09      	cmp	r3, #9
 8001334:	dddd      	ble.n	80012f2 <Light_Boundries+0x42>
    }
    Boundries_temp = Boundries_temp / 10;
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	4a64      	ldr	r2, [pc, #400]	; (80014cc <Light_Boundries+0x21c>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1092      	asrs	r2, r2, #2
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    Boundries[0] =   Boundries_temp;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800134a:	601a      	str	r2, [r3, #0]
    Boundries_temp = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
    LED_PWM_WriteDuty(&hld1, 0);
 8001350:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80014d0 <Light_Boundries+0x220>
 8001354:	485a      	ldr	r0, [pc, #360]	; (80014c0 <Light_Boundries+0x210>)
 8001356:	f7ff ff85 	bl	8001264 <LED_PWM_WriteDuty>
    delay_us(2000);
 800135a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800135e:	f7ff fe0f 	bl	8000f80 <delay_us>


    for (int i = 0; i < 10;i++)
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e019      	b.n	800139c <Light_Boundries+0xec>
        {

      L_Boundry_With_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 8001368:	4856      	ldr	r0, [pc, #344]	; (80014c4 <Light_Boundries+0x214>)
 800136a:	f7ff fdcb 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 800136e:	ed87 0a02 	vstr	s0, [r7, #8]
          illuminance_int =  (unsigned int)(L_Boundry_With_Bulb * 1000.0f);
 8001372:	edd7 7a02 	vldr	s15, [r7, #8]
 8001376:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80014c8 <Light_Boundries+0x218>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	617b      	str	r3, [r7, #20]
          Boundries_temp = Boundries_temp + illuminance_int;
 8001388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4413      	add	r3, r2
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
          delay_us(200);
 8001390:	20c8      	movs	r0, #200	; 0xc8
 8001392:	f7ff fdf5 	bl	8000f80 <delay_us>
    for (int i = 0; i < 10;i++)
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	3301      	adds	r3, #1
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	2b09      	cmp	r3, #9
 80013a0:	dde2      	ble.n	8001368 <Light_Boundries+0xb8>
        }
        Boundries_temp = Boundries_temp / 10;
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	4a49      	ldr	r2, [pc, #292]	; (80014cc <Light_Boundries+0x21c>)
 80013a6:	fb82 1203 	smull	r1, r2, r2, r3
 80013aa:	1092      	asrs	r2, r2, #2
 80013ac:	17db      	asrs	r3, r3, #31
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
        Boundries[1] =   Boundries_temp;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3304      	adds	r3, #4
 80013b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013b8:	601a      	str	r2, [r3, #0]
        Boundries_temp = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
    Bulb_State(0); //OFF Bulb
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fdcc 	bl	8000f5c <Bulb_State>
    delay_us(2000);
 80013c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c8:	f7ff fdda 	bl	8000f80 <delay_us>

    LED_PWM_WriteDuty(&hld1, 99); //Light LED
 80013cc:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80014bc <Light_Boundries+0x20c>
 80013d0:	483b      	ldr	r0, [pc, #236]	; (80014c0 <Light_Boundries+0x210>)
 80013d2:	f7ff ff47 	bl	8001264 <LED_PWM_WriteDuty>
    delay_us(2000);
 80013d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013da:	f7ff fdd1 	bl	8000f80 <delay_us>

    for (int i = 0; i < 10;i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e2:	e01e      	b.n	8001422 <Light_Boundries+0x172>
            {
      LED_PWM_WriteDuty(&hld1, 99);
 80013e4:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80014bc <Light_Boundries+0x20c>
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <Light_Boundries+0x210>)
 80013ea:	f7ff ff3b 	bl	8001264 <LED_PWM_WriteDuty>
              H_Boundry_No_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <Light_Boundries+0x214>)
 80013f0:	f7ff fd88 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 80013f4:	ed87 0a03 	vstr	s0, [r7, #12]
              illuminance_int =  (unsigned int)(H_Boundry_No_Bulb * 1000.0f);
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80014c8 <Light_Boundries+0x218>
 8001400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	617b      	str	r3, [r7, #20]
              Boundries_temp = Boundries_temp + illuminance_int;
 800140e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
              delay_us(200);
 8001416:	20c8      	movs	r0, #200	; 0xc8
 8001418:	f7ff fdb2 	bl	8000f80 <delay_us>
    for (int i = 0; i < 10;i++)
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	3301      	adds	r3, #1
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	2b09      	cmp	r3, #9
 8001426:	dddd      	ble.n	80013e4 <Light_Boundries+0x134>
            }
            Boundries_temp = Boundries_temp / 10;
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	4a28      	ldr	r2, [pc, #160]	; (80014cc <Light_Boundries+0x21c>)
 800142c:	fb82 1203 	smull	r1, r2, r2, r3
 8001430:	1092      	asrs	r2, r2, #2
 8001432:	17db      	asrs	r3, r3, #31
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
            Boundries[2] =   Boundries_temp;
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3308      	adds	r3, #8
 800143c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800143e:	601a      	str	r2, [r3, #0]
            Boundries_temp = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    LED_PWM_WriteDuty(&hld1, 0); //OFF LED
 8001444:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80014d0 <Light_Boundries+0x220>
 8001448:	481d      	ldr	r0, [pc, #116]	; (80014c0 <Light_Boundries+0x210>)
 800144a:	f7ff ff0b 	bl	8001264 <LED_PWM_WriteDuty>
    delay_us(2000);
 800144e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001452:	f7ff fd95 	bl	8000f80 <delay_us>

    for (int i = 0; i < 10;i++)
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	e019      	b.n	8001490 <Light_Boundries+0x1e0>
                {

                  L_Boundry_No_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <Light_Boundries+0x214>)
 800145e:	f7ff fd51 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001462:	ed87 0a04 	vstr	s0, [r7, #16]
                  illuminance_int =  (unsigned int)(L_Boundry_No_Bulb * 1000.0f);
 8001466:	edd7 7a04 	vldr	s15, [r7, #16]
 800146a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80014c8 <Light_Boundries+0x218>
 800146e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 3a90 	vmov	r3, s15
 800147a:	617b      	str	r3, [r7, #20]
                  Boundries_temp = Boundries_temp + illuminance_int;
 800147c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
                  delay_us(200);
 8001484:	20c8      	movs	r0, #200	; 0xc8
 8001486:	f7ff fd7b 	bl	8000f80 <delay_us>
    for (int i = 0; i < 10;i++)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	2b09      	cmp	r3, #9
 8001494:	dde2      	ble.n	800145c <Light_Boundries+0x1ac>
                }
                Boundries_temp = Boundries_temp / 10;
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <Light_Boundries+0x21c>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1092      	asrs	r2, r2, #2
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
                Boundries[3] =   Boundries_temp;
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	330c      	adds	r3, #12
 80014aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ac:	601a      	str	r2, [r3, #0]
                Boundries_temp = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
//  Bulb_State(0); //OFF Bulb
//  delay_us(1000);
//  Bulb_State(1); //OFF Bulb
//  delay_us(1000);
//  Bulb_State(0); //OFF Bulb
  return Boundries;
 80014b2:	69bb      	ldr	r3, [r7, #24]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	42c60000 	.word	0x42c60000
 80014c0:	20000010 	.word	0x20000010
 80014c4:	20000000 	.word	0x20000000
 80014c8:	447a0000 	.word	0x447a0000
 80014cc:	66666667 	.word	0x66666667
 80014d0:	00000000 	.word	0x00000000

080014d4 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}
 
float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80014e0:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 80014e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a04 	vldr	s15, [r3, #16]
 8001506:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800150a:	edd7 7a06 	vldr	s15, [r7, #24]
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edd3 7a03 	vldr	s15, [r3, #12]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001532:	edd7 6a06 	vldr	s13, [r7, #24]
 8001536:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	edd3 6a03 	vldr	s13, [r3, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edd3 7a04 	vldr	s15, [r3, #16]
 800154a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001552:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edd3 7a07 	vldr	s15, [r3, #28]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	edd7 7a06 	vldr	s15, [r7, #24]
 800157a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 7a06 	vldr	s15, [r3, #24]
 8001584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	edd3 7a07 	vldr	s15, [r3, #28]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	edd3 7a08 	vldr	s15, [r3, #32]
 800159c:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	dd03      	ble.n	80015b2 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	e00f      	b.n	80015d2 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d503      	bpl.n	80015ce <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e001      	b.n	80015d2 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 80015d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80015d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015da:	eeb4 7a67 	vcmp.f32	s14, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d013      	beq.n	800160c <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80015f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	ee07 3a90 	vmov	s15, r3
}
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	3724      	adds	r7, #36	; 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 7a02 	vldr	s15, [r3, #8]
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f80c 	bl	8001650 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f003 fd14 	bl	8005070 <HAL_TIM_PWM_Start>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800165c:	edd7 7a00 	vldr	s15, [r7]
 8001660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d503      	bpl.n	8001672 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	e00a      	b.n	8001688 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8001672:	edd7 7a00 	vldr	s15, [r7]
 8001676:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001734 <PWM_WriteDuty+0xe4>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd01      	ble.n	8001688 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <PWM_WriteDuty+0xe8>)
 8001686:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	3301      	adds	r3, #1
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a0:	edd7 7a00 	vldr	s15, [r7]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001734 <PWM_WriteDuty+0xe4>
 80016ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b4:	ee17 3a90 	vmov	r3, s15
 80016b8:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <PWM_WriteDuty+0x7e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016cc:	e02c      	b.n	8001728 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d105      	bne.n	80016e2 <PWM_WriteDuty+0x92>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016e0:	e022      	b.n	8001728 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d105      	bne.n	80016f6 <PWM_WriteDuty+0xa6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80016f4:	e018      	b.n	8001728 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d105      	bne.n	800170a <PWM_WriteDuty+0xba>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001708:	e00e      	b.n	8001728 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d105      	bne.n	800171e <PWM_WriteDuty+0xce>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800171c:	e004      	b.n	8001728 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	42c80000 	.word	0x42c80000
 8001738:	42c80000 	.word	0x42c80000

0800173c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001752:	4baf      	ldr	r3, [pc, #700]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4aae      	ldr	r2, [pc, #696]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001758:	f043 0310 	orr.w	r3, r3, #16
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4bac      	ldr	r3, [pc, #688]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	4ba9      	ldr	r3, [pc, #676]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4aa8      	ldr	r2, [pc, #672]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4ba6      	ldr	r3, [pc, #664]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001782:	4ba3      	ldr	r3, [pc, #652]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4aa2      	ldr	r2, [pc, #648]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4ba0      	ldr	r3, [pc, #640]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	4b9d      	ldr	r3, [pc, #628]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a9c      	ldr	r2, [pc, #624]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b9a      	ldr	r3, [pc, #616]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b97      	ldr	r3, [pc, #604]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a96      	ldr	r2, [pc, #600]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b94      	ldr	r3, [pc, #592]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b91      	ldr	r3, [pc, #580]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a90      	ldr	r2, [pc, #576]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a8a      	ldr	r2, [pc, #552]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fa:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a84      	ldr	r2, [pc, #528]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b82      	ldr	r3, [pc, #520]	; (8001a10 <MX_GPIO_Init+0x2d4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8001812:	2200      	movs	r2, #0
 8001814:	217c      	movs	r1, #124	; 0x7c
 8001816:	487f      	ldr	r0, [pc, #508]	; (8001a14 <MX_GPIO_Init+0x2d8>)
 8001818:	f001 fbd6 	bl	8002fc8 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_EN_Pin|LD6_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f248 0101 	movw	r1, #32769	; 0x8001
 8001822:	487d      	ldr	r0, [pc, #500]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001824:	f001 fbd0 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIGHT_BULB_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2109      	movs	r1, #9
 800182c:	487b      	ldr	r0, [pc, #492]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 800182e:	f001 fbcb 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f244 0181 	movw	r1, #16513	; 0x4081
 8001838:	4879      	ldr	r0, [pc, #484]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 800183a:	f001 fbc5 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f244 2140 	movw	r1, #16960	; 0x4240
 8001844:	4877      	ldr	r0, [pc, #476]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001846:	f001 fbbf 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 800184a:	237c      	movs	r3, #124	; 0x7c
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	486c      	ldr	r0, [pc, #432]	; (8001a14 <MX_GPIO_Init+0x2d8>)
 8001862:	f001 fa05 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4867      	ldr	r0, [pc, #412]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 800187e:	f001 f9f7 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LD6_Pin;
 8001882:	f248 0301 	movw	r3, #32769	; 0x8001
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	485f      	ldr	r0, [pc, #380]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 800189c:	f001 f9e8 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LIGHT_BULB_Pin;
 80018a0:	2309      	movs	r3, #9
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4859      	ldr	r0, [pc, #356]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 80018b8:	f001 f9da 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018bc:	2332      	movs	r3, #50	; 0x32
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018cc:	230b      	movs	r3, #11
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4851      	ldr	r0, [pc, #324]	; (8001a1c <MX_GPIO_Init+0x2e0>)
 80018d8:	f001 f9ca 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018dc:	2386      	movs	r3, #134	; 0x86
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ec:	230b      	movs	r3, #11
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	484c      	ldr	r0, [pc, #304]	; (8001a28 <MX_GPIO_Init+0x2ec>)
 80018f8:	f001 f9ba 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	4842      	ldr	r0, [pc, #264]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 8001916:	f001 f9ab 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 800191a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001920:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4839      	ldr	r0, [pc, #228]	; (8001a18 <MX_GPIO_Init+0x2dc>)
 8001932:	f001 f99d 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8001936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001942:	2302      	movs	r3, #2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	4831      	ldr	r0, [pc, #196]	; (8001a14 <MX_GPIO_Init+0x2d8>)
 800194e:	f001 f98f 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001964:	230b      	movs	r3, #11
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	482c      	ldr	r0, [pc, #176]	; (8001a20 <MX_GPIO_Init+0x2e4>)
 8001970:	f001 f97e 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8001974:	f244 2340 	movw	r3, #16960	; 0x4240
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	4825      	ldr	r0, [pc, #148]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 800198e:	f001 f96f 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	481f      	ldr	r0, [pc, #124]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 80019a6:	f001 f963 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019bc:	230a      	movs	r3, #10
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_GPIO_Init+0x2ec>)
 80019c8:	f001 f952 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_GPIO_Init+0x2ec>)
 80019e2:	f001 f945 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f8:	230b      	movs	r3, #11
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <MX_GPIO_Init+0x2e8>)
 8001a04:	f001 f934 	bl	8002c70 <HAL_GPIO_Init>

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40021800 	.word	0x40021800
 8001a28:	40020000 	.word	0x40020000

08001a2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <MX_I2C1_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <MX_I2C1_Init+0x7c>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a68:	f001 fac8 	bl	8002ffc <HAL_I2C_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a72:	f000 fac7 	bl	8002004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a7a:	f001 ffa5 	bl	80039c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a84:	f000 fabe 	bl	8002004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_I2C1_Init+0x74>)
 8001a8c:	f001 ffe7 	bl	8003a5e <HAL_I2CEx_ConfigDigitalFilter>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f000 fab5 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000d0 	.word	0x200000d0
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	20404768 	.word	0x20404768

08001aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0aa      	sub	sp, #168	; 0xa8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2284      	movs	r2, #132	; 0x84
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f006 f90a 	bl	8007ce6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_I2C_MspInit+0xb4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d13c      	bne.n	8001b56 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fd2e 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001af6:	f000 fa85 	bl	8002004 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1a:	2312      	movs	r3, #18
 8001b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b36:	4619      	mov	r1, r3
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <HAL_I2C_MspInit+0xbc>)
 8001b3a:	f001 f899 	bl	8002c70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_I2C_MspInit+0xb8>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	37a8      	adds	r7, #168	; 0xa8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b097      	sub	sp, #92	; 0x5c
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a59      	ldr	r2, [pc, #356]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f040 80aa 	bne.w	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x166>
  {
    static unsigned int cnt = 0;
    cnt++;
 8001b7e:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b86:	6013      	str	r3, [r2, #0]
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8001b88:	4856      	ldr	r0, [pc, #344]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b8a:	f7ff f9bb 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001b8e:	eef0 7a40 	vmov.f32	s15, s0
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_kilo_lux_Int = Illuminance_lux * 1000.0f;
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001cec <HAL_TIM_PeriodElapsedCallback+0x180>
 8001ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001baa:	ee17 2a90 	vmov	r2, s15
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001bb0:	601a      	str	r2, [r3, #0]


    duty_pid = PID_GetOutput(&hpid1, lux_ref, Illuminance_lux);  // [%]
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	eef0 0a47 	vmov.f32	s1, s14
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	484a      	ldr	r0, [pc, #296]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001bce:	f7ff fc81 	bl	80014d4 <PID_GetOutput>
 8001bd2:	eef0 7a40 	vmov.f32	s15, s0
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
    duty_p = duty_pid;
 8001bdc:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001be2:	6013      	str	r3, [r2, #0]
    if(duty_pid > 99)
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001d04 <HAL_TIM_PeriodElapsedCallback+0x198>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	dd02      	ble.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x92>
    {
      duty_pid = 99;
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001bfa:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001bfc:	601a      	str	r2, [r3, #0]
    }

    int duty_pid_int = duty_pid;
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(calibration==0){
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11a      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0xe2>

      if(lux_ref*1000>tab[2]){
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c20:	fb03 f202 	mul.w	r2, r3, r2
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3308      	adds	r3, #8
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dd03      	ble.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0xcc>
        Bulb_State(1); //OFF Bulb
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff f993 	bl	8000f5c <Bulb_State>
 8001c36:	e002      	b.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0xd2>
      }
      else{
        Bulb_State(0);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff f98f 	bl	8000f5c <Bulb_State>
      }

      LED_PWM_WriteDuty(&hld1,duty_pid);
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	4832      	ldr	r0, [pc, #200]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c4a:	f7ff fb0b 	bl	8001264 <LED_PWM_WriteDuty>

    }

    uint8_t tx_buffer[64];
    int tx_msg_len = sprintf((char*)tx_buffer, " %5u.%03u %d %d \n", Illuminance_kilo_lux_Int / 1000, Illuminance_kilo_lux_Int % 1000,lux_ref, duty_pid_int );
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099c      	lsrs	r4, r3, #6
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c60:	fba3 1302 	umull	r1, r3, r3, r2
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f107 0008 	add.w	r0, r7, #8
 8001c78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c7a:	9101      	str	r1, [sp, #4]
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	4622      	mov	r2, r4
 8001c80:	4926      	ldr	r1, [pc, #152]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c82:	f005 ffcd 	bl	8007c20 <siprintf>
 8001c86:	64b8      	str	r0, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8001c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	f107 0108 	add.w	r1, r7, #8
 8001c90:	2364      	movs	r3, #100	; 0x64
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001c94:	f004 fb08 	bl	80062a8 <HAL_UART_Transmit>


    if(cnt == 5)
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d118      	bne.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x166>
    {
      cnt = 0;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
      LCD_Illuminance_lux = Illuminance_kilo_lux_Int;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
      gcvt(LCD_Illuminance_lux,9,buffer); //Przepisz wartość do buffera
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc63 	bl	8000588 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4918      	ldr	r1, [pc, #96]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001cc8:	2009      	movs	r0, #9
 8001cca:	ec43 2b10 	vmov	d0, r2, r3
 8001cce:	f005 fec1 	bl	8007a54 <gcvt>
    }

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3754      	adds	r7, #84	; 0x54
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000218 	.word	0x20000218
 8001ce0:	20000178 	.word	0x20000178
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000124 	.word	0x20000124
 8001cec:	447a0000 	.word	0x447a0000
 8001cf0:	20000128 	.word	0x20000128
 8001cf4:	20000130 	.word	0x20000130
 8001cf8:	20000020 	.word	0x20000020
 8001cfc:	2000015c 	.word	0x2000015c
 8001d00:	20000160 	.word	0x20000160
 8001d04:	42c60000 	.word	0x42c60000
 8001d08:	42c60000 	.word	0x42c60000
 8001d0c:	20000048 	.word	0x20000048
 8001d10:	20000164 	.word	0x20000164
 8001d14:	20000010 	.word	0x20000010
 8001d18:	10624dd3 	.word	0x10624dd3
 8001d1c:	0800a328 	.word	0x0800a328
 8001d20:	200002b0 	.word	0x200002b0
 8001d24:	2000012c 	.word	0x2000012c
 8001d28:	20000134 	.word	0x20000134

08001d2c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
if(huart == &huart3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_UART_RxCpltCallback+0x30>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10b      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x28>
{
user_reference = strtol((char*)&tx_buffer_received, 0, 10);
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <HAL_UART_RxCpltCallback+0x34>)
 8001d42:	f005 fe7d 	bl	8007a40 <strtol>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_UART_RxCpltCallback+0x38>)
 8001d4a:	6013      	str	r3, [r2, #0]
lux_ref = user_reference;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_UART_RxCpltCallback+0x38>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_UART_RxCpltCallback+0x3c>)
 8001d52:	6013      	str	r3, [r2, #0]
}
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200002b0 	.word	0x200002b0
 8001d60:	20000140 	.word	0x20000140
 8001d64:	20000168 	.word	0x20000168
 8001d68:	20000130 	.word	0x20000130

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d72:	f000 fd58 	bl	8002826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d76:	f000 f8d7 	bl	8001f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7a:	f7ff fcdf 	bl	800173c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d7e:	f000 fc91 	bl	80026a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001d82:	f7ff fe53 	bl	8001a2c <MX_I2C1_Init>
  MX_TIM9_Init();
 8001d86:	f000 fb8b 	bl	80024a0 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001d8a:	f000 fb51 	bl	8002430 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001d8e:	f000 fad7 	bl	8002340 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001d92:	f000 fa81 	bl	8002298 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  float Illuminance_lux_min = 0.0f;
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  float Illuminance_lux_max = 0.0f;
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34

  int size = 4;
 8001da2:	2304      	movs	r3, #4
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30


  BH1750_Init(&hbh1750);
 8001da6:	484b      	ldr	r0, [pc, #300]	; (8001ed4 <main+0x168>)
 8001da8:	f7ff f886 	bl	8000eb8 <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001dac:	484a      	ldr	r0, [pc, #296]	; (8001ed8 <main+0x16c>)
 8001dae:	f003 f885 	bl	8004ebc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001db2:	484a      	ldr	r0, [pc, #296]	; (8001edc <main+0x170>)
 8001db4:	f003 f812 	bl	8004ddc <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  LED_PWM_Init(&hld1);
 8001db8:	4849      	ldr	r0, [pc, #292]	; (8001ee0 <main+0x174>)
 8001dba:	f7ff fa33 	bl	8001224 <LED_PWM_Init>


  //Bulb_State(1);

  //Swtórz granice światła
  tab = Light_Boundries();
 8001dbe:	f7ff fa77 	bl	80012b0 <Light_Boundries>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <main+0x178>)
 8001dc8:	601a      	str	r2, [r3, #0]
  calibration=0;
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <main+0x17c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  free(tab);
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <main+0x178>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 fcfd 	bl	80077d4 <free>
  //wait for counter to reach the us input in the parameter


  //Ustaw LCD
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
   Lcd_PortType ports[] = { GPIOE, GPIOE, GPIOE, GPIOE };
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <main+0x180>)
 8001ddc:	f107 0420 	add.w	r4, r7, #32
 8001de0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
   Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <main+0x184>)
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df0:	e883 0003 	stmia.w	r3, {r0, r1}

   // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
   lcd = Lcd_create(ports, pins, GPIOE, GPIO_PIN_6, GPIOF, GPIO_PIN_0, LCD_4_BIT_MODE);
 8001df4:	4c3f      	ldr	r4, [pc, #252]	; (8001ef4 <main+0x188>)
 8001df6:	4638      	mov	r0, r7
 8001df8:	f107 0218 	add.w	r2, r7, #24
 8001dfc:	f107 0120 	add.w	r1, r7, #32
 8001e00:	2300      	movs	r3, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	2301      	movs	r3, #1
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <main+0x18c>)
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <main+0x190>)
 8001e12:	f7ff f8dd 	bl	8000fd0 <Lcd_create>
 8001e16:	4625      	mov	r5, r4
 8001e18:	463c      	mov	r4, r7
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e22:	e885 0003 	stmia.w	r5, {r0, r1}

   //Wyświetlanie napisu
   Lcd_cursor(&lcd, 0,0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4832      	ldr	r0, [pc, #200]	; (8001ef4 <main+0x188>)
 8001e2c:	f7ff f944 	bl	80010b8 <Lcd_cursor>
              Lcd_string(&lcd, "Pomiar w lux ");
 8001e30:	4933      	ldr	r1, [pc, #204]	; (8001f00 <main+0x194>)
 8001e32:	4830      	ldr	r0, [pc, #192]	; (8001ef4 <main+0x188>)
 8001e34:	f7ff f920 	bl	8001078 <Lcd_string>
  {
   // __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart3 , tx_buffer_received , 4 );
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4932      	ldr	r1, [pc, #200]	; (8001f04 <main+0x198>)
 8001e3c:	4832      	ldr	r0, [pc, #200]	; (8001f08 <main+0x19c>)
 8001e3e:	f004 fab6 	bl	80063ae <HAL_UART_Receive_IT>

     pulseWidth = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001e42:	2100      	movs	r1, #0
 8001e44:	4831      	ldr	r0, [pc, #196]	; (8001f0c <main+0x1a0>)
 8001e46:	f003 fd0b 	bl	8005860 <HAL_TIM_ReadCapturedValue>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <main+0x1a4>)
 8001e4e:	6013      	str	r3, [r2, #0]
     totalPeriod = __HAL_TIM_GET_AUTORELOAD(&htim3); // Assuming timer configured in upcounting mode
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <main+0x1a0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <main+0x1a8>)
 8001e58:	6013      	str	r3, [r2, #0]
    dutyCycle = ((float)pulseWidth / (float)totalPeriod) * 100.0f;
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <main+0x1a4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <main+0x1a8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e76:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001f18 <main+0x1ac>
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <main+0x1b0>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]
   // timer_check =  __HAL_TIM_GET_COUNTER(&htim1);

    //LCD
        //Wypisz wartość lux
        Lcd_cursor(&lcd, 1,7);
 8001e84:	2207      	movs	r2, #7
 8001e86:	2101      	movs	r1, #1
 8001e88:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <main+0x188>)
 8001e8a:	f7ff f915 	bl	80010b8 <Lcd_cursor>
                  Lcd_string(&lcd, buffer);
 8001e8e:	4924      	ldr	r1, [pc, #144]	; (8001f20 <main+0x1b4>)
 8001e90:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <main+0x188>)
 8001e92:	f7ff f8f1 	bl	8001078 <Lcd_string>
                  //usun poprzednie znaki
        for (int i = 0; i < 9; ++i) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9a:	e016      	b.n	8001eca <main+0x15e>
                            if (buffer[i] == NULL) {
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <main+0x1b4>)
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10d      	bne.n	8001ec4 <main+0x158>
                              Lcd_cursor(&lcd, 1,7 + i);
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3307      	adds	r3, #7
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <main+0x188>)
 8001eb6:	f7ff f8ff 	bl	80010b8 <Lcd_cursor>
                                Lcd_string(&lcd, "    ");
 8001eba:	491a      	ldr	r1, [pc, #104]	; (8001f24 <main+0x1b8>)
 8001ebc:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <main+0x188>)
 8001ebe:	f7ff f8db 	bl	8001078 <Lcd_string>
                                continue;
 8001ec2:	bf00      	nop
        for (int i = 0; i < 9; ++i) {
 8001ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	dde5      	ble.n	8001e9c <main+0x130>
    HAL_UART_Receive_IT(&huart3 , tx_buffer_received , 4 );
 8001ed0:	e7b2      	b.n	8001e38 <main+0xcc>
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000218 	.word	0x20000218
 8001edc:	20000180 	.word	0x20000180
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	20000164 	.word	0x20000164
 8001ee8:	20000048 	.word	0x20000048
 8001eec:	0800a354 	.word	0x0800a354
 8001ef0:	0800a364 	.word	0x0800a364
 8001ef4:	20000144 	.word	0x20000144
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021000 	.word	0x40021000
 8001f00:	0800a33c 	.word	0x0800a33c
 8001f04:	20000140 	.word	0x20000140
 8001f08:	200002b0 	.word	0x200002b0
 8001f0c:	200001cc 	.word	0x200001cc
 8001f10:	2000016c 	.word	0x2000016c
 8001f14:	20000170 	.word	0x20000170
 8001f18:	42c80000 	.word	0x42c80000
 8001f1c:	20000174 	.word	0x20000174
 8001f20:	20000134 	.word	0x20000134
 8001f24:	0800a34c 	.word	0x0800a34c

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b094      	sub	sp, #80	; 0x50
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 0320 	add.w	r3, r7, #32
 8001f32:	2230      	movs	r2, #48	; 0x30
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 fed5 	bl	8007ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f4c:	f001 fdd4 	bl	8003af8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <SystemClock_Config+0xd4>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <SystemClock_Config+0xd4>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <SystemClock_Config+0xd4>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <SystemClock_Config+0xd8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a24      	ldr	r2, [pc, #144]	; (8002000 <SystemClock_Config+0xd8>)
 8001f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <SystemClock_Config+0xd8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f94:	2304      	movs	r3, #4
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001f98:	23d8      	movs	r3, #216	; 0xd8
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 fe05 	bl	8003bb8 <HAL_RCC_OscConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001fb4:	f000 f826 	bl	8002004 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fb8:	f001 fdae 	bl	8003b18 <HAL_PWREx_EnableOverDrive>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fc2:	f000 f81f 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 f88b 	bl	8004100 <HAL_RCC_ClockConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ff0:	f000 f808 	bl	8002004 <Error_Handler>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_MspInit+0x44>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_MspInit+0x44>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_MspInit+0x44>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x44>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x44>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x44>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800205c:	e7fe      	b.n	800205c <NMI_Handler+0x4>

0800205e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <MemManage_Handler+0x4>

0800206a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <UsageFault_Handler+0x4>

08002076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 fbfc 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM3_IRQHandler+0x10>)
 80020b2:	f003 f8d7 	bl	8005264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200001cc 	.word	0x200001cc

080020c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <USART3_IRQHandler+0x10>)
 80020c6:	f004 f9b7 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200002b0 	.word	0x200002b0

080020d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <TIM7_IRQHandler+0x10>)
 80020da:	f003 f8c3 	bl	8005264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000218 	.word	0x20000218

080020e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_kill>:

int _kill(int pid, int sig)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002102:	f005 fe4f 	bl	8007da4 <__errno>
 8002106:	4603      	mov	r3, r0
 8002108:	2216      	movs	r2, #22
 800210a:	601a      	str	r2, [r3, #0]
  return -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_exit>:

void _exit (int status)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffe7 	bl	80020f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800212a:	e7fe      	b.n	800212a <_exit+0x12>

0800212c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
  }

  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
  }
  return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c6:	605a      	str	r2, [r3, #4]
  return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_isatty>:

int _isatty(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f005 fdb4 	bl	8007da4 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20050000 	.word	0x20050000
 8002268:	00000400 	.word	0x00000400
 800226c:	2000017c 	.word	0x2000017c
 8002270:	20000488 	.word	0x20000488

08002274 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <MX_TIM1_Init+0xa4>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022be:	226b      	movs	r2, #107	; 0x6b
 80022c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e2:	4815      	ldr	r0, [pc, #84]	; (8002338 <MX_TIM1_Init+0xa0>)
 80022e4:	f002 fd22 	bl	8004d2c <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80022ee:	f7ff fe89 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	4619      	mov	r1, r3
 80022fe:	480e      	ldr	r0, [pc, #56]	; (8002338 <MX_TIM1_Init+0xa0>)
 8002300:	f003 f9e4 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800230a:	f7ff fe7b 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <MX_TIM1_Init+0xa0>)
 8002320:	f003 fec8 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800232a:	f7ff fe6b 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000180 	.word	0x20000180
 800233c:	40010000 	.word	0x40010000

08002340 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08e      	sub	sp, #56	; 0x38
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <MX_TIM3_Init+0xe8>)
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <MX_TIM3_Init+0xec>)
 8002376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <MX_TIM3_Init+0xe8>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <MX_TIM3_Init+0xe8>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <MX_TIM3_Init+0xe8>)
 8002386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MX_TIM3_Init+0xe8>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <MX_TIM3_Init+0xe8>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002398:	4823      	ldr	r0, [pc, #140]	; (8002428 <MX_TIM3_Init+0xe8>)
 800239a:	f002 fcc7 	bl	8004d2c <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023a4:	f7ff fe2e 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b2:	4619      	mov	r1, r3
 80023b4:	481c      	ldr	r0, [pc, #112]	; (8002428 <MX_TIM3_Init+0xe8>)
 80023b6:	f003 f989 	bl	80056cc <HAL_TIM_ConfigClockSource>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023c0:	f7ff fe20 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023c4:	4818      	ldr	r0, [pc, #96]	; (8002428 <MX_TIM3_Init+0xe8>)
 80023c6:	f002 fdf1 	bl	8004fac <HAL_TIM_PWM_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023d0:	f7ff fe18 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4811      	ldr	r0, [pc, #68]	; (8002428 <MX_TIM3_Init+0xe8>)
 80023e4:	f003 fe66 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023ee:	f7ff fe09 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f2:	2360      	movs	r3, #96	; 0x60
 80023f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002402:	463b      	mov	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_TIM3_Init+0xe8>)
 800240a:	f003 f84b 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002414:	f7ff fdf6 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <MX_TIM3_Init+0xe8>)
 800241a:	f000 f90b 	bl	8002634 <HAL_TIM_MspPostInit>

}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200001cc 	.word	0x200001cc
 800242c:	40000400 	.word	0x40000400

08002430 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_TIM7_Init+0x68>)
 8002442:	4a16      	ldr	r2, [pc, #88]	; (800249c <MX_TIM7_Init+0x6c>)
 8002444:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_TIM7_Init+0x68>)
 8002448:	f240 4237 	movw	r2, #1079	; 0x437
 800244c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <MX_TIM7_Init+0x68>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <MX_TIM7_Init+0x68>)
 8002456:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800245a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_TIM7_Init+0x68>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_TIM7_Init+0x68>)
 8002464:	f002 fc62 	bl	8004d2c <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800246e:	f7ff fdc9 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <MX_TIM7_Init+0x68>)
 8002480:	f003 fe18 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800248a:	f7ff fdbb 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000218 	.word	0x20000218
 800249c:	40001400 	.word	0x40001400

080024a0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a6:	463b      	mov	r3, r7
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <MX_TIM9_Init+0x6c>)
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <MX_TIM9_Init+0x70>)
 80024b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_TIM9_Init+0x6c>)
 80024ba:	226b      	movs	r2, #107	; 0x6b
 80024bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_TIM9_Init+0x6c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_TIM9_Init+0x6c>)
 80024c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_TIM9_Init+0x6c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_TIM9_Init+0x6c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_TIM9_Init+0x6c>)
 80024da:	f002 fc27 	bl	8004d2c <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80024e4:	f7ff fd8e 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	; (800250c <MX_TIM9_Init+0x6c>)
 80024f4:	f003 f8ea 	bl	80056cc <HAL_TIM_ConfigClockSource>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80024fe:	f7ff fd81 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000264 	.word	0x20000264
 8002510:	40014000 	.word	0x40014000

08002514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3a      	ldr	r2, [pc, #232]	; (800261c <HAL_TIM_Base_MspInit+0x108>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10c      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800254e:	e060      	b.n	8002612 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a33      	ldr	r2, [pc, #204]	; (8002624 <HAL_TIM_Base_MspInit+0x110>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d114      	bne.n	8002584 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a30      	ldr	r2, [pc, #192]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	201d      	movs	r0, #29
 8002578:	f000 fab1 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800257c:	201d      	movs	r0, #29
 800257e:	f000 faca 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 8002582:	e046      	b.n	8002612 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_TIM_Base_MspInit+0x114>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d114      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2037      	movs	r0, #55	; 0x37
 80025ac:	f000 fa97 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025b0:	2037      	movs	r0, #55	; 0x37
 80025b2:	f000 fab0 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 80025b6:	e02c      	b.n	8002612 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM9)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <HAL_TIM_Base_MspInit+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d127      	bne.n	8002612 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_TIM_Base_MspInit+0x10c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025f2:	2308      	movs	r3, #8
 80025f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fa:	2302      	movs	r3, #2
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002602:	2303      	movs	r3, #3
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4808      	ldr	r0, [pc, #32]	; (8002630 <HAL_TIM_Base_MspInit+0x11c>)
 800260e:	f000 fb2f 	bl	8002c70 <HAL_GPIO_Init>
}
 8002612:	bf00      	nop
 8002614:	3730      	adds	r7, #48	; 0x30
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40023800 	.word	0x40023800
 8002624:	40000400 	.word	0x40000400
 8002628:	40001400 	.word	0x40001400
 800262c:	40014000 	.word	0x40014000
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_TIM_MspPostInit+0x64>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11b      	bne.n	800268e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_TIM_MspPostInit+0x68>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_TIM_MspPostInit+0x68>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_TIM_MspPostInit+0x68>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267e:	2302      	movs	r3, #2
 8002680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_TIM_MspPostInit+0x6c>)
 800268a:	f000 faf1 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020000 	.word	0x40020000

080026a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <MX_USART3_UART_Init+0x5c>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_USART3_UART_Init+0x58>)
 80026e8:	f003 fd90 	bl	800620c <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80026f2:	f7ff fc87 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200002b0 	.word	0x200002b0
 8002700:	40004800 	.word	0x40004800

08002704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0aa      	sub	sp, #168	; 0xa8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	2284      	movs	r2, #132	; 0x84
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f005 fade 	bl	8007ce6 <memset>
  if(uartHandle->Instance==USART3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_UART_MspInit+0xc4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d144      	bne.n	80027be <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002738:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f001 ff02 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800274e:	f7ff fc59 	bl	8002004 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_UART_MspInit+0xc8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_UART_MspInit+0xc8>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_UART_MspInit+0xc8>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_UART_MspInit+0xc8>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_UART_MspInit+0xc8>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_UART_MspInit+0xc8>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002790:	2301      	movs	r3, #1
 8002792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800279c:	2307      	movs	r3, #7
 800279e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027a6:	4619      	mov	r1, r3
 80027a8:	4809      	ldr	r0, [pc, #36]	; (80027d0 <HAL_UART_MspInit+0xcc>)
 80027aa:	f000 fa61 	bl	8002c70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	2027      	movs	r0, #39	; 0x27
 80027b4:	f000 f993 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027b8:	2027      	movs	r0, #39	; 0x27
 80027ba:	f000 f9ac 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027be:	bf00      	nop
 80027c0:	37a8      	adds	r7, #168	; 0xa8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40004800 	.word	0x40004800
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800280c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027da:	490e      	ldr	r1, [pc, #56]	; (8002814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027f0:	4c0b      	ldr	r4, [pc, #44]	; (8002820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027fe:	f7ff fd39 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002802:	f005 fad5 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002806:	f7ff fab1 	bl	8001d6c <main>
  bx  lr    
 800280a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800280c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002818:	0800a6f0 	.word	0x0800a6f0
  ldr r2, =_sbss
 800281c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002820:	20000488 	.word	0x20000488

08002824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC_IRQHandler>

08002826 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282a:	2003      	movs	r0, #3
 800282c:	f000 f94c 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f805 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002836:	f7ff fbeb 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f967 	bl	8002b32 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f000 f92f 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000004c 	.word	0x2000004c
 8002898:	20000054 	.word	0x20000054
 800289c:	20000050 	.word	0x20000050

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000054 	.word	0x20000054
 80028c4:	20000338 	.word	0x20000338

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000338 	.word	0x20000338

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000054 	.word	0x20000054

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <__NVIC_SetPriorityGrouping+0x40>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x40>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00
 800296c:	05fa0000 	.word	0x05fa0000

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f7ff ff8e 	bl	80029c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff29 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff3e 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff8e 	bl	8002a1c <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5d 	bl	80029c8 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff feb6 	bl	80028c8 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e052      	b.n	8002c22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0216 	bic.w	r2, r2, #22
 8002b8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <HAL_DMA_Abort+0x62>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0208 	bic.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	e013      	b.n	8002bf6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bce:	f7ff fe7b 	bl	80028c8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d90c      	bls.n	8002bf6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e015      	b.n	8002c22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e4      	bne.n	8002bce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	223f      	movs	r2, #63	; 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d004      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e00c      	b.n	8002c62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e175      	b.n	8002f7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f040 8164 	bne.w	8002f76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d005      	beq.n	8002cc6 <HAL_GPIO_Init+0x56>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d130      	bne.n	8002d28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 0201 	and.w	r2, r3, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d017      	beq.n	8002d64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d123      	bne.n	8002db8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	08da      	lsrs	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3208      	adds	r2, #8
 8002d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80be 	beq.w	8002f76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfa:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e12:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <HAL_GPIO_Init+0x328>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_GPIO_Init+0x32c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d037      	beq.n	8002eae <HAL_GPIO_Init+0x23e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x330>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_GPIO_Init+0x23a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a56      	ldr	r2, [pc, #344]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02b      	beq.n	8002ea6 <HAL_GPIO_Init+0x236>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_GPIO_Init+0x338>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d025      	beq.n	8002ea2 <HAL_GPIO_Init+0x232>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_GPIO_Init+0x33c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01f      	beq.n	8002e9e <HAL_GPIO_Init+0x22e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a53      	ldr	r2, [pc, #332]	; (8002fb0 <HAL_GPIO_Init+0x340>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d019      	beq.n	8002e9a <HAL_GPIO_Init+0x22a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x344>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_GPIO_Init+0x226>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a51      	ldr	r2, [pc, #324]	; (8002fb8 <HAL_GPIO_Init+0x348>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00d      	beq.n	8002e92 <HAL_GPIO_Init+0x222>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_GPIO_Init+0x34c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <HAL_GPIO_Init+0x21e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_GPIO_Init+0x350>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_GPIO_Init+0x21a>
 8002e86:	2309      	movs	r3, #9
 8002e88:	e012      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	e010      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	e00e      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e96:	2306      	movs	r3, #6
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_GPIO_Init+0x328>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a34      	ldr	r2, [pc, #208]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f ae86 	bls.w	8002c90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021c00 	.word	0x40021c00
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40022400 	.word	0x40022400
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e07f      	b.n	800310e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fd42 	bl	8001aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800304c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e006      	b.n	8003084 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003082:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d104      	bne.n	8003096 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_I2C_Init+0x11c>)
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69d9      	ldr	r1, [r3, #28]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	02008000 	.word	0x02008000

0800311c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	460b      	mov	r3, r1
 800312a:	817b      	strh	r3, [r7, #10]
 800312c:	4613      	mov	r3, r2
 800312e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b20      	cmp	r3, #32
 800313a:	f040 80da 	bne.w	80032f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2C_Master_Transmit+0x30>
 8003148:	2302      	movs	r3, #2
 800314a:	e0d3      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003154:	f7ff fbb8 	bl	80028c8 <HAL_GetTick>
 8003158:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2319      	movs	r3, #25
 8003160:	2201      	movs	r2, #1
 8003162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f9e6 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0be      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2221      	movs	r2, #33	; 0x21
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2210      	movs	r2, #16
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	893a      	ldrh	r2, [r7, #8]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2bff      	cmp	r3, #255	; 0xff
 80031a6:	d90e      	bls.n	80031c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <HAL_I2C_Master_Transmit+0x1e0>)
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fbd0 	bl	8003964 <I2C_TransferConfig>
 80031c4:	e06c      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <HAL_I2C_Master_Transmit+0x1e0>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fbbf 	bl	8003964 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031e6:	e05b      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	6a39      	ldr	r1, [r7, #32]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f9e3 	bl	80035b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e07b      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d034      	beq.n	80032a0 <HAL_I2C_Master_Transmit+0x184>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d130      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	2200      	movs	r2, #0
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f975 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e04d      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d90e      	bls.n	8003280 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	b2da      	uxtb	r2, r3
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fb73 	bl	8003964 <I2C_TransferConfig>
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fb62 	bl	8003964 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d19e      	bne.n	80031e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f9c2 	bl	8003638 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01a      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_I2C_Master_Transmit+0x1e4>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	80002000 	.word	0x80002000
 8003300:	fe00e800 	.word	0xfe00e800

08003304 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	460b      	mov	r3, r1
 8003312:	817b      	strh	r3, [r7, #10]
 8003314:	4613      	mov	r3, r2
 8003316:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	f040 80db 	bne.w	80034dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2C_Master_Receive+0x30>
 8003330:	2302      	movs	r3, #2
 8003332:	e0d4      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800333c:	f7ff fac4 	bl	80028c8 <HAL_GetTick>
 8003340:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2319      	movs	r3, #25
 8003348:	2201      	movs	r2, #1
 800334a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8f2 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0bf      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2222      	movs	r2, #34	; 0x22
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2210      	movs	r2, #16
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	893a      	ldrh	r2, [r7, #8]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2bff      	cmp	r3, #255	; 0xff
 800338e:	d90e      	bls.n	80033ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	b2da      	uxtb	r2, r3
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_I2C_Master_Receive+0x1e4>)
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fadc 	bl	8003964 <I2C_TransferConfig>
 80033ac:	e06d      	b.n	800348a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_I2C_Master_Receive+0x1e4>)
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 facb 	bl	8003964 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80033ce:	e05c      	b.n	800348a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6a39      	ldr	r1, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f96b 	bl	80036b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e07c      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d034      	beq.n	800348a <HAL_I2C_Master_Receive+0x186>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d130      	bne.n	800348a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2200      	movs	r2, #0
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f880 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e04d      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2bff      	cmp	r3, #255	; 0xff
 800344a:	d90e      	bls.n	800346a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	b2da      	uxtb	r2, r3
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa7e 	bl	8003964 <I2C_TransferConfig>
 8003468:	e00f      	b.n	800348a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	b2da      	uxtb	r2, r3
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	2300      	movs	r3, #0
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fa6d 	bl	8003964 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d19d      	bne.n	80033d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8cd 	bl	8003638 <I2C_WaitOnSTOPFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01a      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2220      	movs	r2, #32
 80034ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_I2C_Master_Receive+0x1e8>)
 80034bc:	400b      	ands	r3, r1
 80034be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	80002400 	.word	0x80002400
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d103      	bne.n	800350e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d007      	beq.n	800352c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	619a      	str	r2, [r3, #24]
  }
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	e022      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d01e      	beq.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7ff f9b9 	bl	80028c8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d113      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e00f      	b.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d0cd      	beq.n	800354a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c4:	e02c      	b.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f8ea 	bl	80037a4 <I2C_IsErrorOccurred>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e02a      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d01e      	beq.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7ff f971 	bl	80028c8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d1cb      	bne.n	80035c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003644:	e028      	b.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8aa 	bl	80037a4 <I2C_IsErrorOccurred>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e026      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7ff f935 	bl	80028c8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d113      	bne.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e007      	b.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d1cf      	bne.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036bc:	e064      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f86e 	bl	80037a4 <I2C_IsErrorOccurred>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e062      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d138      	bne.n	8003752 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d105      	bne.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e04e      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b10      	cmp	r3, #16
 8003706:	d107      	bne.n	8003718 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2204      	movs	r2, #4
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
 8003716:	e002      	b.n	800371e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2220      	movs	r2, #32
 8003724:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003732:	400b      	ands	r3, r1
 8003734:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e022      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7ff f8b9 	bl	80028c8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d193      	bne.n	80036be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	fe00e800 	.word	0xfe00e800

080037a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d068      	beq.n	80038a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2210      	movs	r2, #16
 80037d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037d8:	e049      	b.n	800386e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d045      	beq.n	800386e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7ff f871 	bl	80028c8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_IsErrorOccurred+0x54>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d13a      	bne.n	800386e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800380a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381a:	d121      	bne.n	8003860 <I2C_IsErrorOccurred+0xbc>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003822:	d01d      	beq.n	8003860 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b20      	cmp	r3, #32
 8003828:	d01a      	beq.n	8003860 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003838:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800383a:	f7ff f845 	bl	80028c8 <HAL_GetTick>
 800383e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003840:	e00e      	b.n	8003860 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003842:	f7ff f841 	bl	80028c8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b19      	cmp	r3, #25
 800384e:	d907      	bls.n	8003860 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800385e:	e006      	b.n	800386e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b20      	cmp	r3, #32
 800386c:	d1e9      	bne.n	8003842 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d003      	beq.n	8003884 <I2C_IsErrorOccurred+0xe0>
 800387c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0aa      	beq.n	80037da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2220      	movs	r2, #32
 8003892:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01c      	beq.n	8003952 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff fde9 	bl	80034f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <I2C_IsErrorOccurred+0x1bc>)
 800392a:	400b      	ands	r3, r1
 800392c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	fe00e800 	.word	0xfe00e800

08003964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	817b      	strh	r3, [r7, #10]
 8003972:	4613      	mov	r3, r2
 8003974:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800397c:	7a7b      	ldrb	r3, [r7, #9]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003984:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	4313      	orrs	r3, r2
 800398e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003992:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	0d5b      	lsrs	r3, r3, #21
 800399e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <I2C_TransferConfig+0x60>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	43db      	mvns	r3, r3
 80039a8:	ea02 0103 	and.w	r1, r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	03ff63ff 	.word	0x03ff63ff

080039c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d138      	bne.n	8003a50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e032      	b.n	8003a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d139      	bne.n	8003ae8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e033      	b.n	8003aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2224      	movs	r2, #36	; 0x24
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ab0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40007000 	.word	0x40007000

08003b18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b46:	f7fe febf 	bl	80028c8 <HAL_GetTick>
 8003b4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b4c:	e009      	b.n	8003b62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b4e:	f7fe febb 	bl	80028c8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5c:	d901      	bls.n	8003b62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e022      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7c:	f7fe fea4 	bl	80028c8 <HAL_GetTick>
 8003b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b82:	e009      	b.n	8003b98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b84:	f7fe fea0 	bl	80028c8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b92:	d901      	bls.n	8003b98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e007      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e291      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8087 	beq.w	8003cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bdc:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d00c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be8:	4b93      	ldr	r3, [pc, #588]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d112      	bne.n	8003c1a <HAL_RCC_OscConfig+0x62>
 8003bf4:	4b90      	ldr	r3, [pc, #576]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d10b      	bne.n	8003c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c02:	4b8d      	ldr	r3, [pc, #564]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x130>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d168      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e26b      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x7a>
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a83      	ldr	r2, [pc, #524]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e02e      	b.n	8003c90 <HAL_RCC_OscConfig+0xd8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x9c>
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7b      	ldr	r2, [pc, #492]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e01d      	b.n	8003c90 <HAL_RCC_OscConfig+0xd8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0xc0>
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b73      	ldr	r3, [pc, #460]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a72      	ldr	r2, [pc, #456]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0xd8>
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6b      	ldr	r2, [pc, #428]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe fe16 	bl	80028c8 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fe12 	bl	80028c8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e21f      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xe8>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fe02 	bl	80028c8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fdfe 	bl	80028c8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e20b      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x110>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d069      	beq.n	8003dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d11c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x190>
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1df      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	493d      	ldr	r1, [pc, #244]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	e040      	b.n	8003dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d023      	beq.n	8003d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d50:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fdb4 	bl	80028c8 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7fe fdb0 	bl	80028c8 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1bd      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4929      	ldr	r1, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
 8003d96:	e018      	b.n	8003dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe fd90 	bl	80028c8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fe fd8c 	bl	80028c8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e199      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d038      	beq.n	8003e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d019      	beq.n	8003e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe fd6d 	bl	80028c8 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fd69 	bl	80028c8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e176      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x23a>
 8003e10:	e01a      	b.n	8003e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCC_OscConfig+0x280>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fd53 	bl	80028c8 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fe fd4f 	bl	80028c8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d903      	bls.n	8003e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e15c      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
 8003e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	4b91      	ldr	r3, [pc, #580]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ee      	bne.n	8003e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a4 	beq.w	8003f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e56:	4b8b      	ldr	r3, [pc, #556]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b88      	ldr	r3, [pc, #544]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a87      	ldr	r2, [pc, #540]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b85      	ldr	r3, [pc, #532]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7e:	4b82      	ldr	r3, [pc, #520]	; (8004088 <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	; (8004088 <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fe fd17 	bl	80028c8 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fe fd13 	bl	80028c8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e120      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x31a>
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	e02d      	b.n	8003f2e <HAL_RCC_OscConfig+0x376>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x33c>
 8003eda:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	4b67      	ldr	r3, [pc, #412]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a66      	ldr	r2, [pc, #408]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e01c      	b.n	8003f2e <HAL_RCC_OscConfig+0x376>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCC_OscConfig+0x35e>
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
 8003f08:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a5d      	ldr	r2, [pc, #372]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e00b      	b.n	8003f2e <HAL_RCC_OscConfig+0x376>
 8003f16:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	4b58      	ldr	r3, [pc, #352]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a57      	ldr	r2, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d015      	beq.n	8003f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fe fcc7 	bl	80028c8 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fe fcc3 	bl	80028c8 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0ce      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ee      	beq.n	8003f3e <HAL_RCC_OscConfig+0x386>
 8003f60:	e014      	b.n	8003f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe fcb1 	bl	80028c8 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fcad 	bl	80028c8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	4b40      	ldr	r3, [pc, #256]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ee      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80a4 	beq.w	80040f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d06b      	beq.n	800408c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d149      	bne.n	8004050 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a30      	ldr	r2, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fc7e 	bl	80028c8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe fc7a 	bl	80028c8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e087      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	4b28      	ldr	r3, [pc, #160]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	4313      	orrs	r3, r2
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800401a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fc4e 	bl	80028c8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe fc4a 	bl	80028c8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e057      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x478>
 800404e:	e04f      	b.n	80040f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe fc34 	bl	80028c8 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe fc30 	bl	80028c8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e03d      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_OscConfig+0x4cc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x4ac>
 8004082:	e035      	b.n	80040f0 <HAL_RCC_OscConfig+0x538>
 8004084:	40023800 	.word	0x40023800
 8004088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x544>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d028      	beq.n	80040ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d121      	bne.n	80040ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d11a      	bne.n	80040ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d0      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d910      	bls.n	8004148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	4965      	ldr	r1, [pc, #404]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800416a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a52      	ldr	r2, [pc, #328]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d040      	beq.n	8004224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e073      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4936      	ldr	r1, [pc, #216]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fe fb68 	bl	80028c8 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fe fb64 	bl	80028c8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e053      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d210      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4922      	ldr	r1, [pc, #136]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	; (80042cc <HAL_RCC_ClockConfig+0x1cc>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1d0>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_ClockConfig+0x1d4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fac4 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0800a370 	.word	0x0800a370
 80042d0:	2000004c 	.word	0x2000004c
 80042d4:	20000050 	.word	0x20000050

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b094      	sub	sp, #80	; 0x50
 80042de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	647b      	str	r3, [r7, #68]	; 0x44
 80042e4:	2300      	movs	r3, #0
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042e8:	2300      	movs	r3, #0
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f0:	4b79      	ldr	r3, [pc, #484]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x40>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	f200 80e1 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x34>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x3a>
 800430a:	e0db      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b73      	ldr	r3, [pc, #460]	; (80044dc <HAL_RCC_GetSysClockFreq+0x204>)
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004310:	e0db      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004312:	4b73      	ldr	r3, [pc, #460]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004316:	e0d8      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004318:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004320:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004322:	4b6d      	ldr	r3, [pc, #436]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	63bb      	str	r3, [r7, #56]	; 0x38
 8004338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
 8004342:	2300      	movs	r3, #0
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	0159      	lsls	r1, r3, #5
 8004358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435c:	0150      	lsls	r0, r2, #5
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4621      	mov	r1, r4
 8004364:	1a51      	subs	r1, r2, r1
 8004366:	6139      	str	r1, [r7, #16]
 8004368:	4629      	mov	r1, r5
 800436a:	eb63 0301 	sbc.w	r3, r3, r1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800437c:	4659      	mov	r1, fp
 800437e:	018b      	lsls	r3, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004386:	4651      	mov	r1, sl
 8004388:	018a      	lsls	r2, r1, #6
 800438a:	4651      	mov	r1, sl
 800438c:	ebb2 0801 	subs.w	r8, r2, r1
 8004390:	4659      	mov	r1, fp
 8004392:	eb63 0901 	sbc.w	r9, r3, r1
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043aa:	4690      	mov	r8, r2
 80043ac:	4699      	mov	r9, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	eb18 0303 	adds.w	r3, r8, r3
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	462b      	mov	r3, r5
 80043b8:	eb49 0303 	adc.w	r3, r9, r3
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ca:	4629      	mov	r1, r5
 80043cc:	024b      	lsls	r3, r1, #9
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043d4:	4621      	mov	r1, r4
 80043d6:	024a      	lsls	r2, r1, #9
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043de:	2200      	movs	r2, #0
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e8:	f7fc fbe8 	bl	8000bbc <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4613      	mov	r3, r2
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	e058      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f6:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	099b      	lsrs	r3, r3, #6
 80043fc:	2200      	movs	r2, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	4611      	mov	r1, r2
 8004402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	0159      	lsls	r1, r3, #5
 800441e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004422:	0150      	lsls	r0, r2, #5
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4641      	mov	r1, r8
 800442a:	ebb2 0a01 	subs.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb63 0b01 	sbc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004448:	ebb2 040a 	subs.w	r4, r2, sl
 800444c:	eb63 050b 	sbc.w	r5, r3, fp
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	464b      	mov	r3, r9
 800446c:	eb45 0303 	adc.w	r3, r5, r3
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004492:	2200      	movs	r2, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	61fa      	str	r2, [r7, #28]
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	f7fc fb8e 	bl	8000bbc <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80044b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetSysClockFreq+0x204>)
 80044c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3750      	adds	r7, #80	; 0x50
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	007a1200 	.word	0x007a1200

080044e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000004c 	.word	0x2000004c

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004500:	f7ff fff0 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0a9b      	lsrs	r3, r3, #10
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	; (8004520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	0800a380 	.word	0x0800a380

08004524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004528:	f7ff ffdc 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0b5b      	lsrs	r3, r3, #13
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	0800a380 	.word	0x0800a380

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d012      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004574:	4b69      	ldr	r3, [pc, #420]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a68      	ldr	r2, [pc, #416]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800457e:	6093      	str	r3, [r2, #8]
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	4964      	ldr	r1, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	494a      	ldr	r1, [pc, #296]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 808b 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b3a      	ldr	r3, [pc, #232]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	; 0x40
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a34      	ldr	r2, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fe f938 	bl	80028c8 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fe f934 	bl	80028c8 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e357      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d035      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d02e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d114      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe f8fc 	bl	80028c8 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fe f8f8 	bl	80028c8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e319      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ee      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d111      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004712:	400b      	ands	r3, r1
 8004714:	4901      	ldr	r1, [pc, #4]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e00b      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	0ffffcff 	.word	0x0ffffcff
 8004728:	4baa      	ldr	r3, [pc, #680]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4aa9      	ldr	r2, [pc, #676]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	4ba7      	ldr	r3, [pc, #668]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	49a4      	ldr	r1, [pc, #656]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004742:	4313      	orrs	r3, r2
 8004744:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004752:	4ba0      	ldr	r3, [pc, #640]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	4a9e      	ldr	r2, [pc, #632]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004762:	4b9c      	ldr	r3, [pc, #624]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004764:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	4999      	ldr	r1, [pc, #612]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004780:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478e:	4991      	ldr	r1, [pc, #580]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a2:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b0:	4988      	ldr	r1, [pc, #544]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c4:	4b83      	ldr	r3, [pc, #524]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d2:	4980      	ldr	r1, [pc, #512]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e6:	4b7b      	ldr	r3, [pc, #492]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4977      	ldr	r1, [pc, #476]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004808:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	496f      	ldr	r1, [pc, #444]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f023 020c 	bic.w	r2, r3, #12
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	4966      	ldr	r1, [pc, #408]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800484c:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	495e      	ldr	r1, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486e:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	4955      	ldr	r1, [pc, #340]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	494d      	ldr	r1, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048b2:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	493c      	ldr	r1, [pc, #240]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048f6:	4b37      	ldr	r3, [pc, #220]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	4933      	ldr	r1, [pc, #204]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004926:	492b      	ldr	r1, [pc, #172]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d011      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004948:	4922      	ldr	r1, [pc, #136]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004988:	4912      	ldr	r1, [pc, #72]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ac:	4909      	ldr	r1, [pc, #36]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d006      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80d9 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c8:	4b02      	ldr	r3, [pc, #8]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a01      	ldr	r2, [pc, #4]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fd ff75 	bl	80028c8 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e2:	f7fd ff71 	bl	80028c8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e194      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f4:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d021      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11d      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a14:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a22:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	019a      	lsls	r2, r3, #6
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	071b      	lsls	r3, r3, #28
 8004a48:	4957      	ldr	r1, [pc, #348]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02e      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d129      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a7c:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a82:	0c1b      	lsrs	r3, r3, #16
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a8a:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a90:	0f1b      	lsrs	r3, r3, #28
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	019a      	lsls	r2, r3, #6
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	071b      	lsls	r3, r3, #28
 8004ab0:	493d      	ldr	r1, [pc, #244]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004abe:	f023 021f 	bic.w	r2, r3, #31
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4937      	ldr	r1, [pc, #220]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01d      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004adc:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae2:	0e1b      	lsrs	r3, r3, #24
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aea:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af0:	0f1b      	lsrs	r3, r3, #28
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	019a      	lsls	r2, r3, #6
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	071b      	lsls	r3, r3, #28
 8004b10:	4925      	ldr	r1, [pc, #148]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d011      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	019a      	lsls	r2, r3, #6
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	071b      	lsls	r3, r3, #28
 8004b40:	4919      	ldr	r1, [pc, #100]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b54:	f7fd feb8 	bl	80028c8 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b5c:	f7fd feb4 	bl	80028c8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0d7      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	f040 80cd 	bne.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fd fe9b 	bl	80028c8 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b96:	f7fd fe97 	bl	80028c8 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b64      	cmp	r3, #100	; 0x64
 8004ba2:	d903      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e0ba      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bac:	4b5e      	ldr	r3, [pc, #376]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb8:	d0ed      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02e      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d12a      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004be2:	4b51      	ldr	r3, [pc, #324]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bf0:	4b4d      	ldr	r3, [pc, #308]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	0f1b      	lsrs	r3, r3, #28
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	019a      	lsls	r2, r3, #6
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	071b      	lsls	r3, r3, #28
 8004c16:	4944      	ldr	r1, [pc, #272]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c1e:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	493d      	ldr	r1, [pc, #244]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d022      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4c:	d11d      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c4e:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c5c:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	0f1b      	lsrs	r3, r3, #28
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	019a      	lsls	r2, r3, #6
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	071b      	lsls	r3, r3, #28
 8004c82:	4929      	ldr	r1, [pc, #164]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	0e1b      	lsrs	r3, r3, #24
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ca4:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	019a      	lsls	r2, r3, #6
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	4917      	ldr	r1, [pc, #92]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4911      	ldr	r1, [pc, #68]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fd fde8 	bl	80028c8 <HAL_GetTick>
 8004cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cfc:	f7fd fde4 	bl	80028c8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e007      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1a:	d1ef      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e049      	b.n	8004dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd fbde 	bl	8002514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 fde4 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04c      	b.n	8004e8e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <HAL_TIM_Base_Start+0xc0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d01d      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_TIM_Base_Start+0xc4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_TIM_Base_Start+0xc8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <HAL_TIM_Base_Start+0xcc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_TIM_Base_Start+0xd0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <HAL_TIM_Base_Start+0xd4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIM_Base_Start+0x70>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_TIM_Base_Start+0xd8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d115      	bne.n	8004e78 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_TIM_Base_Start+0xdc>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d015      	beq.n	8004e8a <HAL_TIM_Base_Start+0xae>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d011      	beq.n	8004e8a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	e008      	b.n	8004e8a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e000      	b.n	8004e8c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40001800 	.word	0x40001800
 8004eb8:	00010007 	.word	0x00010007

08004ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e054      	b.n	8004f7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d01d      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1f      	ldr	r2, [pc, #124]	; (8004f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d115      	bne.n	8004f68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xec>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d015      	beq.n	8004f7a <HAL_TIM_Base_Start_IT+0xbe>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d011      	beq.n	8004f7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	e008      	b.n	8004f7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40001800 	.word	0x40001800
 8004fa8:	00010007 	.word	0x00010007

08004fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e049      	b.n	8005052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f841 	bl	800505a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fca4 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start+0x24>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e03c      	b.n	800510e <HAL_TIM_PWM_Start+0x9e>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d109      	bne.n	80050ae <HAL_TIM_PWM_Start+0x3e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	e02f      	b.n	800510e <HAL_TIM_PWM_Start+0x9e>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d109      	bne.n	80050c8 <HAL_TIM_PWM_Start+0x58>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e022      	b.n	800510e <HAL_TIM_PWM_Start+0x9e>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d109      	bne.n	80050e2 <HAL_TIM_PWM_Start+0x72>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e015      	b.n	800510e <HAL_TIM_PWM_Start+0x9e>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d109      	bne.n	80050fc <HAL_TIM_PWM_Start+0x8c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	bf14      	ite	ne
 80050f4:	2301      	movne	r3, #1
 80050f6:	2300      	moveq	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e008      	b.n	800510e <HAL_TIM_PWM_Start+0x9e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e092      	b.n	800523c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_TIM_PWM_Start+0xb6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	e023      	b.n	800516e <HAL_TIM_PWM_Start+0xfe>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d104      	bne.n	8005136 <HAL_TIM_PWM_Start+0xc6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005134:	e01b      	b.n	800516e <HAL_TIM_PWM_Start+0xfe>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d104      	bne.n	8005146 <HAL_TIM_PWM_Start+0xd6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	e013      	b.n	800516e <HAL_TIM_PWM_Start+0xfe>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	d104      	bne.n	8005156 <HAL_TIM_PWM_Start+0xe6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005154:	e00b      	b.n	800516e <HAL_TIM_PWM_Start+0xfe>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b10      	cmp	r3, #16
 800515a:	d104      	bne.n	8005166 <HAL_TIM_PWM_Start+0xf6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005164:	e003      	b.n	800516e <HAL_TIM_PWM_Start+0xfe>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 ff76 	bl	8006068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a30      	ldr	r2, [pc, #192]	; (8005244 <HAL_TIM_PWM_Start+0x1d4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_TIM_PWM_Start+0x120>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <HAL_TIM_PWM_Start+0x1d8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_TIM_PWM_Start+0x124>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <HAL_TIM_PWM_Start+0x126>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a25      	ldr	r2, [pc, #148]	; (8005244 <HAL_TIM_PWM_Start+0x1d4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d01d      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a22      	ldr	r2, [pc, #136]	; (800524c <HAL_TIM_PWM_Start+0x1dc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <HAL_TIM_PWM_Start+0x1e0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <HAL_TIM_PWM_Start+0x1e4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_TIM_PWM_Start+0x1d8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_TIM_PWM_Start+0x1e8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIM_PWM_Start+0x18a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_TIM_PWM_Start+0x1ec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d115      	bne.n	8005226 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	4b17      	ldr	r3, [pc, #92]	; (8005260 <HAL_TIM_PWM_Start+0x1f0>)
 8005202:	4013      	ands	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b06      	cmp	r3, #6
 800520a:	d015      	beq.n	8005238 <HAL_TIM_PWM_Start+0x1c8>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d011      	beq.n	8005238 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005224:	e008      	b.n	8005238 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e000      	b.n	800523a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40010000 	.word	0x40010000
 8005248:	40010400 	.word	0x40010400
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40014000 	.word	0x40014000
 800525c:	40001800 	.word	0x40001800
 8005260:	00010007 	.word	0x00010007

08005264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0202 	mvn.w	r2, #2
 8005290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fb28 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fb1a 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fb2b 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0204 	mvn.w	r2, #4
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fafe 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 faf0 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb01 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b08      	cmp	r3, #8
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0208 	mvn.w	r2, #8
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fad4 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fac6 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fad7 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b10      	cmp	r3, #16
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0210 	mvn.w	r2, #16
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2208      	movs	r2, #8
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 faaa 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa9c 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 faad 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0201 	mvn.w	r2, #1
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fc fbc2 	bl	8001b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d107      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fee8 	bl	80061e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d10e      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d107      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800543a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fedb 	bl	80061f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10e      	bne.n	800546e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d107      	bne.n	800546e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa5b 	bl	8005924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b20      	cmp	r3, #32
 800547a:	d10e      	bne.n	800549a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b20      	cmp	r3, #32
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0220 	mvn.w	r2, #32
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fe9b 	bl	80061d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ff      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b14      	cmp	r3, #20
 80054ce:	f200 80f0 	bhi.w	80056b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080056b3 	.word	0x080056b3
 80054e0:	080056b3 	.word	0x080056b3
 80054e4:	080056b3 	.word	0x080056b3
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	080056b3 	.word	0x080056b3
 80054f0:	080056b3 	.word	0x080056b3
 80054f4:	080056b3 	.word	0x080056b3
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080056b3 	.word	0x080056b3
 8005500:	080056b3 	.word	0x080056b3
 8005504:	080056b3 	.word	0x080056b3
 8005508:	080055ef 	.word	0x080055ef
 800550c:	080056b3 	.word	0x080056b3
 8005510:	080056b3 	.word	0x080056b3
 8005514:	080056b3 	.word	0x080056b3
 8005518:	08005631 	.word	0x08005631
 800551c:	080056b3 	.word	0x080056b3
 8005520:	080056b3 	.word	0x080056b3
 8005524:	080056b3 	.word	0x080056b3
 8005528:	08005671 	.word	0x08005671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 faa0 	bl	8005a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e0a5      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 faf2 	bl	8005b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e084      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fb49 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e064      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fb9f 	bl	8005d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e043      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fbd6 	bl	8005de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800566e:	e023      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fc08 	bl	8005e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056b0:	e002      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]
      break;
 80056b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0b4      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x186>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	4b56      	ldr	r3, [pc, #344]	; (800585c <HAL_TIM_ConfigClockSource+0x190>)
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d03e      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005726:	f200 8087 	bhi.w	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	f000 8086 	beq.w	800583e <HAL_TIM_ConfigClockSource+0x172>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	d87f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b70      	cmp	r3, #112	; 0x70
 800573a:	d01a      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xa6>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d87b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b60      	cmp	r3, #96	; 0x60
 8005742:	d050      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005744:	2b60      	cmp	r3, #96	; 0x60
 8005746:	d877      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b50      	cmp	r3, #80	; 0x50
 800574a:	d03c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0xfa>
 800574c:	2b50      	cmp	r3, #80	; 0x50
 800574e:	d873      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d058      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x13a>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d86f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b30      	cmp	r3, #48	; 0x30
 800575a:	d064      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d86b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b20      	cmp	r3, #32
 8005762:	d060      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d867      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d05c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800576c:	2b10      	cmp	r3, #16
 800576e:	d05a      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	e062      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005782:	f000 fc51 	bl	8006028 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	609a      	str	r2, [r3, #8]
      break;
 800579e:	e04f      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b0:	f000 fc3a 	bl	8006028 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c2:	609a      	str	r2, [r3, #8]
      break;
 80057c4:	e03c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 fbae 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2150      	movs	r1, #80	; 0x50
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fc07 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80057e4:	e02c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fbcd 	bl	8005f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2160      	movs	r1, #96	; 0x60
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fbf7 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005804:	e01c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fb8e 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2140      	movs	r1, #64	; 0x40
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fbe7 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005824:	e00c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 fbde 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005836:	e003      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e000      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800583e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	fffeff88 	.word	0xfffeff88

08005860 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d831      	bhi.n	80058d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058d9 	.word	0x080058d9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058bb 	.word	0x080058bb
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058d9 	.word	0x080058d9
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058cf 	.word	0x080058cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	60fb      	str	r3, [r7, #12]

      break;
 80058b8:	e00f      	b.n	80058da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	60fb      	str	r3, [r7, #12]

      break;
 80058c2:	e00a      	b.n	80058da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	60fb      	str	r3, [r7, #12]

      break;
 80058cc:	e005      	b.n	80058da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	60fb      	str	r3, [r7, #12]

      break;
 80058d6:	e000      	b.n	80058da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058d8:	bf00      	nop
  }

  return tmpreg;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a40      	ldr	r2, [pc, #256]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d00f      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3d      	ldr	r2, [pc, #244]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005998:	d027      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <TIM_Base_SetConfig+0x118>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d023      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2b      	ldr	r2, [pc, #172]	; (8005a54 <TIM_Base_SetConfig+0x11c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2a      	ldr	r2, [pc, #168]	; (8005a58 <TIM_Base_SetConfig+0x120>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d017      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <TIM_Base_SetConfig+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <TIM_Base_SetConfig+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <TIM_Base_SetConfig+0x134>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <TIM_Base_SetConfig+0x138>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a23      	ldr	r2, [pc, #140]	; (8005a74 <TIM_Base_SetConfig+0x13c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0xf8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40001c00 	.word	0x40001c00
 8005a74:	40002000 	.word	0x40002000

08005a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4b2b      	ldr	r3, [pc, #172]	; (8005b50 <TIM_OC1_SetConfig+0xd8>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 0302 	bic.w	r3, r3, #2
 8005ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <TIM_OC1_SetConfig+0xdc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC1_SetConfig+0x64>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <TIM_OC1_SetConfig+0xe0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10c      	bne.n	8005af6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0308 	bic.w	r3, r3, #8
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <TIM_OC1_SetConfig+0xdc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC1_SetConfig+0x8e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <TIM_OC1_SetConfig+0xe0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	fffeff8f 	.word	0xfffeff8f
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0210 	bic.w	r2, r3, #16
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <TIM_OC2_SetConfig+0xe4>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0320 	bic.w	r3, r3, #32
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a23      	ldr	r2, [pc, #140]	; (8005c44 <TIM_OC2_SetConfig+0xe8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC2_SetConfig+0x68>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a22      	ldr	r2, [pc, #136]	; (8005c48 <TIM_OC2_SetConfig+0xec>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <TIM_OC2_SetConfig+0xe8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x94>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <TIM_OC2_SetConfig+0xec>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d113      	bne.n	8005c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	feff8fff 	.word	0xfeff8fff
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <TIM_OC3_SetConfig+0xe0>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <TIM_OC3_SetConfig+0xe4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <TIM_OC3_SetConfig+0xe8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10d      	bne.n	8005cce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <TIM_OC3_SetConfig+0xe4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC3_SetConfig+0x92>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <TIM_OC3_SetConfig+0xe8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	fffeff8f 	.word	0xfffeff8f
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <TIM_OC4_SetConfig+0xa4>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC4_SetConfig+0xa8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC4_SetConfig+0x68>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC4_SetConfig+0xac>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	feff8fff 	.word	0xfeff8fff
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <TIM_OC5_SetConfig+0x98>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <TIM_OC5_SetConfig+0x9c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC5_SetConfig+0x5e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <TIM_OC5_SetConfig+0xa0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d109      	bne.n	8005e5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	fffeff8f 	.word	0xfffeff8f
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <TIM_OC6_SetConfig+0x9c>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <TIM_OC6_SetConfig+0xa0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC6_SetConfig+0x60>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <TIM_OC6_SetConfig+0xa4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d109      	bne.n	8005f00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	feff8fff 	.word	0xfeff8fff
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40010400 	.word	0x40010400

08005f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0210 	bic.w	r2, r3, #16
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	031b      	lsls	r3, r3, #12
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	f043 0307 	orr.w	r3, r3, #7
 8006014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	609a      	str	r2, [r3, #8]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e06d      	b.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2f      	ldr	r2, [pc, #188]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006106:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d01d      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d10c      	bne.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40001800 	.word	0x40001800

080061d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e040      	b.n	80062a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc fa68 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fbe6 	bl	8006a1c <UART_SetConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e022      	b.n	80062a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fe3e 	bl	8006ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fec5 	bl	8007028 <UART_CheckIdleState>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d171      	bne.n	80063a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_UART_Transmit+0x24>
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e06a      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	; 0x21
 80062dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062de:	f7fc faf3 	bl	80028c8 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x68>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006318:	e02c      	b.n	8006374 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 feb6 	bl	8007096 <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e038      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	3302      	adds	r3, #2
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e007      	b.n	8006362 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1cc      	bne.n	800631a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	2140      	movs	r1, #64	; 0x40
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fe83 	bl	8007096 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e005      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b08a      	sub	sp, #40	; 0x28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d132      	bne.n	800642c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_UART_Receive_IT+0x24>
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e02b      	b.n	800642e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d018      	beq.n	800641c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	613b      	str	r3, [r7, #16]
   return(result);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	6a3a      	ldr	r2, [r7, #32]
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	61bb      	str	r3, [r7, #24]
   return(result);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e6      	bne.n	80063ea <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	461a      	mov	r2, r3
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fefe 	bl	8007224 <UART_Start_Receive_IT>
 8006428:	4603      	mov	r3, r0
 800642a:	e000      	b.n	800642e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3728      	adds	r7, #40	; 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0ba      	sub	sp, #232	; 0xe8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800645e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006462:	f640 030f 	movw	r3, #2063	; 0x80f
 8006466:	4013      	ands	r3, r2
 8006468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800646c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d115      	bne.n	80064a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00f      	beq.n	80064a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8297 	beq.w	80069c4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
      }
      return;
 800649e:	e291      	b.n	80069c4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8117 	beq.w	80066d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064ba:	4b85      	ldr	r3, [pc, #532]	; (80066d0 <HAL_UART_IRQHandler+0x298>)
 80064bc:	4013      	ands	r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 810a 	beq.w	80066d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d011      	beq.n	80064f4 <HAL_UART_IRQHandler+0xbc>
 80064d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2201      	movs	r2, #1
 80064e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d011      	beq.n	8006524 <HAL_UART_IRQHandler+0xec>
 8006500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2202      	movs	r2, #2
 8006512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651a:	f043 0204 	orr.w	r2, r3, #4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d011      	beq.n	8006554 <HAL_UART_IRQHandler+0x11c>
 8006530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2204      	movs	r2, #4
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	f043 0202 	orr.w	r2, r3, #2
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006586:	f043 0208 	orr.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006598:	2b00      	cmp	r3, #0
 800659a:	d012      	beq.n	80065c2 <HAL_UART_IRQHandler+0x18a>
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 81fd 	beq.w	80069c8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006616:	2b00      	cmp	r3, #0
 8006618:	d04f      	beq.n	80066ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fec8 	bl	80073b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d141      	bne.n	80066b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1d9      	bne.n	800662e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006686:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <HAL_UART_IRQHandler+0x29c>)
 8006688:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668e:	4618      	mov	r0, r3
 8006690:	f7fc facb 	bl	8002c2a <HAL_DMA_Abort_IT>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d017      	beq.n	80066ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e00f      	b.n	80066ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f9a0 	bl	80069f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00b      	b.n	80066ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f99c 	bl	80069f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e007      	b.n	80066ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f998 	bl	80069f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80066c8:	e17e      	b.n	80069c8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ca:	bf00      	nop
    return;
 80066cc:	e17c      	b.n	80069c8 <HAL_UART_IRQHandler+0x590>
 80066ce:	bf00      	nop
 80066d0:	04000120 	.word	0x04000120
 80066d4:	08007479 	.word	0x08007479

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 814c 	bne.w	800697a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8145 	beq.w	800697a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 813e 	beq.w	800697a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2210      	movs	r2, #16
 8006704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	f040 80b6 	bne.w	8006882 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006722:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8150 	beq.w	80069cc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006736:	429a      	cmp	r2, r3
 8006738:	f080 8148 	bcs.w	80069cc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006750:	f000 8086 	beq.w	8006860 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800677e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800678a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1da      	bne.n	8006754 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e1      	bne.n	800679e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e3      	bne.n	80067da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800682e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006830:	f023 0310 	bic.w	r3, r3, #16
 8006834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006842:	65bb      	str	r3, [r7, #88]	; 0x58
 8006844:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e4      	bne.n	8006820 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	4618      	mov	r0, r3
 800685c:	f7fc f975 	bl	8002b4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006872:	b29b      	uxth	r3, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8c2 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006880:	e0a4      	b.n	80069cc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688e:	b29b      	uxth	r3, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8096 	beq.w	80069d0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80068a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8091 	beq.w	80069d0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068d0:	647b      	str	r3, [r7, #68]	; 0x44
 80068d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e4      	bne.n	80068ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	623b      	str	r3, [r7, #32]
   return(result);
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006908:	633a      	str	r2, [r7, #48]	; 0x30
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e3      	bne.n	80068e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	60fb      	str	r3, [r7, #12]
   return(result);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69b9      	ldr	r1, [r7, #24]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	617b      	str	r3, [r7, #20]
   return(result);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e4      	bne.n	8006930 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800696c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f846 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006978:	e02a      	b.n	80069d0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01c      	beq.n	80069d4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
    }
    return;
 80069a2:	e017      	b.n	80069d4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <HAL_UART_IRQHandler+0x59e>
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fd71 	bl	80074a4 <UART_EndTransmit_IT>
    return;
 80069c2:	e008      	b.n	80069d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80069c4:	bf00      	nop
 80069c6:	e006      	b.n	80069d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80069c8:	bf00      	nop
 80069ca:	e004      	b.n	80069d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <HAL_UART_IRQHandler+0x59e>
      return;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <HAL_UART_IRQHandler+0x59e>
    return;
 80069d4:	bf00      	nop
  }

}
 80069d6:	37e8      	adds	r7, #232	; 0xe8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4ba6      	ldr	r3, [pc, #664]	; (8006ce0 <UART_SetConfig+0x2c4>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	6979      	ldr	r1, [r7, #20]
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a94      	ldr	r2, [pc, #592]	; (8006ce4 <UART_SetConfig+0x2c8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d120      	bne.n	8006ada <UART_SetConfig+0xbe>
 8006a98:	4b93      	ldr	r3, [pc, #588]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d816      	bhi.n	8006ad4 <UART_SetConfig+0xb8>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <UART_SetConfig+0x90>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006ac9 	.word	0x08006ac9
 8006ab4:	08006ac3 	.word	0x08006ac3
 8006ab8:	08006acf 	.word	0x08006acf
 8006abc:	2301      	movs	r3, #1
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e150      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e14d      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e14a      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ace:	2308      	movs	r3, #8
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e147      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e144      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a83      	ldr	r2, [pc, #524]	; (8006cec <UART_SetConfig+0x2d0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d132      	bne.n	8006b4a <UART_SetConfig+0x12e>
 8006ae4:	4b80      	ldr	r3, [pc, #512]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b0c      	cmp	r3, #12
 8006af0:	d828      	bhi.n	8006b44 <UART_SetConfig+0x128>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0xdc>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b2d 	.word	0x08006b2d
 8006afc:	08006b45 	.word	0x08006b45
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	08006b45 	.word	0x08006b45
 8006b08:	08006b39 	.word	0x08006b39
 8006b0c:	08006b45 	.word	0x08006b45
 8006b10:	08006b45 	.word	0x08006b45
 8006b14:	08006b45 	.word	0x08006b45
 8006b18:	08006b33 	.word	0x08006b33
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006b45 	.word	0x08006b45
 8006b28:	08006b3f 	.word	0x08006b3f
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e118      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b32:	2302      	movs	r3, #2
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e115      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e112      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e10f      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b44:	2310      	movs	r3, #16
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e10c      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a68      	ldr	r2, [pc, #416]	; (8006cf0 <UART_SetConfig+0x2d4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d120      	bne.n	8006b96 <UART_SetConfig+0x17a>
 8006b54:	4b64      	ldr	r3, [pc, #400]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b5e:	2b30      	cmp	r3, #48	; 0x30
 8006b60:	d013      	beq.n	8006b8a <UART_SetConfig+0x16e>
 8006b62:	2b30      	cmp	r3, #48	; 0x30
 8006b64:	d814      	bhi.n	8006b90 <UART_SetConfig+0x174>
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d009      	beq.n	8006b7e <UART_SetConfig+0x162>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d810      	bhi.n	8006b90 <UART_SetConfig+0x174>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <UART_SetConfig+0x15c>
 8006b72:	2b10      	cmp	r3, #16
 8006b74:	d006      	beq.n	8006b84 <UART_SetConfig+0x168>
 8006b76:	e00b      	b.n	8006b90 <UART_SetConfig+0x174>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e0f2      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e0ef      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b84:	2304      	movs	r3, #4
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e0ec      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e0e9      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b90:	2310      	movs	r3, #16
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e0e6      	b.n	8006d64 <UART_SetConfig+0x348>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a56      	ldr	r2, [pc, #344]	; (8006cf4 <UART_SetConfig+0x2d8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d120      	bne.n	8006be2 <UART_SetConfig+0x1c6>
 8006ba0:	4b51      	ldr	r3, [pc, #324]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006baa:	2bc0      	cmp	r3, #192	; 0xc0
 8006bac:	d013      	beq.n	8006bd6 <UART_SetConfig+0x1ba>
 8006bae:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb0:	d814      	bhi.n	8006bdc <UART_SetConfig+0x1c0>
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d009      	beq.n	8006bca <UART_SetConfig+0x1ae>
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d810      	bhi.n	8006bdc <UART_SetConfig+0x1c0>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <UART_SetConfig+0x1a8>
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d006      	beq.n	8006bd0 <UART_SetConfig+0x1b4>
 8006bc2:	e00b      	b.n	8006bdc <UART_SetConfig+0x1c0>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e0cc      	b.n	8006d64 <UART_SetConfig+0x348>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e0c9      	b.n	8006d64 <UART_SetConfig+0x348>
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e0c6      	b.n	8006d64 <UART_SetConfig+0x348>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e0c3      	b.n	8006d64 <UART_SetConfig+0x348>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e0c0      	b.n	8006d64 <UART_SetConfig+0x348>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a44      	ldr	r2, [pc, #272]	; (8006cf8 <UART_SetConfig+0x2dc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d125      	bne.n	8006c38 <UART_SetConfig+0x21c>
 8006bec:	4b3e      	ldr	r3, [pc, #248]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bfa:	d017      	beq.n	8006c2c <UART_SetConfig+0x210>
 8006bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c00:	d817      	bhi.n	8006c32 <UART_SetConfig+0x216>
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c06:	d00b      	beq.n	8006c20 <UART_SetConfig+0x204>
 8006c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0c:	d811      	bhi.n	8006c32 <UART_SetConfig+0x216>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <UART_SetConfig+0x1fe>
 8006c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c16:	d006      	beq.n	8006c26 <UART_SetConfig+0x20a>
 8006c18:	e00b      	b.n	8006c32 <UART_SetConfig+0x216>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e0a1      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c20:	2302      	movs	r3, #2
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e09e      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c26:	2304      	movs	r3, #4
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e09b      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c2c:	2308      	movs	r3, #8
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e098      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c32:	2310      	movs	r3, #16
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e095      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2f      	ldr	r2, [pc, #188]	; (8006cfc <UART_SetConfig+0x2e0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d125      	bne.n	8006c8e <UART_SetConfig+0x272>
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c50:	d017      	beq.n	8006c82 <UART_SetConfig+0x266>
 8006c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c56:	d817      	bhi.n	8006c88 <UART_SetConfig+0x26c>
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5c:	d00b      	beq.n	8006c76 <UART_SetConfig+0x25a>
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c62:	d811      	bhi.n	8006c88 <UART_SetConfig+0x26c>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <UART_SetConfig+0x254>
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d006      	beq.n	8006c7c <UART_SetConfig+0x260>
 8006c6e:	e00b      	b.n	8006c88 <UART_SetConfig+0x26c>
 8006c70:	2301      	movs	r3, #1
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e076      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c76:	2302      	movs	r3, #2
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e073      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e070      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c82:	2308      	movs	r3, #8
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e06d      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e06a      	b.n	8006d64 <UART_SetConfig+0x348>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <UART_SetConfig+0x2e4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d138      	bne.n	8006d0a <UART_SetConfig+0x2ee>
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <UART_SetConfig+0x2cc>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca6:	d017      	beq.n	8006cd8 <UART_SetConfig+0x2bc>
 8006ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cac:	d82a      	bhi.n	8006d04 <UART_SetConfig+0x2e8>
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d00b      	beq.n	8006ccc <UART_SetConfig+0x2b0>
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d824      	bhi.n	8006d04 <UART_SetConfig+0x2e8>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <UART_SetConfig+0x2aa>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	d006      	beq.n	8006cd2 <UART_SetConfig+0x2b6>
 8006cc4:	e01e      	b.n	8006d04 <UART_SetConfig+0x2e8>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e04b      	b.n	8006d64 <UART_SetConfig+0x348>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e048      	b.n	8006d64 <UART_SetConfig+0x348>
 8006cd2:	2304      	movs	r3, #4
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e045      	b.n	8006d64 <UART_SetConfig+0x348>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e042      	b.n	8006d64 <UART_SetConfig+0x348>
 8006cde:	bf00      	nop
 8006ce0:	efff69f3 	.word	0xefff69f3
 8006ce4:	40011000 	.word	0x40011000
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40004400 	.word	0x40004400
 8006cf0:	40004800 	.word	0x40004800
 8006cf4:	40004c00 	.word	0x40004c00
 8006cf8:	40005000 	.word	0x40005000
 8006cfc:	40011400 	.word	0x40011400
 8006d00:	40007800 	.word	0x40007800
 8006d04:	2310      	movs	r3, #16
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e02c      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a72      	ldr	r2, [pc, #456]	; (8006ed8 <UART_SetConfig+0x4bc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d125      	bne.n	8006d60 <UART_SetConfig+0x344>
 8006d14:	4b71      	ldr	r3, [pc, #452]	; (8006edc <UART_SetConfig+0x4c0>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d22:	d017      	beq.n	8006d54 <UART_SetConfig+0x338>
 8006d24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d28:	d817      	bhi.n	8006d5a <UART_SetConfig+0x33e>
 8006d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2e:	d00b      	beq.n	8006d48 <UART_SetConfig+0x32c>
 8006d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d34:	d811      	bhi.n	8006d5a <UART_SetConfig+0x33e>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <UART_SetConfig+0x326>
 8006d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3e:	d006      	beq.n	8006d4e <UART_SetConfig+0x332>
 8006d40:	e00b      	b.n	8006d5a <UART_SetConfig+0x33e>
 8006d42:	2300      	movs	r3, #0
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e00d      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e00a      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d4e:	2304      	movs	r3, #4
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e007      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d54:	2308      	movs	r3, #8
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e004      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e001      	b.n	8006d64 <UART_SetConfig+0x348>
 8006d60:	2310      	movs	r3, #16
 8006d62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6c:	d15b      	bne.n	8006e26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d828      	bhi.n	8006dc6 <UART_SetConfig+0x3aa>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x360>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006dc7 	.word	0x08006dc7
 8006d8c:	08006db7 	.word	0x08006db7
 8006d90:	08006dc7 	.word	0x08006dc7
 8006d94:	08006dc7 	.word	0x08006dc7
 8006d98:	08006dc7 	.word	0x08006dc7
 8006d9c:	08006dbf 	.word	0x08006dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fd fbac 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8006da4:	61b8      	str	r0, [r7, #24]
        break;
 8006da6:	e013      	b.n	8006dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da8:	f7fd fbbc 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8006dac:	61b8      	str	r0, [r7, #24]
        break;
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <UART_SetConfig+0x4c4>)
 8006db2:	61bb      	str	r3, [r7, #24]
        break;
 8006db4:	e00c      	b.n	8006dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db6:	f7fd fa8f 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8006dba:	61b8      	str	r0, [r7, #24]
        break;
 8006dbc:	e008      	b.n	8006dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc2:	61bb      	str	r3, [r7, #24]
        break;
 8006dc4:	e004      	b.n	8006dd0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d074      	beq.n	8006ec0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	005a      	lsls	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d916      	bls.n	8006e20 <UART_SetConfig+0x404>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d212      	bcs.n	8006e20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f023 030f 	bic.w	r3, r3, #15
 8006e02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	89fa      	ldrh	r2, [r7, #14]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e04f      	b.n	8006ec0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	77bb      	strb	r3, [r7, #30]
 8006e24:	e04c      	b.n	8006ec0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e26:	7ffb      	ldrb	r3, [r7, #31]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d828      	bhi.n	8006e7e <UART_SetConfig+0x462>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x418>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fd fb50 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8006e5c:	61b8      	str	r0, [r7, #24]
        break;
 8006e5e:	e013      	b.n	8006e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fd fb60 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8006e64:	61b8      	str	r0, [r7, #24]
        break;
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <UART_SetConfig+0x4c4>)
 8006e6a:	61bb      	str	r3, [r7, #24]
        break;
 8006e6c:	e00c      	b.n	8006e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fd fa33 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8006e72:	61b8      	str	r0, [r7, #24]
        break;
 8006e74:	e008      	b.n	8006e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	61bb      	str	r3, [r7, #24]
        break;
 8006e7c:	e004      	b.n	8006e88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	77bb      	strb	r3, [r7, #30]
        break;
 8006e86:	bf00      	nop
    }

    if (pclk != 0U)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085a      	lsrs	r2, r3, #1
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	441a      	add	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b0f      	cmp	r3, #15
 8006ea6:	d909      	bls.n	8006ebc <UART_SetConfig+0x4a0>
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eae:	d205      	bcs.n	8006ebc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	e001      	b.n	8006ec0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40007c00 	.word	0x40007c00
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	00f42400 	.word	0x00f42400

08006ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe2:	d10a      	bne.n	8006ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af02      	add	r7, sp, #8
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007038:	f7fb fc46 	bl	80028c8 <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10e      	bne.n	800706a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f81b 	bl	8007096 <UART_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e011      	b.n	800708e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b09c      	sub	sp, #112	; 0x70
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a6:	e0a7      	b.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	f000 80a3 	beq.w	80071f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7fb fc09 	bl	80028c8 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80070c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d13f      	bne.n	8007148 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070dc:	667b      	str	r3, [r7, #100]	; 0x64
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	663b      	str	r3, [r7, #96]	; 0x60
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800711a:	64ba      	str	r2, [r7, #72]	; 0x48
 800711c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e068      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d050      	beq.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007164:	d148      	bne.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800716e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	613b      	str	r3, [r7, #16]
   return(result);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071c2:	623a      	str	r2, [r7, #32]
 80071c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	69f9      	ldr	r1, [r7, #28]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e010      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69da      	ldr	r2, [r3, #28]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4013      	ands	r3, r2
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	429a      	cmp	r2, r3
 8007206:	bf0c      	ite	eq
 8007208:	2301      	moveq	r3, #1
 800720a:	2300      	movne	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	429a      	cmp	r2, r3
 8007214:	f43f af48 	beq.w	80070a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3770      	adds	r7, #112	; 0x70
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007224:	b480      	push	{r7}
 8007226:	b097      	sub	sp, #92	; 0x5c
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007256:	d10e      	bne.n	8007276 <UART_Start_Receive_IT+0x52>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d105      	bne.n	800726c <UART_Start_Receive_IT+0x48>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007266:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800726a:	e02d      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	22ff      	movs	r2, #255	; 0xff
 8007270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007274:	e028      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <UART_Start_Receive_IT+0x76>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <UART_Start_Receive_IT+0x6c>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800728e:	e01b      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	227f      	movs	r2, #127	; 0x7f
 8007294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007298:	e016      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a2:	d10d      	bne.n	80072c0 <UART_Start_Receive_IT+0x9c>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <UART_Start_Receive_IT+0x92>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	227f      	movs	r2, #127	; 0x7f
 80072b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072b4:	e008      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	223f      	movs	r2, #63	; 0x3f
 80072ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072be:	e003      	b.n	80072c8 <UART_Start_Receive_IT+0xa4>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2222      	movs	r2, #34	; 0x22
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	f043 0301 	orr.w	r3, r3, #1
 80072ee:	657b      	str	r3, [r7, #84]	; 0x54
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007314:	d107      	bne.n	8007326 <UART_Start_Receive_IT+0x102>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <UART_Start_Receive_IT+0x184>)
 8007322:	669a      	str	r2, [r3, #104]	; 0x68
 8007324:	e002      	b.n	800732c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4a20      	ldr	r2, [pc, #128]	; (80073ac <UART_Start_Receive_IT+0x188>)
 800732a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
 8007354:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e6      	bne.n	8007334 <UART_Start_Receive_IT+0x110>
 8007366:	e018      	b.n	800739a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	613b      	str	r3, [r7, #16]
   return(result);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f043 0320 	orr.w	r3, r3, #32
 800737c:	653b      	str	r3, [r7, #80]	; 0x50
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007386:	623b      	str	r3, [r7, #32]
 8007388:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	6a3a      	ldr	r2, [r7, #32]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	61bb      	str	r3, [r7, #24]
   return(result);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	375c      	adds	r7, #92	; 0x5c
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	0800765f 	.word	0x0800765f
 80073ac:	080074f9 	.word	0x080074f9

080073b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b095      	sub	sp, #84	; 0x54
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d6:	643b      	str	r3, [r7, #64]	; 0x40
 80073d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	64bb      	str	r3, [r7, #72]	; 0x48
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007422:	2b01      	cmp	r3, #1
 8007424:	d118      	bne.n	8007458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	60bb      	str	r3, [r7, #8]
   return(result);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f023 0310 	bic.w	r3, r3, #16
 800743a:	647b      	str	r3, [r7, #68]	; 0x44
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6979      	ldr	r1, [r7, #20]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	613b      	str	r3, [r7, #16]
   return(result);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800746c:	bf00      	nop
 800746e:	3754      	adds	r7, #84	; 0x54
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff faaa 	bl	80069f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	613b      	str	r3, [r7, #16]
   return(result);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fa76 	bl	80069dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f0:	bf00      	nop
 80074f2:	3720      	adds	r7, #32
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b096      	sub	sp, #88	; 0x58
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007506:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007510:	2b22      	cmp	r3, #34	; 0x22
 8007512:	f040 8098 	bne.w	8007646 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007520:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007524:	b2d9      	uxtb	r1, r3
 8007526:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800752a:	b2da      	uxtb	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	400a      	ands	r2, r1
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d17b      	bne.n	8007656 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007572:	653b      	str	r3, [r7, #80]	; 0x50
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757c:	647b      	str	r3, [r7, #68]	; 0x44
 800757e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	623b      	str	r3, [r7, #32]
   return(result);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075b0:	633a      	str	r2, [r7, #48]	; 0x30
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d12e      	bne.n	800763e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	617b      	str	r3, [r7, #20]
   return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b10      	cmp	r3, #16
 8007624:	d103      	bne.n	800762e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff f9e4 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800763c:	e00b      	b.n	8007656 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fa fb74 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 8007644:	e007      	b.n	8007656 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699a      	ldr	r2, [r3, #24]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0208 	orr.w	r2, r2, #8
 8007654:	619a      	str	r2, [r3, #24]
}
 8007656:	bf00      	nop
 8007658:	3758      	adds	r7, #88	; 0x58
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b096      	sub	sp, #88	; 0x58
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800766c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007676:	2b22      	cmp	r3, #34	; 0x22
 8007678:	f040 8098 	bne.w	80077ac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800768c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007690:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007694:	4013      	ands	r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d17b      	bne.n	80077bc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
 80076e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e6      	bne.n	80076c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	61fb      	str	r3, [r7, #28]
   return(result);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	64bb      	str	r3, [r7, #72]	; 0x48
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800771c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007742:	2b01      	cmp	r3, #1
 8007744:	d12e      	bne.n	80077a4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	60bb      	str	r3, [r7, #8]
   return(result);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f023 0310 	bic.w	r3, r3, #16
 8007760:	647b      	str	r3, [r7, #68]	; 0x44
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e6      	bne.n	800774c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f003 0310 	and.w	r3, r3, #16
 8007788:	2b10      	cmp	r3, #16
 800778a:	d103      	bne.n	8007794 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2210      	movs	r2, #16
 8007792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff f931 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077a2:	e00b      	b.n	80077bc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7fa fac1 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 80077aa:	e007      	b.n	80077bc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0208 	orr.w	r2, r2, #8
 80077ba:	619a      	str	r2, [r3, #24]
}
 80077bc:	bf00      	nop
 80077be:	3758      	adds	r7, #88	; 0x58
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <malloc>:
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <malloc+0xc>)
 80077c6:	4601      	mov	r1, r0
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f000 b82b 	b.w	8007824 <_malloc_r>
 80077ce:	bf00      	nop
 80077d0:	200000b0 	.word	0x200000b0

080077d4 <free>:
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <free+0xc>)
 80077d6:	4601      	mov	r1, r0
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	f000 bb11 	b.w	8007e00 <_free_r>
 80077de:	bf00      	nop
 80077e0:	200000b0 	.word	0x200000b0

080077e4 <sbrk_aligned>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	4e0e      	ldr	r6, [pc, #56]	; (8007820 <sbrk_aligned+0x3c>)
 80077e8:	460c      	mov	r4, r1
 80077ea:	6831      	ldr	r1, [r6, #0]
 80077ec:	4605      	mov	r5, r0
 80077ee:	b911      	cbnz	r1, 80077f6 <sbrk_aligned+0x12>
 80077f0:	f000 fab6 	bl	8007d60 <_sbrk_r>
 80077f4:	6030      	str	r0, [r6, #0]
 80077f6:	4621      	mov	r1, r4
 80077f8:	4628      	mov	r0, r5
 80077fa:	f000 fab1 	bl	8007d60 <_sbrk_r>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d00a      	beq.n	8007818 <sbrk_aligned+0x34>
 8007802:	1cc4      	adds	r4, r0, #3
 8007804:	f024 0403 	bic.w	r4, r4, #3
 8007808:	42a0      	cmp	r0, r4
 800780a:	d007      	beq.n	800781c <sbrk_aligned+0x38>
 800780c:	1a21      	subs	r1, r4, r0
 800780e:	4628      	mov	r0, r5
 8007810:	f000 faa6 	bl	8007d60 <_sbrk_r>
 8007814:	3001      	adds	r0, #1
 8007816:	d101      	bne.n	800781c <sbrk_aligned+0x38>
 8007818:	f04f 34ff 	mov.w	r4, #4294967295
 800781c:	4620      	mov	r0, r4
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	20000340 	.word	0x20000340

08007824 <_malloc_r>:
 8007824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007828:	1ccd      	adds	r5, r1, #3
 800782a:	f025 0503 	bic.w	r5, r5, #3
 800782e:	3508      	adds	r5, #8
 8007830:	2d0c      	cmp	r5, #12
 8007832:	bf38      	it	cc
 8007834:	250c      	movcc	r5, #12
 8007836:	2d00      	cmp	r5, #0
 8007838:	4607      	mov	r7, r0
 800783a:	db01      	blt.n	8007840 <_malloc_r+0x1c>
 800783c:	42a9      	cmp	r1, r5
 800783e:	d905      	bls.n	800784c <_malloc_r+0x28>
 8007840:	230c      	movs	r3, #12
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	2600      	movs	r6, #0
 8007846:	4630      	mov	r0, r6
 8007848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007920 <_malloc_r+0xfc>
 8007850:	f000 f868 	bl	8007924 <__malloc_lock>
 8007854:	f8d8 3000 	ldr.w	r3, [r8]
 8007858:	461c      	mov	r4, r3
 800785a:	bb5c      	cbnz	r4, 80078b4 <_malloc_r+0x90>
 800785c:	4629      	mov	r1, r5
 800785e:	4638      	mov	r0, r7
 8007860:	f7ff ffc0 	bl	80077e4 <sbrk_aligned>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	4604      	mov	r4, r0
 8007868:	d155      	bne.n	8007916 <_malloc_r+0xf2>
 800786a:	f8d8 4000 	ldr.w	r4, [r8]
 800786e:	4626      	mov	r6, r4
 8007870:	2e00      	cmp	r6, #0
 8007872:	d145      	bne.n	8007900 <_malloc_r+0xdc>
 8007874:	2c00      	cmp	r4, #0
 8007876:	d048      	beq.n	800790a <_malloc_r+0xe6>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	4631      	mov	r1, r6
 800787c:	4638      	mov	r0, r7
 800787e:	eb04 0903 	add.w	r9, r4, r3
 8007882:	f000 fa6d 	bl	8007d60 <_sbrk_r>
 8007886:	4581      	cmp	r9, r0
 8007888:	d13f      	bne.n	800790a <_malloc_r+0xe6>
 800788a:	6821      	ldr	r1, [r4, #0]
 800788c:	1a6d      	subs	r5, r5, r1
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa7 	bl	80077e4 <sbrk_aligned>
 8007896:	3001      	adds	r0, #1
 8007898:	d037      	beq.n	800790a <_malloc_r+0xe6>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	442b      	add	r3, r5
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	f8d8 3000 	ldr.w	r3, [r8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d038      	beq.n	800791a <_malloc_r+0xf6>
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	42a2      	cmp	r2, r4
 80078ac:	d12b      	bne.n	8007906 <_malloc_r+0xe2>
 80078ae:	2200      	movs	r2, #0
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	e00f      	b.n	80078d4 <_malloc_r+0xb0>
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	1b52      	subs	r2, r2, r5
 80078b8:	d41f      	bmi.n	80078fa <_malloc_r+0xd6>
 80078ba:	2a0b      	cmp	r2, #11
 80078bc:	d917      	bls.n	80078ee <_malloc_r+0xca>
 80078be:	1961      	adds	r1, r4, r5
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	6025      	str	r5, [r4, #0]
 80078c4:	bf18      	it	ne
 80078c6:	6059      	strne	r1, [r3, #4]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	bf08      	it	eq
 80078cc:	f8c8 1000 	streq.w	r1, [r8]
 80078d0:	5162      	str	r2, [r4, r5]
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	4638      	mov	r0, r7
 80078d6:	f104 060b 	add.w	r6, r4, #11
 80078da:	f000 f829 	bl	8007930 <__malloc_unlock>
 80078de:	f026 0607 	bic.w	r6, r6, #7
 80078e2:	1d23      	adds	r3, r4, #4
 80078e4:	1af2      	subs	r2, r6, r3
 80078e6:	d0ae      	beq.n	8007846 <_malloc_r+0x22>
 80078e8:	1b9b      	subs	r3, r3, r6
 80078ea:	50a3      	str	r3, [r4, r2]
 80078ec:	e7ab      	b.n	8007846 <_malloc_r+0x22>
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	6862      	ldr	r2, [r4, #4]
 80078f2:	d1dd      	bne.n	80078b0 <_malloc_r+0x8c>
 80078f4:	f8c8 2000 	str.w	r2, [r8]
 80078f8:	e7ec      	b.n	80078d4 <_malloc_r+0xb0>
 80078fa:	4623      	mov	r3, r4
 80078fc:	6864      	ldr	r4, [r4, #4]
 80078fe:	e7ac      	b.n	800785a <_malloc_r+0x36>
 8007900:	4634      	mov	r4, r6
 8007902:	6876      	ldr	r6, [r6, #4]
 8007904:	e7b4      	b.n	8007870 <_malloc_r+0x4c>
 8007906:	4613      	mov	r3, r2
 8007908:	e7cc      	b.n	80078a4 <_malloc_r+0x80>
 800790a:	230c      	movs	r3, #12
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	4638      	mov	r0, r7
 8007910:	f000 f80e 	bl	8007930 <__malloc_unlock>
 8007914:	e797      	b.n	8007846 <_malloc_r+0x22>
 8007916:	6025      	str	r5, [r4, #0]
 8007918:	e7dc      	b.n	80078d4 <_malloc_r+0xb0>
 800791a:	605b      	str	r3, [r3, #4]
 800791c:	deff      	udf	#255	; 0xff
 800791e:	bf00      	nop
 8007920:	2000033c 	.word	0x2000033c

08007924 <__malloc_lock>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__malloc_lock+0x8>)
 8007926:	f000 ba68 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 800792a:	bf00      	nop
 800792c:	20000484 	.word	0x20000484

08007930 <__malloc_unlock>:
 8007930:	4801      	ldr	r0, [pc, #4]	; (8007938 <__malloc_unlock+0x8>)
 8007932:	f000 ba63 	b.w	8007dfc <__retarget_lock_release_recursive>
 8007936:	bf00      	nop
 8007938:	20000484 	.word	0x20000484

0800793c <_strtol_l.constprop.0>:
 800793c:	2b01      	cmp	r3, #1
 800793e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007942:	d001      	beq.n	8007948 <_strtol_l.constprop.0+0xc>
 8007944:	2b24      	cmp	r3, #36	; 0x24
 8007946:	d906      	bls.n	8007956 <_strtol_l.constprop.0+0x1a>
 8007948:	f000 fa2c 	bl	8007da4 <__errno>
 800794c:	2316      	movs	r3, #22
 800794e:	6003      	str	r3, [r0, #0]
 8007950:	2000      	movs	r0, #0
 8007952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007956:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a3c <_strtol_l.constprop.0+0x100>
 800795a:	460d      	mov	r5, r1
 800795c:	462e      	mov	r6, r5
 800795e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007962:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007966:	f017 0708 	ands.w	r7, r7, #8
 800796a:	d1f7      	bne.n	800795c <_strtol_l.constprop.0+0x20>
 800796c:	2c2d      	cmp	r4, #45	; 0x2d
 800796e:	d132      	bne.n	80079d6 <_strtol_l.constprop.0+0x9a>
 8007970:	782c      	ldrb	r4, [r5, #0]
 8007972:	2701      	movs	r7, #1
 8007974:	1cb5      	adds	r5, r6, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d05b      	beq.n	8007a32 <_strtol_l.constprop.0+0xf6>
 800797a:	2b10      	cmp	r3, #16
 800797c:	d109      	bne.n	8007992 <_strtol_l.constprop.0+0x56>
 800797e:	2c30      	cmp	r4, #48	; 0x30
 8007980:	d107      	bne.n	8007992 <_strtol_l.constprop.0+0x56>
 8007982:	782c      	ldrb	r4, [r5, #0]
 8007984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007988:	2c58      	cmp	r4, #88	; 0x58
 800798a:	d14d      	bne.n	8007a28 <_strtol_l.constprop.0+0xec>
 800798c:	786c      	ldrb	r4, [r5, #1]
 800798e:	2310      	movs	r3, #16
 8007990:	3502      	adds	r5, #2
 8007992:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007996:	f108 38ff 	add.w	r8, r8, #4294967295
 800799a:	f04f 0e00 	mov.w	lr, #0
 800799e:	fbb8 f9f3 	udiv	r9, r8, r3
 80079a2:	4676      	mov	r6, lr
 80079a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80079a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079ac:	f1bc 0f09 	cmp.w	ip, #9
 80079b0:	d816      	bhi.n	80079e0 <_strtol_l.constprop.0+0xa4>
 80079b2:	4664      	mov	r4, ip
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	dd24      	ble.n	8007a02 <_strtol_l.constprop.0+0xc6>
 80079b8:	f1be 3fff 	cmp.w	lr, #4294967295
 80079bc:	d008      	beq.n	80079d0 <_strtol_l.constprop.0+0x94>
 80079be:	45b1      	cmp	r9, r6
 80079c0:	d31c      	bcc.n	80079fc <_strtol_l.constprop.0+0xc0>
 80079c2:	d101      	bne.n	80079c8 <_strtol_l.constprop.0+0x8c>
 80079c4:	45a2      	cmp	sl, r4
 80079c6:	db19      	blt.n	80079fc <_strtol_l.constprop.0+0xc0>
 80079c8:	fb06 4603 	mla	r6, r6, r3, r4
 80079cc:	f04f 0e01 	mov.w	lr, #1
 80079d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079d4:	e7e8      	b.n	80079a8 <_strtol_l.constprop.0+0x6c>
 80079d6:	2c2b      	cmp	r4, #43	; 0x2b
 80079d8:	bf04      	itt	eq
 80079da:	782c      	ldrbeq	r4, [r5, #0]
 80079dc:	1cb5      	addeq	r5, r6, #2
 80079de:	e7ca      	b.n	8007976 <_strtol_l.constprop.0+0x3a>
 80079e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079e4:	f1bc 0f19 	cmp.w	ip, #25
 80079e8:	d801      	bhi.n	80079ee <_strtol_l.constprop.0+0xb2>
 80079ea:	3c37      	subs	r4, #55	; 0x37
 80079ec:	e7e2      	b.n	80079b4 <_strtol_l.constprop.0+0x78>
 80079ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80079f2:	f1bc 0f19 	cmp.w	ip, #25
 80079f6:	d804      	bhi.n	8007a02 <_strtol_l.constprop.0+0xc6>
 80079f8:	3c57      	subs	r4, #87	; 0x57
 80079fa:	e7db      	b.n	80079b4 <_strtol_l.constprop.0+0x78>
 80079fc:	f04f 3eff 	mov.w	lr, #4294967295
 8007a00:	e7e6      	b.n	80079d0 <_strtol_l.constprop.0+0x94>
 8007a02:	f1be 3fff 	cmp.w	lr, #4294967295
 8007a06:	d105      	bne.n	8007a14 <_strtol_l.constprop.0+0xd8>
 8007a08:	2322      	movs	r3, #34	; 0x22
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	4646      	mov	r6, r8
 8007a0e:	b942      	cbnz	r2, 8007a22 <_strtol_l.constprop.0+0xe6>
 8007a10:	4630      	mov	r0, r6
 8007a12:	e79e      	b.n	8007952 <_strtol_l.constprop.0+0x16>
 8007a14:	b107      	cbz	r7, 8007a18 <_strtol_l.constprop.0+0xdc>
 8007a16:	4276      	negs	r6, r6
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	d0f9      	beq.n	8007a10 <_strtol_l.constprop.0+0xd4>
 8007a1c:	f1be 0f00 	cmp.w	lr, #0
 8007a20:	d000      	beq.n	8007a24 <_strtol_l.constprop.0+0xe8>
 8007a22:	1e69      	subs	r1, r5, #1
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	e7f3      	b.n	8007a10 <_strtol_l.constprop.0+0xd4>
 8007a28:	2430      	movs	r4, #48	; 0x30
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1b1      	bne.n	8007992 <_strtol_l.constprop.0+0x56>
 8007a2e:	2308      	movs	r3, #8
 8007a30:	e7af      	b.n	8007992 <_strtol_l.constprop.0+0x56>
 8007a32:	2c30      	cmp	r4, #48	; 0x30
 8007a34:	d0a5      	beq.n	8007982 <_strtol_l.constprop.0+0x46>
 8007a36:	230a      	movs	r3, #10
 8007a38:	e7ab      	b.n	8007992 <_strtol_l.constprop.0+0x56>
 8007a3a:	bf00      	nop
 8007a3c:	0800a389 	.word	0x0800a389

08007a40 <strtol>:
 8007a40:	4613      	mov	r3, r2
 8007a42:	460a      	mov	r2, r1
 8007a44:	4601      	mov	r1, r0
 8007a46:	4802      	ldr	r0, [pc, #8]	; (8007a50 <strtol+0x10>)
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	f7ff bf77 	b.w	800793c <_strtol_l.constprop.0>
 8007a4e:	bf00      	nop
 8007a50:	200000b0 	.word	0x200000b0

08007a54 <gcvt>:
 8007a54:	b530      	push	{r4, r5, lr}
 8007a56:	2200      	movs	r2, #0
 8007a58:	b085      	sub	sp, #20
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a68:	f7f9 f858 	bl	8000b1c <__aeabi_dcmplt>
 8007a6c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007a70:	4622      	mov	r2, r4
 8007a72:	b118      	cbz	r0, 8007a7c <gcvt+0x28>
 8007a74:	232d      	movs	r3, #45	; 0x2d
 8007a76:	f802 3b01 	strb.w	r3, [r2], #1
 8007a7a:	3d01      	subs	r5, #1
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4806      	ldr	r0, [pc, #24]	; (8007a98 <gcvt+0x44>)
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	4629      	mov	r1, r5
 8007a84:	2367      	movs	r3, #103	; 0x67
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	f000 fa7e 	bl	8007f88 <_gcvt>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	bf14      	ite	ne
 8007a90:	4620      	movne	r0, r4
 8007a92:	2000      	moveq	r0, #0
 8007a94:	b005      	add	sp, #20
 8007a96:	bd30      	pop	{r4, r5, pc}
 8007a98:	200000b0 	.word	0x200000b0

08007a9c <std>:
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aaa:	6083      	str	r3, [r0, #8]
 8007aac:	8181      	strh	r1, [r0, #12]
 8007aae:	6643      	str	r3, [r0, #100]	; 0x64
 8007ab0:	81c2      	strh	r2, [r0, #14]
 8007ab2:	6183      	str	r3, [r0, #24]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	305c      	adds	r0, #92	; 0x5c
 8007aba:	f000 f914 	bl	8007ce6 <memset>
 8007abe:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <std+0x58>)
 8007ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <std+0x5c>)
 8007ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <std+0x60>)
 8007ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007aca:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <std+0x64>)
 8007acc:	6323      	str	r3, [r4, #48]	; 0x30
 8007ace:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <std+0x68>)
 8007ad0:	6224      	str	r4, [r4, #32]
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	d006      	beq.n	8007ae4 <std+0x48>
 8007ad6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ada:	4294      	cmp	r4, r2
 8007adc:	d002      	beq.n	8007ae4 <std+0x48>
 8007ade:	33d0      	adds	r3, #208	; 0xd0
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	d105      	bne.n	8007af0 <std+0x54>
 8007ae4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aec:	f000 b984 	b.w	8007df8 <__retarget_lock_init_recursive>
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	bf00      	nop
 8007af4:	08007c61 	.word	0x08007c61
 8007af8:	08007c83 	.word	0x08007c83
 8007afc:	08007cbb 	.word	0x08007cbb
 8007b00:	08007cdf 	.word	0x08007cdf
 8007b04:	20000344 	.word	0x20000344

08007b08 <stdio_exit_handler>:
 8007b08:	4a02      	ldr	r2, [pc, #8]	; (8007b14 <stdio_exit_handler+0xc>)
 8007b0a:	4903      	ldr	r1, [pc, #12]	; (8007b18 <stdio_exit_handler+0x10>)
 8007b0c:	4803      	ldr	r0, [pc, #12]	; (8007b1c <stdio_exit_handler+0x14>)
 8007b0e:	f000 b869 	b.w	8007be4 <_fwalk_sglue>
 8007b12:	bf00      	nop
 8007b14:	20000058 	.word	0x20000058
 8007b18:	080087e5 	.word	0x080087e5
 8007b1c:	20000064 	.word	0x20000064

08007b20 <cleanup_stdio>:
 8007b20:	6841      	ldr	r1, [r0, #4]
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <cleanup_stdio+0x34>)
 8007b24:	4299      	cmp	r1, r3
 8007b26:	b510      	push	{r4, lr}
 8007b28:	4604      	mov	r4, r0
 8007b2a:	d001      	beq.n	8007b30 <cleanup_stdio+0x10>
 8007b2c:	f000 fe5a 	bl	80087e4 <_fflush_r>
 8007b30:	68a1      	ldr	r1, [r4, #8]
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <cleanup_stdio+0x38>)
 8007b34:	4299      	cmp	r1, r3
 8007b36:	d002      	beq.n	8007b3e <cleanup_stdio+0x1e>
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fe53 	bl	80087e4 <_fflush_r>
 8007b3e:	68e1      	ldr	r1, [r4, #12]
 8007b40:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <cleanup_stdio+0x3c>)
 8007b42:	4299      	cmp	r1, r3
 8007b44:	d004      	beq.n	8007b50 <cleanup_stdio+0x30>
 8007b46:	4620      	mov	r0, r4
 8007b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b4c:	f000 be4a 	b.w	80087e4 <_fflush_r>
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	bf00      	nop
 8007b54:	20000344 	.word	0x20000344
 8007b58:	200003ac 	.word	0x200003ac
 8007b5c:	20000414 	.word	0x20000414

08007b60 <global_stdio_init.part.0>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <global_stdio_init.part.0+0x30>)
 8007b64:	4c0b      	ldr	r4, [pc, #44]	; (8007b94 <global_stdio_init.part.0+0x34>)
 8007b66:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <global_stdio_init.part.0+0x38>)
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2104      	movs	r1, #4
 8007b70:	f7ff ff94 	bl	8007a9c <std>
 8007b74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b78:	2201      	movs	r2, #1
 8007b7a:	2109      	movs	r1, #9
 8007b7c:	f7ff ff8e 	bl	8007a9c <std>
 8007b80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b84:	2202      	movs	r2, #2
 8007b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8a:	2112      	movs	r1, #18
 8007b8c:	f7ff bf86 	b.w	8007a9c <std>
 8007b90:	2000047c 	.word	0x2000047c
 8007b94:	20000344 	.word	0x20000344
 8007b98:	08007b09 	.word	0x08007b09

08007b9c <__sfp_lock_acquire>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sfp_lock_acquire+0x8>)
 8007b9e:	f000 b92c 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20000485 	.word	0x20000485

08007ba8 <__sfp_lock_release>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	; (8007bb0 <__sfp_lock_release+0x8>)
 8007baa:	f000 b927 	b.w	8007dfc <__retarget_lock_release_recursive>
 8007bae:	bf00      	nop
 8007bb0:	20000485 	.word	0x20000485

08007bb4 <__sinit>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	f7ff fff0 	bl	8007b9c <__sfp_lock_acquire>
 8007bbc:	6a23      	ldr	r3, [r4, #32]
 8007bbe:	b11b      	cbz	r3, 8007bc8 <__sinit+0x14>
 8007bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc4:	f7ff bff0 	b.w	8007ba8 <__sfp_lock_release>
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <__sinit+0x28>)
 8007bca:	6223      	str	r3, [r4, #32]
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <__sinit+0x2c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f5      	bne.n	8007bc0 <__sinit+0xc>
 8007bd4:	f7ff ffc4 	bl	8007b60 <global_stdio_init.part.0>
 8007bd8:	e7f2      	b.n	8007bc0 <__sinit+0xc>
 8007bda:	bf00      	nop
 8007bdc:	08007b21 	.word	0x08007b21
 8007be0:	2000047c 	.word	0x2000047c

08007be4 <_fwalk_sglue>:
 8007be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	4607      	mov	r7, r0
 8007bea:	4688      	mov	r8, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	2600      	movs	r6, #0
 8007bf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf4:	f1b9 0901 	subs.w	r9, r9, #1
 8007bf8:	d505      	bpl.n	8007c06 <_fwalk_sglue+0x22>
 8007bfa:	6824      	ldr	r4, [r4, #0]
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d1f7      	bne.n	8007bf0 <_fwalk_sglue+0xc>
 8007c00:	4630      	mov	r0, r6
 8007c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d907      	bls.n	8007c1c <_fwalk_sglue+0x38>
 8007c0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c10:	3301      	adds	r3, #1
 8007c12:	d003      	beq.n	8007c1c <_fwalk_sglue+0x38>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	4306      	orrs	r6, r0
 8007c1c:	3568      	adds	r5, #104	; 0x68
 8007c1e:	e7e9      	b.n	8007bf4 <_fwalk_sglue+0x10>

08007c20 <siprintf>:
 8007c20:	b40e      	push	{r1, r2, r3}
 8007c22:	b500      	push	{lr}
 8007c24:	b09c      	sub	sp, #112	; 0x70
 8007c26:	ab1d      	add	r3, sp, #116	; 0x74
 8007c28:	9002      	str	r0, [sp, #8]
 8007c2a:	9006      	str	r0, [sp, #24]
 8007c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c30:	4809      	ldr	r0, [pc, #36]	; (8007c58 <siprintf+0x38>)
 8007c32:	9107      	str	r1, [sp, #28]
 8007c34:	9104      	str	r1, [sp, #16]
 8007c36:	4909      	ldr	r1, [pc, #36]	; (8007c5c <siprintf+0x3c>)
 8007c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	a902      	add	r1, sp, #8
 8007c44:	f000 faba 	bl	80081bc <_svfiprintf_r>
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	b01c      	add	sp, #112	; 0x70
 8007c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c54:	b003      	add	sp, #12
 8007c56:	4770      	bx	lr
 8007c58:	200000b0 	.word	0x200000b0
 8007c5c:	ffff0208 	.word	0xffff0208

08007c60 <__sread>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	460c      	mov	r4, r1
 8007c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c68:	f000 f868 	bl	8007d3c <_read_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	bfab      	itete	ge
 8007c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c72:	89a3      	ldrhlt	r3, [r4, #12]
 8007c74:	181b      	addge	r3, r3, r0
 8007c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c7a:	bfac      	ite	ge
 8007c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c7e:	81a3      	strhlt	r3, [r4, #12]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <__swrite>:
 8007c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c86:	461f      	mov	r7, r3
 8007c88:	898b      	ldrh	r3, [r1, #12]
 8007c8a:	05db      	lsls	r3, r3, #23
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4616      	mov	r6, r2
 8007c92:	d505      	bpl.n	8007ca0 <__swrite+0x1e>
 8007c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f000 f83c 	bl	8007d18 <_lseek_r>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb6:	f000 b863 	b.w	8007d80 <_write_r>

08007cba <__sseek>:
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc2:	f000 f829 	bl	8007d18 <_lseek_r>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	bf15      	itete	ne
 8007ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cd6:	81a3      	strheq	r3, [r4, #12]
 8007cd8:	bf18      	it	ne
 8007cda:	81a3      	strhne	r3, [r4, #12]
 8007cdc:	bd10      	pop	{r4, pc}

08007cde <__sclose>:
 8007cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce2:	f000 b809 	b.w	8007cf8 <_close_r>

08007ce6 <memset>:
 8007ce6:	4402      	add	r2, r0
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d100      	bne.n	8007cf0 <memset+0xa>
 8007cee:	4770      	bx	lr
 8007cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf4:	e7f9      	b.n	8007cea <memset+0x4>
	...

08007cf8 <_close_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	; (8007d14 <_close_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7fa fa4b 	bl	800219e <_close>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_close_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_close_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20000480 	.word	0x20000480

08007d18 <_lseek_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d07      	ldr	r5, [pc, #28]	; (8007d38 <_lseek_r+0x20>)
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4611      	mov	r1, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f7fa fa60 	bl	80021ec <_lseek>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_lseek_r+0x1e>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_lseek_r+0x1e>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20000480 	.word	0x20000480

08007d3c <_read_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d07      	ldr	r5, [pc, #28]	; (8007d5c <_read_r+0x20>)
 8007d40:	4604      	mov	r4, r0
 8007d42:	4608      	mov	r0, r1
 8007d44:	4611      	mov	r1, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	602a      	str	r2, [r5, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f7fa f9ee 	bl	800212c <_read>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_read_r+0x1e>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_read_r+0x1e>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20000480 	.word	0x20000480

08007d60 <_sbrk_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_sbrk_r+0x1c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7fa fa4c 	bl	8002208 <_sbrk>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_sbrk_r+0x1a>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_sbrk_r+0x1a>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20000480 	.word	0x20000480

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	; (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7fa f9e9 	bl	8002166 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20000480 	.word	0x20000480

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	; (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200000b0 	.word	0x200000b0

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	; (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	; (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	; (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	; (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f002 faa2 	bl	800a30c <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	0800a6e8 	.word	0x0800a6e8
 8007dec:	0800a6e8 	.word	0x0800a6e8
 8007df0:	0800a6e8 	.word	0x0800a6e8
 8007df4:	0800a6ec 	.word	0x0800a6ec

08007df8 <__retarget_lock_init_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <__retarget_lock_acquire_recursive>:
 8007dfa:	4770      	bx	lr

08007dfc <__retarget_lock_release_recursive>:
 8007dfc:	4770      	bx	lr
	...

08007e00 <_free_r>:
 8007e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d044      	beq.n	8007e90 <_free_r+0x90>
 8007e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0a:	9001      	str	r0, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e12:	bfb8      	it	lt
 8007e14:	18e4      	addlt	r4, r4, r3
 8007e16:	f7ff fd85 	bl	8007924 <__malloc_lock>
 8007e1a:	4a1e      	ldr	r2, [pc, #120]	; (8007e94 <_free_r+0x94>)
 8007e1c:	9801      	ldr	r0, [sp, #4]
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	b933      	cbnz	r3, 8007e30 <_free_r+0x30>
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	6014      	str	r4, [r2, #0]
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e2c:	f7ff bd80 	b.w	8007930 <__malloc_unlock>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d908      	bls.n	8007e46 <_free_r+0x46>
 8007e34:	6825      	ldr	r5, [r4, #0]
 8007e36:	1961      	adds	r1, r4, r5
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	bf01      	itttt	eq
 8007e3c:	6819      	ldreq	r1, [r3, #0]
 8007e3e:	685b      	ldreq	r3, [r3, #4]
 8007e40:	1949      	addeq	r1, r1, r5
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	e7ed      	b.n	8007e22 <_free_r+0x22>
 8007e46:	461a      	mov	r2, r3
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	b10b      	cbz	r3, 8007e50 <_free_r+0x50>
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d9fa      	bls.n	8007e46 <_free_r+0x46>
 8007e50:	6811      	ldr	r1, [r2, #0]
 8007e52:	1855      	adds	r5, r2, r1
 8007e54:	42a5      	cmp	r5, r4
 8007e56:	d10b      	bne.n	8007e70 <_free_r+0x70>
 8007e58:	6824      	ldr	r4, [r4, #0]
 8007e5a:	4421      	add	r1, r4
 8007e5c:	1854      	adds	r4, r2, r1
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	6011      	str	r1, [r2, #0]
 8007e62:	d1e0      	bne.n	8007e26 <_free_r+0x26>
 8007e64:	681c      	ldr	r4, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	6053      	str	r3, [r2, #4]
 8007e6a:	440c      	add	r4, r1
 8007e6c:	6014      	str	r4, [r2, #0]
 8007e6e:	e7da      	b.n	8007e26 <_free_r+0x26>
 8007e70:	d902      	bls.n	8007e78 <_free_r+0x78>
 8007e72:	230c      	movs	r3, #12
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	e7d6      	b.n	8007e26 <_free_r+0x26>
 8007e78:	6825      	ldr	r5, [r4, #0]
 8007e7a:	1961      	adds	r1, r4, r5
 8007e7c:	428b      	cmp	r3, r1
 8007e7e:	bf04      	itt	eq
 8007e80:	6819      	ldreq	r1, [r3, #0]
 8007e82:	685b      	ldreq	r3, [r3, #4]
 8007e84:	6063      	str	r3, [r4, #4]
 8007e86:	bf04      	itt	eq
 8007e88:	1949      	addeq	r1, r1, r5
 8007e8a:	6021      	streq	r1, [r4, #0]
 8007e8c:	6054      	str	r4, [r2, #4]
 8007e8e:	e7ca      	b.n	8007e26 <_free_r+0x26>
 8007e90:	b003      	add	sp, #12
 8007e92:	bd30      	pop	{r4, r5, pc}
 8007e94:	2000033c 	.word	0x2000033c

08007e98 <print_e>:
 8007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	ec43 2b10 	vmov	d0, r2, r3
 8007ea0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007ea2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8007ea6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007ea8:	ab04      	add	r3, sp, #16
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	1c62      	adds	r2, r4, #1
 8007eb2:	ab05      	add	r3, sp, #20
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	f000 fd76 	bl	80089a8 <_dtoa_r>
 8007ebc:	9a05      	ldr	r2, [sp, #20]
 8007ebe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d105      	bne.n	8007ed2 <print_e+0x3a>
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f000 fccd 	bl	8008868 <strcpy>
 8007ece:	b007      	add	sp, #28
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	7801      	ldrb	r1, [r0, #0]
 8007ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	bfc8      	it	gt
 8007ede:	2501      	movgt	r5, #1
 8007ee0:	212e      	movs	r1, #46	; 0x2e
 8007ee2:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8007ee6:	b10f      	cbz	r7, 8007eec <print_e+0x54>
 8007ee8:	2c00      	cmp	r4, #0
 8007eea:	dc37      	bgt.n	8007f5c <print_e+0xc4>
 8007eec:	2e67      	cmp	r6, #103	; 0x67
 8007eee:	d046      	beq.n	8007f7e <print_e+0xe6>
 8007ef0:	2e47      	cmp	r6, #71	; 0x47
 8007ef2:	d046      	beq.n	8007f82 <print_e+0xea>
 8007ef4:	212e      	movs	r1, #46	; 0x2e
 8007ef6:	2030      	movs	r0, #48	; 0x30
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	dc38      	bgt.n	8007f6e <print_e+0xd6>
 8007efc:	1e51      	subs	r1, r2, #1
 8007efe:	2900      	cmp	r1, #0
 8007f00:	bfb8      	it	lt
 8007f02:	f1c2 0201 	rsblt	r2, r2, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	9105      	str	r1, [sp, #20]
 8007f0a:	bfac      	ite	ge
 8007f0c:	222b      	movge	r2, #43	; 0x2b
 8007f0e:	9205      	strlt	r2, [sp, #20]
 8007f10:	f800 6b02 	strb.w	r6, [r0], #2
 8007f14:	bfa8      	it	ge
 8007f16:	705a      	strbge	r2, [r3, #1]
 8007f18:	9a05      	ldr	r2, [sp, #20]
 8007f1a:	bfbc      	itt	lt
 8007f1c:	212d      	movlt	r1, #45	; 0x2d
 8007f1e:	7059      	strblt	r1, [r3, #1]
 8007f20:	2a63      	cmp	r2, #99	; 0x63
 8007f22:	dd0b      	ble.n	8007f3c <print_e+0xa4>
 8007f24:	2164      	movs	r1, #100	; 0x64
 8007f26:	fb92 f1f1 	sdiv	r1, r2, r1
 8007f2a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8007f2e:	1cd8      	adds	r0, r3, #3
 8007f30:	709c      	strb	r4, [r3, #2]
 8007f32:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007f36:	fb03 2201 	mla	r2, r3, r1, r2
 8007f3a:	9205      	str	r2, [sp, #20]
 8007f3c:	9b05      	ldr	r3, [sp, #20]
 8007f3e:	220a      	movs	r2, #10
 8007f40:	fb93 f2f2 	sdiv	r2, r3, r2
 8007f44:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8007f48:	7001      	strb	r1, [r0, #0]
 8007f4a:	f06f 0109 	mvn.w	r1, #9
 8007f4e:	fb01 3302 	mla	r3, r1, r2, r3
 8007f52:	3330      	adds	r3, #48	; 0x30
 8007f54:	7043      	strb	r3, [r0, #1]
 8007f56:	2300      	movs	r3, #0
 8007f58:	7083      	strb	r3, [r0, #2]
 8007f5a:	e7b8      	b.n	8007ece <print_e+0x36>
 8007f5c:	b10d      	cbz	r5, 8007f62 <print_e+0xca>
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	7805      	ldrb	r5, [r0, #0]
 8007f64:	f803 5b01 	strb.w	r5, [r3], #1
 8007f68:	3c01      	subs	r4, #1
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	e7b9      	b.n	8007ee2 <print_e+0x4a>
 8007f6e:	b10d      	cbz	r5, 8007f74 <print_e+0xdc>
 8007f70:	f803 1b01 	strb.w	r1, [r3], #1
 8007f74:	f803 0b01 	strb.w	r0, [r3], #1
 8007f78:	3c01      	subs	r4, #1
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	e7bc      	b.n	8007ef8 <print_e+0x60>
 8007f7e:	2665      	movs	r6, #101	; 0x65
 8007f80:	e7bc      	b.n	8007efc <print_e+0x64>
 8007f82:	2645      	movs	r6, #69	; 0x45
 8007f84:	e7ba      	b.n	8007efc <print_e+0x64>
	...

08007f88 <_gcvt>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	ec55 4b10 	vmov	r4, r5, d0
 8007f90:	b088      	sub	sp, #32
 8007f92:	4681      	mov	r9, r0
 8007f94:	4688      	mov	r8, r1
 8007f96:	4616      	mov	r6, r2
 8007f98:	469a      	mov	sl, r3
 8007f9a:	ee10 0a10 	vmov	r0, s0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007fa6:	f7f8 fdb9 	bl	8000b1c <__aeabi_dcmplt>
 8007faa:	b110      	cbz	r0, 8007fb2 <_gcvt+0x2a>
 8007fac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	f7f8 fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8007fbe:	b138      	cbz	r0, 8007fd0 <_gcvt+0x48>
 8007fc0:	2330      	movs	r3, #48	; 0x30
 8007fc2:	7033      	strb	r3, [r6, #0]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	7073      	strb	r3, [r6, #1]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	b008      	add	sp, #32
 8007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd0:	a34b      	add	r3, pc, #300	; (adr r3, 8008100 <_gcvt+0x178>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 fda9 	bl	8000b30 <__aeabi_dcmple>
 8007fde:	b158      	cbz	r0, 8007ff8 <_gcvt+0x70>
 8007fe0:	f108 33ff 	add.w	r3, r8, #4294967295
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	e9cd a701 	strd	sl, r7, [sp, #4]
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4648      	mov	r0, r9
 8007ff2:	f7ff ff51 	bl	8007e98 <print_e>
 8007ff6:	e7e7      	b.n	8007fc8 <_gcvt+0x40>
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	f001 fe43 	bl	8009c84 <_mprec_log10>
 8007ffe:	4622      	mov	r2, r4
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	462b      	mov	r3, r5
 8008006:	f7f8 fd93 	bl	8000b30 <__aeabi_dcmple>
 800800a:	2800      	cmp	r0, #0
 800800c:	d1e8      	bne.n	8007fe0 <_gcvt+0x58>
 800800e:	ab07      	add	r3, sp, #28
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	ab06      	add	r3, sp, #24
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	4642      	mov	r2, r8
 8008018:	ab05      	add	r3, sp, #20
 800801a:	ec45 4b10 	vmov	d0, r4, r5
 800801e:	2102      	movs	r1, #2
 8008020:	4648      	mov	r0, r9
 8008022:	f000 fcc1 	bl	80089a8 <_dtoa_r>
 8008026:	9a05      	ldr	r2, [sp, #20]
 8008028:	f242 730f 	movw	r3, #9999	; 0x270f
 800802c:	429a      	cmp	r2, r3
 800802e:	d00e      	beq.n	800804e <_gcvt+0xc6>
 8008030:	4633      	mov	r3, r6
 8008032:	44b0      	add	r8, r6
 8008034:	4605      	mov	r5, r0
 8008036:	f810 1b01 	ldrb.w	r1, [r0], #1
 800803a:	9c05      	ldr	r4, [sp, #20]
 800803c:	eba8 0203 	sub.w	r2, r8, r3
 8008040:	b109      	cbz	r1, 8008046 <_gcvt+0xbe>
 8008042:	2c00      	cmp	r4, #0
 8008044:	dc08      	bgt.n	8008058 <_gcvt+0xd0>
 8008046:	2100      	movs	r1, #0
 8008048:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800804c:	e00d      	b.n	800806a <_gcvt+0xe2>
 800804e:	4601      	mov	r1, r0
 8008050:	4630      	mov	r0, r6
 8008052:	f000 fc09 	bl	8008868 <strcpy>
 8008056:	e7b7      	b.n	8007fc8 <_gcvt+0x40>
 8008058:	3c01      	subs	r4, #1
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	9405      	str	r4, [sp, #20]
 8008060:	e7e8      	b.n	8008034 <_gcvt+0xac>
 8008062:	f803 cb01 	strb.w	ip, [r3], #1
 8008066:	3a01      	subs	r2, #1
 8008068:	2101      	movs	r1, #1
 800806a:	2c00      	cmp	r4, #0
 800806c:	4620      	mov	r0, r4
 800806e:	dc2a      	bgt.n	80080c6 <_gcvt+0x13e>
 8008070:	b101      	cbz	r1, 8008074 <_gcvt+0xec>
 8008072:	9405      	str	r4, [sp, #20]
 8008074:	b90f      	cbnz	r7, 800807a <_gcvt+0xf2>
 8008076:	7829      	ldrb	r1, [r5, #0]
 8008078:	b311      	cbz	r1, 80080c0 <_gcvt+0x138>
 800807a:	42b3      	cmp	r3, r6
 800807c:	bf04      	itt	eq
 800807e:	2130      	moveq	r1, #48	; 0x30
 8008080:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008084:	212e      	movs	r1, #46	; 0x2e
 8008086:	7019      	strb	r1, [r3, #0]
 8008088:	9905      	ldr	r1, [sp, #20]
 800808a:	4618      	mov	r0, r3
 800808c:	2400      	movs	r4, #0
 800808e:	eba1 0c03 	sub.w	ip, r1, r3
 8008092:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008096:	eb1c 0f00 	cmn.w	ip, r0
 800809a:	d41c      	bmi.n	80080d6 <_gcvt+0x14e>
 800809c:	2900      	cmp	r1, #0
 800809e:	f1c1 0000 	rsb	r0, r1, #0
 80080a2:	bfc8      	it	gt
 80080a4:	2000      	movgt	r0, #0
 80080a6:	f100 0c01 	add.w	ip, r0, #1
 80080aa:	4463      	add	r3, ip
 80080ac:	4401      	add	r1, r0
 80080ae:	b104      	cbz	r4, 80080b2 <_gcvt+0x12a>
 80080b0:	9105      	str	r1, [sp, #20]
 80080b2:	1e69      	subs	r1, r5, #1
 80080b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080b8:	b108      	cbz	r0, 80080be <_gcvt+0x136>
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	dc0f      	bgt.n	80080de <_gcvt+0x156>
 80080be:	b9df      	cbnz	r7, 80080f8 <_gcvt+0x170>
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e780      	b.n	8007fc8 <_gcvt+0x40>
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80080cc:	dcc9      	bgt.n	8008062 <_gcvt+0xda>
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d0d0      	beq.n	8008074 <_gcvt+0xec>
 80080d2:	9005      	str	r0, [sp, #20]
 80080d4:	e7ce      	b.n	8008074 <_gcvt+0xec>
 80080d6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80080da:	2401      	movs	r4, #1
 80080dc:	e7db      	b.n	8008096 <_gcvt+0x10e>
 80080de:	f803 0b01 	strb.w	r0, [r3], #1
 80080e2:	3a01      	subs	r2, #1
 80080e4:	e7e6      	b.n	80080b4 <_gcvt+0x12c>
 80080e6:	f801 5b01 	strb.w	r5, [r1], #1
 80080ea:	1a60      	subs	r0, r4, r1
 80080ec:	2800      	cmp	r0, #0
 80080ee:	dcfa      	bgt.n	80080e6 <_gcvt+0x15e>
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	bfa8      	it	ge
 80080f4:	189b      	addge	r3, r3, r2
 80080f6:	e7e3      	b.n	80080c0 <_gcvt+0x138>
 80080f8:	4619      	mov	r1, r3
 80080fa:	189c      	adds	r4, r3, r2
 80080fc:	2530      	movs	r5, #48	; 0x30
 80080fe:	e7f4      	b.n	80080ea <_gcvt+0x162>
 8008100:	eb1c432d 	.word	0xeb1c432d
 8008104:	3f1a36e2 	.word	0x3f1a36e2

08008108 <__ssputs_r>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	688e      	ldr	r6, [r1, #8]
 800810e:	461f      	mov	r7, r3
 8008110:	42be      	cmp	r6, r7
 8008112:	680b      	ldr	r3, [r1, #0]
 8008114:	4682      	mov	sl, r0
 8008116:	460c      	mov	r4, r1
 8008118:	4690      	mov	r8, r2
 800811a:	d82c      	bhi.n	8008176 <__ssputs_r+0x6e>
 800811c:	898a      	ldrh	r2, [r1, #12]
 800811e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008122:	d026      	beq.n	8008172 <__ssputs_r+0x6a>
 8008124:	6965      	ldr	r5, [r4, #20]
 8008126:	6909      	ldr	r1, [r1, #16]
 8008128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800812c:	eba3 0901 	sub.w	r9, r3, r1
 8008130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008134:	1c7b      	adds	r3, r7, #1
 8008136:	444b      	add	r3, r9
 8008138:	106d      	asrs	r5, r5, #1
 800813a:	429d      	cmp	r5, r3
 800813c:	bf38      	it	cc
 800813e:	461d      	movcc	r5, r3
 8008140:	0553      	lsls	r3, r2, #21
 8008142:	d527      	bpl.n	8008194 <__ssputs_r+0x8c>
 8008144:	4629      	mov	r1, r5
 8008146:	f7ff fb6d 	bl	8007824 <_malloc_r>
 800814a:	4606      	mov	r6, r0
 800814c:	b360      	cbz	r0, 80081a8 <__ssputs_r+0xa0>
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	464a      	mov	r2, r9
 8008152:	f000 fb91 	bl	8008878 <memcpy>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800815c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	6126      	str	r6, [r4, #16]
 8008164:	6165      	str	r5, [r4, #20]
 8008166:	444e      	add	r6, r9
 8008168:	eba5 0509 	sub.w	r5, r5, r9
 800816c:	6026      	str	r6, [r4, #0]
 800816e:	60a5      	str	r5, [r4, #8]
 8008170:	463e      	mov	r6, r7
 8008172:	42be      	cmp	r6, r7
 8008174:	d900      	bls.n	8008178 <__ssputs_r+0x70>
 8008176:	463e      	mov	r6, r7
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	4632      	mov	r2, r6
 800817c:	4641      	mov	r1, r8
 800817e:	f000 fb59 	bl	8008834 <memmove>
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	4433      	add	r3, r6
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	2000      	movs	r0, #0
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	462a      	mov	r2, r5
 8008196:	f001 fd93 	bl	8009cc0 <_realloc_r>
 800819a:	4606      	mov	r6, r0
 800819c:	2800      	cmp	r0, #0
 800819e:	d1e0      	bne.n	8008162 <__ssputs_r+0x5a>
 80081a0:	6921      	ldr	r1, [r4, #16]
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7ff fe2c 	bl	8007e00 <_free_r>
 80081a8:	230c      	movs	r3, #12
 80081aa:	f8ca 3000 	str.w	r3, [sl]
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	e7e9      	b.n	8008190 <__ssputs_r+0x88>

080081bc <_svfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4698      	mov	r8, r3
 80081c2:	898b      	ldrh	r3, [r1, #12]
 80081c4:	061b      	lsls	r3, r3, #24
 80081c6:	b09d      	sub	sp, #116	; 0x74
 80081c8:	4607      	mov	r7, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	d50e      	bpl.n	80081ee <_svfiprintf_r+0x32>
 80081d0:	690b      	ldr	r3, [r1, #16]
 80081d2:	b963      	cbnz	r3, 80081ee <_svfiprintf_r+0x32>
 80081d4:	2140      	movs	r1, #64	; 0x40
 80081d6:	f7ff fb25 	bl	8007824 <_malloc_r>
 80081da:	6028      	str	r0, [r5, #0]
 80081dc:	6128      	str	r0, [r5, #16]
 80081de:	b920      	cbnz	r0, 80081ea <_svfiprintf_r+0x2e>
 80081e0:	230c      	movs	r3, #12
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	e0d0      	b.n	800838c <_svfiprintf_r+0x1d0>
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	616b      	str	r3, [r5, #20]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9309      	str	r3, [sp, #36]	; 0x24
 80081f2:	2320      	movs	r3, #32
 80081f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081fc:	2330      	movs	r3, #48	; 0x30
 80081fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083a4 <_svfiprintf_r+0x1e8>
 8008202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008206:	f04f 0901 	mov.w	r9, #1
 800820a:	4623      	mov	r3, r4
 800820c:	469a      	mov	sl, r3
 800820e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008212:	b10a      	cbz	r2, 8008218 <_svfiprintf_r+0x5c>
 8008214:	2a25      	cmp	r2, #37	; 0x25
 8008216:	d1f9      	bne.n	800820c <_svfiprintf_r+0x50>
 8008218:	ebba 0b04 	subs.w	fp, sl, r4
 800821c:	d00b      	beq.n	8008236 <_svfiprintf_r+0x7a>
 800821e:	465b      	mov	r3, fp
 8008220:	4622      	mov	r2, r4
 8008222:	4629      	mov	r1, r5
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff ff6f 	bl	8008108 <__ssputs_r>
 800822a:	3001      	adds	r0, #1
 800822c:	f000 80a9 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008232:	445a      	add	r2, fp
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	f89a 3000 	ldrb.w	r3, [sl]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80a1 	beq.w	8008382 <_svfiprintf_r+0x1c6>
 8008240:	2300      	movs	r3, #0
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824a:	f10a 0a01 	add.w	sl, sl, #1
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	9307      	str	r3, [sp, #28]
 8008252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008256:	931a      	str	r3, [sp, #104]	; 0x68
 8008258:	4654      	mov	r4, sl
 800825a:	2205      	movs	r2, #5
 800825c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008260:	4850      	ldr	r0, [pc, #320]	; (80083a4 <_svfiprintf_r+0x1e8>)
 8008262:	f7f7 ffdd 	bl	8000220 <memchr>
 8008266:	9a04      	ldr	r2, [sp, #16]
 8008268:	b9d8      	cbnz	r0, 80082a2 <_svfiprintf_r+0xe6>
 800826a:	06d0      	lsls	r0, r2, #27
 800826c:	bf44      	itt	mi
 800826e:	2320      	movmi	r3, #32
 8008270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008274:	0711      	lsls	r1, r2, #28
 8008276:	bf44      	itt	mi
 8008278:	232b      	movmi	r3, #43	; 0x2b
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827e:	f89a 3000 	ldrb.w	r3, [sl]
 8008282:	2b2a      	cmp	r3, #42	; 0x2a
 8008284:	d015      	beq.n	80082b2 <_svfiprintf_r+0xf6>
 8008286:	9a07      	ldr	r2, [sp, #28]
 8008288:	4654      	mov	r4, sl
 800828a:	2000      	movs	r0, #0
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	4621      	mov	r1, r4
 8008292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008296:	3b30      	subs	r3, #48	; 0x30
 8008298:	2b09      	cmp	r3, #9
 800829a:	d94d      	bls.n	8008338 <_svfiprintf_r+0x17c>
 800829c:	b1b0      	cbz	r0, 80082cc <_svfiprintf_r+0x110>
 800829e:	9207      	str	r2, [sp, #28]
 80082a0:	e014      	b.n	80082cc <_svfiprintf_r+0x110>
 80082a2:	eba0 0308 	sub.w	r3, r0, r8
 80082a6:	fa09 f303 	lsl.w	r3, r9, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	46a2      	mov	sl, r4
 80082b0:	e7d2      	b.n	8008258 <_svfiprintf_r+0x9c>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	1d19      	adds	r1, r3, #4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	9103      	str	r1, [sp, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bfbb      	ittet	lt
 80082be:	425b      	neglt	r3, r3
 80082c0:	f042 0202 	orrlt.w	r2, r2, #2
 80082c4:	9307      	strge	r3, [sp, #28]
 80082c6:	9307      	strlt	r3, [sp, #28]
 80082c8:	bfb8      	it	lt
 80082ca:	9204      	strlt	r2, [sp, #16]
 80082cc:	7823      	ldrb	r3, [r4, #0]
 80082ce:	2b2e      	cmp	r3, #46	; 0x2e
 80082d0:	d10c      	bne.n	80082ec <_svfiprintf_r+0x130>
 80082d2:	7863      	ldrb	r3, [r4, #1]
 80082d4:	2b2a      	cmp	r3, #42	; 0x2a
 80082d6:	d134      	bne.n	8008342 <_svfiprintf_r+0x186>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9203      	str	r2, [sp, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfb8      	it	lt
 80082e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082e8:	3402      	adds	r4, #2
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083b4 <_svfiprintf_r+0x1f8>
 80082f0:	7821      	ldrb	r1, [r4, #0]
 80082f2:	2203      	movs	r2, #3
 80082f4:	4650      	mov	r0, sl
 80082f6:	f7f7 ff93 	bl	8000220 <memchr>
 80082fa:	b138      	cbz	r0, 800830c <_svfiprintf_r+0x150>
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	eba0 000a 	sub.w	r0, r0, sl
 8008302:	2240      	movs	r2, #64	; 0x40
 8008304:	4082      	lsls	r2, r0
 8008306:	4313      	orrs	r3, r2
 8008308:	3401      	adds	r4, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008310:	4825      	ldr	r0, [pc, #148]	; (80083a8 <_svfiprintf_r+0x1ec>)
 8008312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008316:	2206      	movs	r2, #6
 8008318:	f7f7 ff82 	bl	8000220 <memchr>
 800831c:	2800      	cmp	r0, #0
 800831e:	d038      	beq.n	8008392 <_svfiprintf_r+0x1d6>
 8008320:	4b22      	ldr	r3, [pc, #136]	; (80083ac <_svfiprintf_r+0x1f0>)
 8008322:	bb1b      	cbnz	r3, 800836c <_svfiprintf_r+0x1b0>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	3307      	adds	r3, #7
 8008328:	f023 0307 	bic.w	r3, r3, #7
 800832c:	3308      	adds	r3, #8
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008332:	4433      	add	r3, r6
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
 8008336:	e768      	b.n	800820a <_svfiprintf_r+0x4e>
 8008338:	fb0c 3202 	mla	r2, ip, r2, r3
 800833c:	460c      	mov	r4, r1
 800833e:	2001      	movs	r0, #1
 8008340:	e7a6      	b.n	8008290 <_svfiprintf_r+0xd4>
 8008342:	2300      	movs	r3, #0
 8008344:	3401      	adds	r4, #1
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	4619      	mov	r1, r3
 800834a:	f04f 0c0a 	mov.w	ip, #10
 800834e:	4620      	mov	r0, r4
 8008350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008354:	3a30      	subs	r2, #48	; 0x30
 8008356:	2a09      	cmp	r2, #9
 8008358:	d903      	bls.n	8008362 <_svfiprintf_r+0x1a6>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c6      	beq.n	80082ec <_svfiprintf_r+0x130>
 800835e:	9105      	str	r1, [sp, #20]
 8008360:	e7c4      	b.n	80082ec <_svfiprintf_r+0x130>
 8008362:	fb0c 2101 	mla	r1, ip, r1, r2
 8008366:	4604      	mov	r4, r0
 8008368:	2301      	movs	r3, #1
 800836a:	e7f0      	b.n	800834e <_svfiprintf_r+0x192>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <_svfiprintf_r+0x1f4>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4638      	mov	r0, r7
 8008378:	f3af 8000 	nop.w
 800837c:	1c42      	adds	r2, r0, #1
 800837e:	4606      	mov	r6, r0
 8008380:	d1d6      	bne.n	8008330 <_svfiprintf_r+0x174>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	065b      	lsls	r3, r3, #25
 8008386:	f53f af2d 	bmi.w	80081e4 <_svfiprintf_r+0x28>
 800838a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800838c:	b01d      	add	sp, #116	; 0x74
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <_svfiprintf_r+0x1f4>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4638      	mov	r0, r7
 800839e:	f000 f879 	bl	8008494 <_printf_i>
 80083a2:	e7eb      	b.n	800837c <_svfiprintf_r+0x1c0>
 80083a4:	0800a489 	.word	0x0800a489
 80083a8:	0800a493 	.word	0x0800a493
 80083ac:	00000000 	.word	0x00000000
 80083b0:	08008109 	.word	0x08008109
 80083b4:	0800a48f 	.word	0x0800a48f

080083b8 <_printf_common>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	4616      	mov	r6, r2
 80083be:	4699      	mov	r9, r3
 80083c0:	688a      	ldr	r2, [r1, #8]
 80083c2:	690b      	ldr	r3, [r1, #16]
 80083c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	bfb8      	it	lt
 80083cc:	4613      	movlt	r3, r2
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d4:	4607      	mov	r7, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b10a      	cbz	r2, 80083de <_printf_common+0x26>
 80083da:	3301      	adds	r3, #1
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	0699      	lsls	r1, r3, #26
 80083e2:	bf42      	ittt	mi
 80083e4:	6833      	ldrmi	r3, [r6, #0]
 80083e6:	3302      	addmi	r3, #2
 80083e8:	6033      	strmi	r3, [r6, #0]
 80083ea:	6825      	ldr	r5, [r4, #0]
 80083ec:	f015 0506 	ands.w	r5, r5, #6
 80083f0:	d106      	bne.n	8008400 <_printf_common+0x48>
 80083f2:	f104 0a19 	add.w	sl, r4, #25
 80083f6:	68e3      	ldr	r3, [r4, #12]
 80083f8:	6832      	ldr	r2, [r6, #0]
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	dc26      	bgt.n	800844e <_printf_common+0x96>
 8008400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008404:	1e13      	subs	r3, r2, #0
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	bf18      	it	ne
 800840a:	2301      	movne	r3, #1
 800840c:	0692      	lsls	r2, r2, #26
 800840e:	d42b      	bmi.n	8008468 <_printf_common+0xb0>
 8008410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008414:	4649      	mov	r1, r9
 8008416:	4638      	mov	r0, r7
 8008418:	47c0      	blx	r8
 800841a:	3001      	adds	r0, #1
 800841c:	d01e      	beq.n	800845c <_printf_common+0xa4>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	6922      	ldr	r2, [r4, #16]
 8008422:	f003 0306 	and.w	r3, r3, #6
 8008426:	2b04      	cmp	r3, #4
 8008428:	bf02      	ittt	eq
 800842a:	68e5      	ldreq	r5, [r4, #12]
 800842c:	6833      	ldreq	r3, [r6, #0]
 800842e:	1aed      	subeq	r5, r5, r3
 8008430:	68a3      	ldr	r3, [r4, #8]
 8008432:	bf0c      	ite	eq
 8008434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008438:	2500      	movne	r5, #0
 800843a:	4293      	cmp	r3, r2
 800843c:	bfc4      	itt	gt
 800843e:	1a9b      	subgt	r3, r3, r2
 8008440:	18ed      	addgt	r5, r5, r3
 8008442:	2600      	movs	r6, #0
 8008444:	341a      	adds	r4, #26
 8008446:	42b5      	cmp	r5, r6
 8008448:	d11a      	bne.n	8008480 <_printf_common+0xc8>
 800844a:	2000      	movs	r0, #0
 800844c:	e008      	b.n	8008460 <_printf_common+0xa8>
 800844e:	2301      	movs	r3, #1
 8008450:	4652      	mov	r2, sl
 8008452:	4649      	mov	r1, r9
 8008454:	4638      	mov	r0, r7
 8008456:	47c0      	blx	r8
 8008458:	3001      	adds	r0, #1
 800845a:	d103      	bne.n	8008464 <_printf_common+0xac>
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008464:	3501      	adds	r5, #1
 8008466:	e7c6      	b.n	80083f6 <_printf_common+0x3e>
 8008468:	18e1      	adds	r1, r4, r3
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	2030      	movs	r0, #48	; 0x30
 800846e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008472:	4422      	add	r2, r4
 8008474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800847c:	3302      	adds	r3, #2
 800847e:	e7c7      	b.n	8008410 <_printf_common+0x58>
 8008480:	2301      	movs	r3, #1
 8008482:	4622      	mov	r2, r4
 8008484:	4649      	mov	r1, r9
 8008486:	4638      	mov	r0, r7
 8008488:	47c0      	blx	r8
 800848a:	3001      	adds	r0, #1
 800848c:	d0e6      	beq.n	800845c <_printf_common+0xa4>
 800848e:	3601      	adds	r6, #1
 8008490:	e7d9      	b.n	8008446 <_printf_common+0x8e>
	...

08008494 <_printf_i>:
 8008494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	7e0f      	ldrb	r7, [r1, #24]
 800849a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800849c:	2f78      	cmp	r7, #120	; 0x78
 800849e:	4691      	mov	r9, r2
 80084a0:	4680      	mov	r8, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	469a      	mov	sl, r3
 80084a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084aa:	d807      	bhi.n	80084bc <_printf_i+0x28>
 80084ac:	2f62      	cmp	r7, #98	; 0x62
 80084ae:	d80a      	bhi.n	80084c6 <_printf_i+0x32>
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	f000 80d4 	beq.w	800865e <_printf_i+0x1ca>
 80084b6:	2f58      	cmp	r7, #88	; 0x58
 80084b8:	f000 80c0 	beq.w	800863c <_printf_i+0x1a8>
 80084bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084c4:	e03a      	b.n	800853c <_printf_i+0xa8>
 80084c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ca:	2b15      	cmp	r3, #21
 80084cc:	d8f6      	bhi.n	80084bc <_printf_i+0x28>
 80084ce:	a101      	add	r1, pc, #4	; (adr r1, 80084d4 <_printf_i+0x40>)
 80084d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	08008541 	.word	0x08008541
 80084dc:	080084bd 	.word	0x080084bd
 80084e0:	080084bd 	.word	0x080084bd
 80084e4:	080084bd 	.word	0x080084bd
 80084e8:	080084bd 	.word	0x080084bd
 80084ec:	08008541 	.word	0x08008541
 80084f0:	080084bd 	.word	0x080084bd
 80084f4:	080084bd 	.word	0x080084bd
 80084f8:	080084bd 	.word	0x080084bd
 80084fc:	080084bd 	.word	0x080084bd
 8008500:	08008645 	.word	0x08008645
 8008504:	0800856d 	.word	0x0800856d
 8008508:	080085ff 	.word	0x080085ff
 800850c:	080084bd 	.word	0x080084bd
 8008510:	080084bd 	.word	0x080084bd
 8008514:	08008667 	.word	0x08008667
 8008518:	080084bd 	.word	0x080084bd
 800851c:	0800856d 	.word	0x0800856d
 8008520:	080084bd 	.word	0x080084bd
 8008524:	080084bd 	.word	0x080084bd
 8008528:	08008607 	.word	0x08008607
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	602a      	str	r2, [r5, #0]
 8008534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800853c:	2301      	movs	r3, #1
 800853e:	e09f      	b.n	8008680 <_printf_i+0x1ec>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	0607      	lsls	r7, r0, #24
 8008546:	f103 0104 	add.w	r1, r3, #4
 800854a:	6029      	str	r1, [r5, #0]
 800854c:	d501      	bpl.n	8008552 <_printf_i+0xbe>
 800854e:	681e      	ldr	r6, [r3, #0]
 8008550:	e003      	b.n	800855a <_printf_i+0xc6>
 8008552:	0646      	lsls	r6, r0, #25
 8008554:	d5fb      	bpl.n	800854e <_printf_i+0xba>
 8008556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800855a:	2e00      	cmp	r6, #0
 800855c:	da03      	bge.n	8008566 <_printf_i+0xd2>
 800855e:	232d      	movs	r3, #45	; 0x2d
 8008560:	4276      	negs	r6, r6
 8008562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008566:	485a      	ldr	r0, [pc, #360]	; (80086d0 <_printf_i+0x23c>)
 8008568:	230a      	movs	r3, #10
 800856a:	e012      	b.n	8008592 <_printf_i+0xfe>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	6820      	ldr	r0, [r4, #0]
 8008570:	1d19      	adds	r1, r3, #4
 8008572:	6029      	str	r1, [r5, #0]
 8008574:	0605      	lsls	r5, r0, #24
 8008576:	d501      	bpl.n	800857c <_printf_i+0xe8>
 8008578:	681e      	ldr	r6, [r3, #0]
 800857a:	e002      	b.n	8008582 <_printf_i+0xee>
 800857c:	0641      	lsls	r1, r0, #25
 800857e:	d5fb      	bpl.n	8008578 <_printf_i+0xe4>
 8008580:	881e      	ldrh	r6, [r3, #0]
 8008582:	4853      	ldr	r0, [pc, #332]	; (80086d0 <_printf_i+0x23c>)
 8008584:	2f6f      	cmp	r7, #111	; 0x6f
 8008586:	bf0c      	ite	eq
 8008588:	2308      	moveq	r3, #8
 800858a:	230a      	movne	r3, #10
 800858c:	2100      	movs	r1, #0
 800858e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008592:	6865      	ldr	r5, [r4, #4]
 8008594:	60a5      	str	r5, [r4, #8]
 8008596:	2d00      	cmp	r5, #0
 8008598:	bfa2      	ittt	ge
 800859a:	6821      	ldrge	r1, [r4, #0]
 800859c:	f021 0104 	bicge.w	r1, r1, #4
 80085a0:	6021      	strge	r1, [r4, #0]
 80085a2:	b90e      	cbnz	r6, 80085a8 <_printf_i+0x114>
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	d04b      	beq.n	8008640 <_printf_i+0x1ac>
 80085a8:	4615      	mov	r5, r2
 80085aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80085ae:	fb03 6711 	mls	r7, r3, r1, r6
 80085b2:	5dc7      	ldrb	r7, [r0, r7]
 80085b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085b8:	4637      	mov	r7, r6
 80085ba:	42bb      	cmp	r3, r7
 80085bc:	460e      	mov	r6, r1
 80085be:	d9f4      	bls.n	80085aa <_printf_i+0x116>
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d10b      	bne.n	80085dc <_printf_i+0x148>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07de      	lsls	r6, r3, #31
 80085c8:	d508      	bpl.n	80085dc <_printf_i+0x148>
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4299      	cmp	r1, r3
 80085d0:	bfde      	ittt	le
 80085d2:	2330      	movle	r3, #48	; 0x30
 80085d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	6122      	str	r2, [r4, #16]
 80085e0:	f8cd a000 	str.w	sl, [sp]
 80085e4:	464b      	mov	r3, r9
 80085e6:	aa03      	add	r2, sp, #12
 80085e8:	4621      	mov	r1, r4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f7ff fee4 	bl	80083b8 <_printf_common>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d14a      	bne.n	800868a <_printf_i+0x1f6>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b004      	add	sp, #16
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f043 0320 	orr.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	4833      	ldr	r0, [pc, #204]	; (80086d4 <_printf_i+0x240>)
 8008608:	2778      	movs	r7, #120	; 0x78
 800860a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	6829      	ldr	r1, [r5, #0]
 8008612:	061f      	lsls	r7, r3, #24
 8008614:	f851 6b04 	ldr.w	r6, [r1], #4
 8008618:	d402      	bmi.n	8008620 <_printf_i+0x18c>
 800861a:	065f      	lsls	r7, r3, #25
 800861c:	bf48      	it	mi
 800861e:	b2b6      	uxthmi	r6, r6
 8008620:	07df      	lsls	r7, r3, #31
 8008622:	bf48      	it	mi
 8008624:	f043 0320 	orrmi.w	r3, r3, #32
 8008628:	6029      	str	r1, [r5, #0]
 800862a:	bf48      	it	mi
 800862c:	6023      	strmi	r3, [r4, #0]
 800862e:	b91e      	cbnz	r6, 8008638 <_printf_i+0x1a4>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	f023 0320 	bic.w	r3, r3, #32
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	2310      	movs	r3, #16
 800863a:	e7a7      	b.n	800858c <_printf_i+0xf8>
 800863c:	4824      	ldr	r0, [pc, #144]	; (80086d0 <_printf_i+0x23c>)
 800863e:	e7e4      	b.n	800860a <_printf_i+0x176>
 8008640:	4615      	mov	r5, r2
 8008642:	e7bd      	b.n	80085c0 <_printf_i+0x12c>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6826      	ldr	r6, [r4, #0]
 8008648:	6961      	ldr	r1, [r4, #20]
 800864a:	1d18      	adds	r0, r3, #4
 800864c:	6028      	str	r0, [r5, #0]
 800864e:	0635      	lsls	r5, r6, #24
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	d501      	bpl.n	8008658 <_printf_i+0x1c4>
 8008654:	6019      	str	r1, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0x1ca>
 8008658:	0670      	lsls	r0, r6, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0x1c0>
 800865c:	8019      	strh	r1, [r3, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	6123      	str	r3, [r4, #16]
 8008662:	4615      	mov	r5, r2
 8008664:	e7bc      	b.n	80085e0 <_printf_i+0x14c>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	602a      	str	r2, [r5, #0]
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	2100      	movs	r1, #0
 8008672:	4628      	mov	r0, r5
 8008674:	f7f7 fdd4 	bl	8000220 <memchr>
 8008678:	b108      	cbz	r0, 800867e <_printf_i+0x1ea>
 800867a:	1b40      	subs	r0, r0, r5
 800867c:	6060      	str	r0, [r4, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	2300      	movs	r3, #0
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	e7aa      	b.n	80085e0 <_printf_i+0x14c>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	462a      	mov	r2, r5
 800868e:	4649      	mov	r1, r9
 8008690:	4640      	mov	r0, r8
 8008692:	47d0      	blx	sl
 8008694:	3001      	adds	r0, #1
 8008696:	d0ad      	beq.n	80085f4 <_printf_i+0x160>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	079b      	lsls	r3, r3, #30
 800869c:	d413      	bmi.n	80086c6 <_printf_i+0x232>
 800869e:	68e0      	ldr	r0, [r4, #12]
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	4298      	cmp	r0, r3
 80086a4:	bfb8      	it	lt
 80086a6:	4618      	movlt	r0, r3
 80086a8:	e7a6      	b.n	80085f8 <_printf_i+0x164>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4632      	mov	r2, r6
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	47d0      	blx	sl
 80086b4:	3001      	adds	r0, #1
 80086b6:	d09d      	beq.n	80085f4 <_printf_i+0x160>
 80086b8:	3501      	adds	r5, #1
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	9903      	ldr	r1, [sp, #12]
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf2      	bgt.n	80086aa <_printf_i+0x216>
 80086c4:	e7eb      	b.n	800869e <_printf_i+0x20a>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f104 0619 	add.w	r6, r4, #25
 80086cc:	e7f5      	b.n	80086ba <_printf_i+0x226>
 80086ce:	bf00      	nop
 80086d0:	0800a49a 	.word	0x0800a49a
 80086d4:	0800a4ab 	.word	0x0800a4ab

080086d8 <__sflush_r>:
 80086d8:	898a      	ldrh	r2, [r1, #12]
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	4605      	mov	r5, r0
 80086e0:	0710      	lsls	r0, r2, #28
 80086e2:	460c      	mov	r4, r1
 80086e4:	d458      	bmi.n	8008798 <__sflush_r+0xc0>
 80086e6:	684b      	ldr	r3, [r1, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc05      	bgt.n	80086f8 <__sflush_r+0x20>
 80086ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dc02      	bgt.n	80086f8 <__sflush_r+0x20>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	d0f9      	beq.n	80086f2 <__sflush_r+0x1a>
 80086fe:	2300      	movs	r3, #0
 8008700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008704:	682f      	ldr	r7, [r5, #0]
 8008706:	6a21      	ldr	r1, [r4, #32]
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	d032      	beq.n	8008772 <__sflush_r+0x9a>
 800870c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	075a      	lsls	r2, r3, #29
 8008712:	d505      	bpl.n	8008720 <__sflush_r+0x48>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	1ac0      	subs	r0, r0, r3
 8008718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800871a:	b10b      	cbz	r3, 8008720 <__sflush_r+0x48>
 800871c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800871e:	1ac0      	subs	r0, r0, r3
 8008720:	2300      	movs	r3, #0
 8008722:	4602      	mov	r2, r0
 8008724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008726:	6a21      	ldr	r1, [r4, #32]
 8008728:	4628      	mov	r0, r5
 800872a:	47b0      	blx	r6
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	d106      	bne.n	8008740 <__sflush_r+0x68>
 8008732:	6829      	ldr	r1, [r5, #0]
 8008734:	291d      	cmp	r1, #29
 8008736:	d82b      	bhi.n	8008790 <__sflush_r+0xb8>
 8008738:	4a29      	ldr	r2, [pc, #164]	; (80087e0 <__sflush_r+0x108>)
 800873a:	410a      	asrs	r2, r1
 800873c:	07d6      	lsls	r6, r2, #31
 800873e:	d427      	bmi.n	8008790 <__sflush_r+0xb8>
 8008740:	2200      	movs	r2, #0
 8008742:	6062      	str	r2, [r4, #4]
 8008744:	04d9      	lsls	r1, r3, #19
 8008746:	6922      	ldr	r2, [r4, #16]
 8008748:	6022      	str	r2, [r4, #0]
 800874a:	d504      	bpl.n	8008756 <__sflush_r+0x7e>
 800874c:	1c42      	adds	r2, r0, #1
 800874e:	d101      	bne.n	8008754 <__sflush_r+0x7c>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b903      	cbnz	r3, 8008756 <__sflush_r+0x7e>
 8008754:	6560      	str	r0, [r4, #84]	; 0x54
 8008756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008758:	602f      	str	r7, [r5, #0]
 800875a:	2900      	cmp	r1, #0
 800875c:	d0c9      	beq.n	80086f2 <__sflush_r+0x1a>
 800875e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008762:	4299      	cmp	r1, r3
 8008764:	d002      	beq.n	800876c <__sflush_r+0x94>
 8008766:	4628      	mov	r0, r5
 8008768:	f7ff fb4a 	bl	8007e00 <_free_r>
 800876c:	2000      	movs	r0, #0
 800876e:	6360      	str	r0, [r4, #52]	; 0x34
 8008770:	e7c0      	b.n	80086f4 <__sflush_r+0x1c>
 8008772:	2301      	movs	r3, #1
 8008774:	4628      	mov	r0, r5
 8008776:	47b0      	blx	r6
 8008778:	1c41      	adds	r1, r0, #1
 800877a:	d1c8      	bne.n	800870e <__sflush_r+0x36>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0c5      	beq.n	800870e <__sflush_r+0x36>
 8008782:	2b1d      	cmp	r3, #29
 8008784:	d001      	beq.n	800878a <__sflush_r+0xb2>
 8008786:	2b16      	cmp	r3, #22
 8008788:	d101      	bne.n	800878e <__sflush_r+0xb6>
 800878a:	602f      	str	r7, [r5, #0]
 800878c:	e7b1      	b.n	80086f2 <__sflush_r+0x1a>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	e7ad      	b.n	80086f4 <__sflush_r+0x1c>
 8008798:	690f      	ldr	r7, [r1, #16]
 800879a:	2f00      	cmp	r7, #0
 800879c:	d0a9      	beq.n	80086f2 <__sflush_r+0x1a>
 800879e:	0793      	lsls	r3, r2, #30
 80087a0:	680e      	ldr	r6, [r1, #0]
 80087a2:	bf08      	it	eq
 80087a4:	694b      	ldreq	r3, [r1, #20]
 80087a6:	600f      	str	r7, [r1, #0]
 80087a8:	bf18      	it	ne
 80087aa:	2300      	movne	r3, #0
 80087ac:	eba6 0807 	sub.w	r8, r6, r7
 80087b0:	608b      	str	r3, [r1, #8]
 80087b2:	f1b8 0f00 	cmp.w	r8, #0
 80087b6:	dd9c      	ble.n	80086f2 <__sflush_r+0x1a>
 80087b8:	6a21      	ldr	r1, [r4, #32]
 80087ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087bc:	4643      	mov	r3, r8
 80087be:	463a      	mov	r2, r7
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	2800      	cmp	r0, #0
 80087c6:	dc06      	bgt.n	80087d6 <__sflush_r+0xfe>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	e78e      	b.n	80086f4 <__sflush_r+0x1c>
 80087d6:	4407      	add	r7, r0
 80087d8:	eba8 0800 	sub.w	r8, r8, r0
 80087dc:	e7e9      	b.n	80087b2 <__sflush_r+0xda>
 80087de:	bf00      	nop
 80087e0:	dfbffffe 	.word	0xdfbffffe

080087e4 <_fflush_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	690b      	ldr	r3, [r1, #16]
 80087e8:	4605      	mov	r5, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b913      	cbnz	r3, 80087f4 <_fflush_r+0x10>
 80087ee:	2500      	movs	r5, #0
 80087f0:	4628      	mov	r0, r5
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	b118      	cbz	r0, 80087fe <_fflush_r+0x1a>
 80087f6:	6a03      	ldr	r3, [r0, #32]
 80087f8:	b90b      	cbnz	r3, 80087fe <_fflush_r+0x1a>
 80087fa:	f7ff f9db 	bl	8007bb4 <__sinit>
 80087fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f3      	beq.n	80087ee <_fflush_r+0xa>
 8008806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008808:	07d0      	lsls	r0, r2, #31
 800880a:	d404      	bmi.n	8008816 <_fflush_r+0x32>
 800880c:	0599      	lsls	r1, r3, #22
 800880e:	d402      	bmi.n	8008816 <_fflush_r+0x32>
 8008810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008812:	f7ff faf2 	bl	8007dfa <__retarget_lock_acquire_recursive>
 8008816:	4628      	mov	r0, r5
 8008818:	4621      	mov	r1, r4
 800881a:	f7ff ff5d 	bl	80086d8 <__sflush_r>
 800881e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008820:	07da      	lsls	r2, r3, #31
 8008822:	4605      	mov	r5, r0
 8008824:	d4e4      	bmi.n	80087f0 <_fflush_r+0xc>
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	059b      	lsls	r3, r3, #22
 800882a:	d4e1      	bmi.n	80087f0 <_fflush_r+0xc>
 800882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882e:	f7ff fae5 	bl	8007dfc <__retarget_lock_release_recursive>
 8008832:	e7dd      	b.n	80087f0 <_fflush_r+0xc>

08008834 <memmove>:
 8008834:	4288      	cmp	r0, r1
 8008836:	b510      	push	{r4, lr}
 8008838:	eb01 0402 	add.w	r4, r1, r2
 800883c:	d902      	bls.n	8008844 <memmove+0x10>
 800883e:	4284      	cmp	r4, r0
 8008840:	4623      	mov	r3, r4
 8008842:	d807      	bhi.n	8008854 <memmove+0x20>
 8008844:	1e43      	subs	r3, r0, #1
 8008846:	42a1      	cmp	r1, r4
 8008848:	d008      	beq.n	800885c <memmove+0x28>
 800884a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800884e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008852:	e7f8      	b.n	8008846 <memmove+0x12>
 8008854:	4402      	add	r2, r0
 8008856:	4601      	mov	r1, r0
 8008858:	428a      	cmp	r2, r1
 800885a:	d100      	bne.n	800885e <memmove+0x2a>
 800885c:	bd10      	pop	{r4, pc}
 800885e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008866:	e7f7      	b.n	8008858 <memmove+0x24>

08008868 <strcpy>:
 8008868:	4603      	mov	r3, r0
 800886a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800886e:	f803 2b01 	strb.w	r2, [r3], #1
 8008872:	2a00      	cmp	r2, #0
 8008874:	d1f9      	bne.n	800886a <strcpy+0x2>
 8008876:	4770      	bx	lr

08008878 <memcpy>:
 8008878:	440a      	add	r2, r1
 800887a:	4291      	cmp	r1, r2
 800887c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008880:	d100      	bne.n	8008884 <memcpy+0xc>
 8008882:	4770      	bx	lr
 8008884:	b510      	push	{r4, lr}
 8008886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888e:	4291      	cmp	r1, r2
 8008890:	d1f9      	bne.n	8008886 <memcpy+0xe>
 8008892:	bd10      	pop	{r4, pc}

08008894 <quorem>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	6903      	ldr	r3, [r0, #16]
 800889a:	690c      	ldr	r4, [r1, #16]
 800889c:	42a3      	cmp	r3, r4
 800889e:	4607      	mov	r7, r0
 80088a0:	db7e      	blt.n	80089a0 <quorem+0x10c>
 80088a2:	3c01      	subs	r4, #1
 80088a4:	f101 0814 	add.w	r8, r1, #20
 80088a8:	f100 0514 	add.w	r5, r0, #20
 80088ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ba:	3301      	adds	r3, #1
 80088bc:	429a      	cmp	r2, r3
 80088be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80088ca:	d331      	bcc.n	8008930 <quorem+0x9c>
 80088cc:	f04f 0e00 	mov.w	lr, #0
 80088d0:	4640      	mov	r0, r8
 80088d2:	46ac      	mov	ip, r5
 80088d4:	46f2      	mov	sl, lr
 80088d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80088da:	b293      	uxth	r3, r2
 80088dc:	fb06 e303 	mla	r3, r6, r3, lr
 80088e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088e4:	0c1a      	lsrs	r2, r3, #16
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	ebaa 0303 	sub.w	r3, sl, r3
 80088ec:	f8dc a000 	ldr.w	sl, [ip]
 80088f0:	fa13 f38a 	uxtah	r3, r3, sl
 80088f4:	fb06 220e 	mla	r2, r6, lr, r2
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	9b00      	ldr	r3, [sp, #0]
 80088fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008900:	b292      	uxth	r2, r2
 8008902:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008906:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800890a:	f8bd 3000 	ldrh.w	r3, [sp]
 800890e:	4581      	cmp	r9, r0
 8008910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008914:	f84c 3b04 	str.w	r3, [ip], #4
 8008918:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800891c:	d2db      	bcs.n	80088d6 <quorem+0x42>
 800891e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008922:	b92b      	cbnz	r3, 8008930 <quorem+0x9c>
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	3b04      	subs	r3, #4
 8008928:	429d      	cmp	r5, r3
 800892a:	461a      	mov	r2, r3
 800892c:	d32c      	bcc.n	8008988 <quorem+0xf4>
 800892e:	613c      	str	r4, [r7, #16]
 8008930:	4638      	mov	r0, r7
 8008932:	f001 f8a7 	bl	8009a84 <__mcmp>
 8008936:	2800      	cmp	r0, #0
 8008938:	db22      	blt.n	8008980 <quorem+0xec>
 800893a:	3601      	adds	r6, #1
 800893c:	4629      	mov	r1, r5
 800893e:	2000      	movs	r0, #0
 8008940:	f858 2b04 	ldr.w	r2, [r8], #4
 8008944:	f8d1 c000 	ldr.w	ip, [r1]
 8008948:	b293      	uxth	r3, r2
 800894a:	1ac3      	subs	r3, r0, r3
 800894c:	0c12      	lsrs	r2, r2, #16
 800894e:	fa13 f38c 	uxtah	r3, r3, ip
 8008952:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008956:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800895a:	b29b      	uxth	r3, r3
 800895c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008960:	45c1      	cmp	r9, r8
 8008962:	f841 3b04 	str.w	r3, [r1], #4
 8008966:	ea4f 4022 	mov.w	r0, r2, asr #16
 800896a:	d2e9      	bcs.n	8008940 <quorem+0xac>
 800896c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008974:	b922      	cbnz	r2, 8008980 <quorem+0xec>
 8008976:	3b04      	subs	r3, #4
 8008978:	429d      	cmp	r5, r3
 800897a:	461a      	mov	r2, r3
 800897c:	d30a      	bcc.n	8008994 <quorem+0x100>
 800897e:	613c      	str	r4, [r7, #16]
 8008980:	4630      	mov	r0, r6
 8008982:	b003      	add	sp, #12
 8008984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	3b04      	subs	r3, #4
 800898c:	2a00      	cmp	r2, #0
 800898e:	d1ce      	bne.n	800892e <quorem+0x9a>
 8008990:	3c01      	subs	r4, #1
 8008992:	e7c9      	b.n	8008928 <quorem+0x94>
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	3b04      	subs	r3, #4
 8008998:	2a00      	cmp	r2, #0
 800899a:	d1f0      	bne.n	800897e <quorem+0xea>
 800899c:	3c01      	subs	r4, #1
 800899e:	e7eb      	b.n	8008978 <quorem+0xe4>
 80089a0:	2000      	movs	r0, #0
 80089a2:	e7ee      	b.n	8008982 <quorem+0xee>
 80089a4:	0000      	movs	r0, r0
	...

080089a8 <_dtoa_r>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	ed2d 8b04 	vpush	{d8-d9}
 80089b0:	69c5      	ldr	r5, [r0, #28]
 80089b2:	b093      	sub	sp, #76	; 0x4c
 80089b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089b8:	ec57 6b10 	vmov	r6, r7, d0
 80089bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089c0:	9107      	str	r1, [sp, #28]
 80089c2:	4604      	mov	r4, r0
 80089c4:	920a      	str	r2, [sp, #40]	; 0x28
 80089c6:	930d      	str	r3, [sp, #52]	; 0x34
 80089c8:	b975      	cbnz	r5, 80089e8 <_dtoa_r+0x40>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7fe fefa 	bl	80077c4 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e0      	str	r0, [r4, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_dtoa_r+0x38>
 80089d6:	4bae      	ldr	r3, [pc, #696]	; (8008c90 <_dtoa_r+0x2e8>)
 80089d8:	21ef      	movs	r1, #239	; 0xef
 80089da:	48ae      	ldr	r0, [pc, #696]	; (8008c94 <_dtoa_r+0x2ec>)
 80089dc:	f001 f9a0 	bl	8009d20 <__assert_func>
 80089e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089e4:	6005      	str	r5, [r0, #0]
 80089e6:	60c5      	str	r5, [r0, #12]
 80089e8:	69e3      	ldr	r3, [r4, #28]
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	b151      	cbz	r1, 8008a04 <_dtoa_r+0x5c>
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	604a      	str	r2, [r1, #4]
 80089f2:	2301      	movs	r3, #1
 80089f4:	4093      	lsls	r3, r2
 80089f6:	608b      	str	r3, [r1, #8]
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fe07 	bl	800960c <_Bfree>
 80089fe:	69e3      	ldr	r3, [r4, #28]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	1e3b      	subs	r3, r7, #0
 8008a06:	bfbb      	ittet	lt
 8008a08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	9303      	strlt	r3, [sp, #12]
 8008a0e:	2300      	movge	r3, #0
 8008a10:	2201      	movlt	r2, #1
 8008a12:	bfac      	ite	ge
 8008a14:	f8c8 3000 	strge.w	r3, [r8]
 8008a18:	f8c8 2000 	strlt.w	r2, [r8]
 8008a1c:	4b9e      	ldr	r3, [pc, #632]	; (8008c98 <_dtoa_r+0x2f0>)
 8008a1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a22:	ea33 0308 	bics.w	r3, r3, r8
 8008a26:	d11b      	bne.n	8008a60 <_dtoa_r+0xb8>
 8008a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a34:	4333      	orrs	r3, r6
 8008a36:	f000 8593 	beq.w	8009560 <_dtoa_r+0xbb8>
 8008a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a3c:	b963      	cbnz	r3, 8008a58 <_dtoa_r+0xb0>
 8008a3e:	4b97      	ldr	r3, [pc, #604]	; (8008c9c <_dtoa_r+0x2f4>)
 8008a40:	e027      	b.n	8008a92 <_dtoa_r+0xea>
 8008a42:	4b97      	ldr	r3, [pc, #604]	; (8008ca0 <_dtoa_r+0x2f8>)
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	9800      	ldr	r0, [sp, #0]
 8008a4e:	b013      	add	sp, #76	; 0x4c
 8008a50:	ecbd 8b04 	vpop	{d8-d9}
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	4b90      	ldr	r3, [pc, #576]	; (8008c9c <_dtoa_r+0x2f4>)
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	3303      	adds	r3, #3
 8008a5e:	e7f3      	b.n	8008a48 <_dtoa_r+0xa0>
 8008a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a64:	2200      	movs	r2, #0
 8008a66:	ec51 0b17 	vmov	r0, r1, d7
 8008a6a:	eeb0 8a47 	vmov.f32	s16, s14
 8008a6e:	eef0 8a67 	vmov.f32	s17, s15
 8008a72:	2300      	movs	r3, #0
 8008a74:	f7f8 f848 	bl	8000b08 <__aeabi_dcmpeq>
 8008a78:	4681      	mov	r9, r0
 8008a7a:	b160      	cbz	r0, 8008a96 <_dtoa_r+0xee>
 8008a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8568 	beq.w	800955a <_dtoa_r+0xbb2>
 8008a8a:	4b86      	ldr	r3, [pc, #536]	; (8008ca4 <_dtoa_r+0x2fc>)
 8008a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	e7da      	b.n	8008a4c <_dtoa_r+0xa4>
 8008a96:	aa10      	add	r2, sp, #64	; 0x40
 8008a98:	a911      	add	r1, sp, #68	; 0x44
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008aa0:	eef0 0a68 	vmov.f32	s1, s17
 8008aa4:	f001 f894 	bl	8009bd0 <__d2b>
 8008aa8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008aac:	4682      	mov	sl, r0
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	d07f      	beq.n	8008bb2 <_dtoa_r+0x20a>
 8008ab2:	ee18 3a90 	vmov	r3, s17
 8008ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008abe:	ec51 0b18 	vmov	r0, r1, d8
 8008ac2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008aca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ace:	4619      	mov	r1, r3
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4b75      	ldr	r3, [pc, #468]	; (8008ca8 <_dtoa_r+0x300>)
 8008ad4:	f7f7 fbf8 	bl	80002c8 <__aeabi_dsub>
 8008ad8:	a367      	add	r3, pc, #412	; (adr r3, 8008c78 <_dtoa_r+0x2d0>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 fdab 	bl	8000638 <__aeabi_dmul>
 8008ae2:	a367      	add	r3, pc, #412	; (adr r3, 8008c80 <_dtoa_r+0x2d8>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fbf0 	bl	80002cc <__adddf3>
 8008aec:	4606      	mov	r6, r0
 8008aee:	4628      	mov	r0, r5
 8008af0:	460f      	mov	r7, r1
 8008af2:	f7f7 fd37 	bl	8000564 <__aeabi_i2d>
 8008af6:	a364      	add	r3, pc, #400	; (adr r3, 8008c88 <_dtoa_r+0x2e0>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 fbe0 	bl	80002cc <__adddf3>
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	460f      	mov	r7, r1
 8008b10:	f7f8 f82c 	bl	8000b6c <__aeabi_d2iz>
 8008b14:	2200      	movs	r2, #0
 8008b16:	4683      	mov	fp, r0
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fffd 	bl	8000b1c <__aeabi_dcmplt>
 8008b22:	b148      	cbz	r0, 8008b38 <_dtoa_r+0x190>
 8008b24:	4658      	mov	r0, fp
 8008b26:	f7f7 fd1d 	bl	8000564 <__aeabi_i2d>
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	f7f7 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 8008b32:	b908      	cbnz	r0, 8008b38 <_dtoa_r+0x190>
 8008b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b38:	f1bb 0f16 	cmp.w	fp, #22
 8008b3c:	d857      	bhi.n	8008bee <_dtoa_r+0x246>
 8008b3e:	4b5b      	ldr	r3, [pc, #364]	; (8008cac <_dtoa_r+0x304>)
 8008b40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	ec51 0b18 	vmov	r0, r1, d8
 8008b4c:	f7f7 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d04e      	beq.n	8008bf2 <_dtoa_r+0x24a>
 8008b54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b58:	2300      	movs	r3, #0
 8008b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5e:	1b5b      	subs	r3, r3, r5
 8008b60:	1e5a      	subs	r2, r3, #1
 8008b62:	bf45      	ittet	mi
 8008b64:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b68:	9305      	strmi	r3, [sp, #20]
 8008b6a:	2300      	movpl	r3, #0
 8008b6c:	2300      	movmi	r3, #0
 8008b6e:	9206      	str	r2, [sp, #24]
 8008b70:	bf54      	ite	pl
 8008b72:	9305      	strpl	r3, [sp, #20]
 8008b74:	9306      	strmi	r3, [sp, #24]
 8008b76:	f1bb 0f00 	cmp.w	fp, #0
 8008b7a:	db3c      	blt.n	8008bf6 <_dtoa_r+0x24e>
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b82:	445b      	add	r3, fp
 8008b84:	9306      	str	r3, [sp, #24]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	9b07      	ldr	r3, [sp, #28]
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	d868      	bhi.n	8008c62 <_dtoa_r+0x2ba>
 8008b90:	2b05      	cmp	r3, #5
 8008b92:	bfc4      	itt	gt
 8008b94:	3b04      	subgt	r3, #4
 8008b96:	9307      	strgt	r3, [sp, #28]
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b9e:	bfcc      	ite	gt
 8008ba0:	2500      	movgt	r5, #0
 8008ba2:	2501      	movle	r5, #1
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	f200 8085 	bhi.w	8008cb4 <_dtoa_r+0x30c>
 8008baa:	e8df f003 	tbb	[pc, r3]
 8008bae:	3b2e      	.short	0x3b2e
 8008bb0:	5839      	.short	0x5839
 8008bb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bb6:	441d      	add	r5, r3
 8008bb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	bfc1      	itttt	gt
 8008bc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008bc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008bcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008bd0:	bfd6      	itet	le
 8008bd2:	f1c3 0320 	rsble	r3, r3, #32
 8008bd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008bda:	fa06 f003 	lslle.w	r0, r6, r3
 8008bde:	f7f7 fcb1 	bl	8000544 <__aeabi_ui2d>
 8008be2:	2201      	movs	r2, #1
 8008be4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008be8:	3d01      	subs	r5, #1
 8008bea:	920e      	str	r2, [sp, #56]	; 0x38
 8008bec:	e76f      	b.n	8008ace <_dtoa_r+0x126>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e7b3      	b.n	8008b5a <_dtoa_r+0x1b2>
 8008bf2:	900c      	str	r0, [sp, #48]	; 0x30
 8008bf4:	e7b2      	b.n	8008b5c <_dtoa_r+0x1b4>
 8008bf6:	9b05      	ldr	r3, [sp, #20]
 8008bf8:	eba3 030b 	sub.w	r3, r3, fp
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	f1cb 0300 	rsb	r3, fp, #0
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	2300      	movs	r3, #0
 8008c06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c08:	e7bf      	b.n	8008b8a <_dtoa_r+0x1e2>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dc52      	bgt.n	8008cba <_dtoa_r+0x312>
 8008c14:	2301      	movs	r3, #1
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c1e:	e00b      	b.n	8008c38 <_dtoa_r+0x290>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f3      	b.n	8008c0c <_dtoa_r+0x264>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2a:	445b      	add	r3, fp
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	bfb8      	it	lt
 8008c36:	2301      	movlt	r3, #1
 8008c38:	69e0      	ldr	r0, [r4, #28]
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	2204      	movs	r2, #4
 8008c3e:	f102 0614 	add.w	r6, r2, #20
 8008c42:	429e      	cmp	r6, r3
 8008c44:	d93d      	bls.n	8008cc2 <_dtoa_r+0x31a>
 8008c46:	6041      	str	r1, [r0, #4]
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 fc9f 	bl	800958c <_Balloc>
 8008c4e:	9000      	str	r0, [sp, #0]
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d139      	bne.n	8008cc8 <_dtoa_r+0x320>
 8008c54:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <_dtoa_r+0x308>)
 8008c56:	4602      	mov	r2, r0
 8008c58:	f240 11af 	movw	r1, #431	; 0x1af
 8008c5c:	e6bd      	b.n	80089da <_dtoa_r+0x32>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e7e1      	b.n	8008c26 <_dtoa_r+0x27e>
 8008c62:	2501      	movs	r5, #1
 8008c64:	2300      	movs	r3, #0
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	9509      	str	r5, [sp, #36]	; 0x24
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	2200      	movs	r2, #0
 8008c74:	2312      	movs	r3, #18
 8008c76:	e7d1      	b.n	8008c1c <_dtoa_r+0x274>
 8008c78:	636f4361 	.word	0x636f4361
 8008c7c:	3fd287a7 	.word	0x3fd287a7
 8008c80:	8b60c8b3 	.word	0x8b60c8b3
 8008c84:	3fc68a28 	.word	0x3fc68a28
 8008c88:	509f79fb 	.word	0x509f79fb
 8008c8c:	3fd34413 	.word	0x3fd34413
 8008c90:	0800a4cb 	.word	0x0800a4cb
 8008c94:	0800a4e2 	.word	0x0800a4e2
 8008c98:	7ff00000 	.word	0x7ff00000
 8008c9c:	0800a4c5 	.word	0x0800a4c5
 8008ca0:	0800a4bc 	.word	0x0800a4bc
 8008ca4:	0800a4ca 	.word	0x0800a4ca
 8008ca8:	3ff80000 	.word	0x3ff80000
 8008cac:	0800a5d0 	.word	0x0800a5d0
 8008cb0:	0800a53a 	.word	0x0800a53a
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb8:	e7d7      	b.n	8008c6a <_dtoa_r+0x2c2>
 8008cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	9304      	str	r3, [sp, #16]
 8008cc0:	e7ba      	b.n	8008c38 <_dtoa_r+0x290>
 8008cc2:	3101      	adds	r1, #1
 8008cc4:	0052      	lsls	r2, r2, #1
 8008cc6:	e7ba      	b.n	8008c3e <_dtoa_r+0x296>
 8008cc8:	69e3      	ldr	r3, [r4, #28]
 8008cca:	9a00      	ldr	r2, [sp, #0]
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	2b0e      	cmp	r3, #14
 8008cd2:	f200 80a8 	bhi.w	8008e26 <_dtoa_r+0x47e>
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	f000 80a5 	beq.w	8008e26 <_dtoa_r+0x47e>
 8008cdc:	f1bb 0f00 	cmp.w	fp, #0
 8008ce0:	dd38      	ble.n	8008d54 <_dtoa_r+0x3ac>
 8008ce2:	4bc0      	ldr	r3, [pc, #768]	; (8008fe4 <_dtoa_r+0x63c>)
 8008ce4:	f00b 020f 	and.w	r2, fp, #15
 8008ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008cf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008cf4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008cf8:	d019      	beq.n	8008d2e <_dtoa_r+0x386>
 8008cfa:	4bbb      	ldr	r3, [pc, #748]	; (8008fe8 <_dtoa_r+0x640>)
 8008cfc:	ec51 0b18 	vmov	r0, r1, d8
 8008d00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d04:	f7f7 fdc2 	bl	800088c <__aeabi_ddiv>
 8008d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0c:	f008 080f 	and.w	r8, r8, #15
 8008d10:	2503      	movs	r5, #3
 8008d12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008fe8 <_dtoa_r+0x640>
 8008d16:	f1b8 0f00 	cmp.w	r8, #0
 8008d1a:	d10a      	bne.n	8008d32 <_dtoa_r+0x38a>
 8008d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d20:	4632      	mov	r2, r6
 8008d22:	463b      	mov	r3, r7
 8008d24:	f7f7 fdb2 	bl	800088c <__aeabi_ddiv>
 8008d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d2c:	e02b      	b.n	8008d86 <_dtoa_r+0x3de>
 8008d2e:	2502      	movs	r5, #2
 8008d30:	e7ef      	b.n	8008d12 <_dtoa_r+0x36a>
 8008d32:	f018 0f01 	tst.w	r8, #1
 8008d36:	d008      	beq.n	8008d4a <_dtoa_r+0x3a2>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d40:	f7f7 fc7a 	bl	8000638 <__aeabi_dmul>
 8008d44:	3501      	adds	r5, #1
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d4e:	f109 0908 	add.w	r9, r9, #8
 8008d52:	e7e0      	b.n	8008d16 <_dtoa_r+0x36e>
 8008d54:	f000 809f 	beq.w	8008e96 <_dtoa_r+0x4ee>
 8008d58:	f1cb 0600 	rsb	r6, fp, #0
 8008d5c:	4ba1      	ldr	r3, [pc, #644]	; (8008fe4 <_dtoa_r+0x63c>)
 8008d5e:	4fa2      	ldr	r7, [pc, #648]	; (8008fe8 <_dtoa_r+0x640>)
 8008d60:	f006 020f 	and.w	r2, r6, #15
 8008d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	ec51 0b18 	vmov	r0, r1, d8
 8008d70:	f7f7 fc62 	bl	8000638 <__aeabi_dmul>
 8008d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d78:	1136      	asrs	r6, r6, #4
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2502      	movs	r5, #2
 8008d7e:	2e00      	cmp	r6, #0
 8008d80:	d17e      	bne.n	8008e80 <_dtoa_r+0x4d8>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1d0      	bne.n	8008d28 <_dtoa_r+0x380>
 8008d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8084 	beq.w	8008e9a <_dtoa_r+0x4f2>
 8008d92:	4b96      	ldr	r3, [pc, #600]	; (8008fec <_dtoa_r+0x644>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	4640      	mov	r0, r8
 8008d98:	4649      	mov	r1, r9
 8008d9a:	f7f7 febf 	bl	8000b1c <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d07b      	beq.n	8008e9a <_dtoa_r+0x4f2>
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d078      	beq.n	8008e9a <_dtoa_r+0x4f2>
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dd39      	ble.n	8008e22 <_dtoa_r+0x47a>
 8008dae:	4b90      	ldr	r3, [pc, #576]	; (8008ff0 <_dtoa_r+0x648>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fc3f 	bl	8000638 <__aeabi_dmul>
 8008dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dbe:	9e01      	ldr	r6, [sp, #4]
 8008dc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008dc4:	3501      	adds	r5, #1
 8008dc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f7f7 fbca 	bl	8000564 <__aeabi_i2d>
 8008dd0:	4642      	mov	r2, r8
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	4b86      	ldr	r3, [pc, #536]	; (8008ff4 <_dtoa_r+0x64c>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f7f7 fa76 	bl	80002cc <__adddf3>
 8008de0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	d158      	bne.n	8008ea0 <_dtoa_r+0x4f8>
 8008dee:	4b82      	ldr	r3, [pc, #520]	; (8008ff8 <_dtoa_r+0x650>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 fa67 	bl	80002c8 <__aeabi_dsub>
 8008dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfe:	4680      	mov	r8, r0
 8008e00:	4689      	mov	r9, r1
 8008e02:	f7f7 fea9 	bl	8000b58 <__aeabi_dcmpgt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f040 8296 	bne.w	8009338 <_dtoa_r+0x990>
 8008e0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e10:	4640      	mov	r0, r8
 8008e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e16:	4649      	mov	r1, r9
 8008e18:	f7f7 fe80 	bl	8000b1c <__aeabi_dcmplt>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f040 8289 	bne.w	8009334 <_dtoa_r+0x98c>
 8008e22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f2c0 814e 	blt.w	80090ca <_dtoa_r+0x722>
 8008e2e:	f1bb 0f0e 	cmp.w	fp, #14
 8008e32:	f300 814a 	bgt.w	80090ca <_dtoa_r+0x722>
 8008e36:	4b6b      	ldr	r3, [pc, #428]	; (8008fe4 <_dtoa_r+0x63c>)
 8008e38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f280 80dc 	bge.w	8009000 <_dtoa_r+0x658>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f300 80d8 	bgt.w	8009000 <_dtoa_r+0x658>
 8008e50:	f040 826f 	bne.w	8009332 <_dtoa_r+0x98a>
 8008e54:	4b68      	ldr	r3, [pc, #416]	; (8008ff8 <_dtoa_r+0x650>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fbec 	bl	8000638 <__aeabi_dmul>
 8008e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e64:	f7f7 fe6e 	bl	8000b44 <__aeabi_dcmpge>
 8008e68:	9e04      	ldr	r6, [sp, #16]
 8008e6a:	4637      	mov	r7, r6
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f040 8245 	bne.w	80092fc <_dtoa_r+0x954>
 8008e72:	9d00      	ldr	r5, [sp, #0]
 8008e74:	2331      	movs	r3, #49	; 0x31
 8008e76:	f805 3b01 	strb.w	r3, [r5], #1
 8008e7a:	f10b 0b01 	add.w	fp, fp, #1
 8008e7e:	e241      	b.n	8009304 <_dtoa_r+0x95c>
 8008e80:	07f2      	lsls	r2, r6, #31
 8008e82:	d505      	bpl.n	8008e90 <_dtoa_r+0x4e8>
 8008e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e88:	f7f7 fbd6 	bl	8000638 <__aeabi_dmul>
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	2301      	movs	r3, #1
 8008e90:	1076      	asrs	r6, r6, #1
 8008e92:	3708      	adds	r7, #8
 8008e94:	e773      	b.n	8008d7e <_dtoa_r+0x3d6>
 8008e96:	2502      	movs	r5, #2
 8008e98:	e775      	b.n	8008d86 <_dtoa_r+0x3de>
 8008e9a:	9e04      	ldr	r6, [sp, #16]
 8008e9c:	465f      	mov	r7, fp
 8008e9e:	e792      	b.n	8008dc6 <_dtoa_r+0x41e>
 8008ea0:	9900      	ldr	r1, [sp, #0]
 8008ea2:	4b50      	ldr	r3, [pc, #320]	; (8008fe4 <_dtoa_r+0x63c>)
 8008ea4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ea8:	4431      	add	r1, r6
 8008eaa:	9102      	str	r1, [sp, #8]
 8008eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eae:	eeb0 9a47 	vmov.f32	s18, s14
 8008eb2:	eef0 9a67 	vmov.f32	s19, s15
 8008eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d044      	beq.n	8008f4c <_dtoa_r+0x5a4>
 8008ec2:	494e      	ldr	r1, [pc, #312]	; (8008ffc <_dtoa_r+0x654>)
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7f7 fce1 	bl	800088c <__aeabi_ddiv>
 8008eca:	ec53 2b19 	vmov	r2, r3, d9
 8008ece:	f7f7 f9fb 	bl	80002c8 <__aeabi_dsub>
 8008ed2:	9d00      	ldr	r5, [sp, #0]
 8008ed4:	ec41 0b19 	vmov	d9, r0, r1
 8008ed8:	4649      	mov	r1, r9
 8008eda:	4640      	mov	r0, r8
 8008edc:	f7f7 fe46 	bl	8000b6c <__aeabi_d2iz>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	f7f7 fb3f 	bl	8000564 <__aeabi_i2d>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 f9eb 	bl	80002c8 <__aeabi_dsub>
 8008ef2:	3630      	adds	r6, #48	; 0x30
 8008ef4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef8:	ec53 2b19 	vmov	r2, r3, d9
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	f7f7 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d164      	bne.n	8008fd2 <_dtoa_r+0x62a>
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4937      	ldr	r1, [pc, #220]	; (8008fec <_dtoa_r+0x644>)
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7f7 f9da 	bl	80002c8 <__aeabi_dsub>
 8008f14:	ec53 2b19 	vmov	r2, r3, d9
 8008f18:	f7f7 fe00 	bl	8000b1c <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f040 80b6 	bne.w	800908e <_dtoa_r+0x6e6>
 8008f22:	9b02      	ldr	r3, [sp, #8]
 8008f24:	429d      	cmp	r5, r3
 8008f26:	f43f af7c 	beq.w	8008e22 <_dtoa_r+0x47a>
 8008f2a:	4b31      	ldr	r3, [pc, #196]	; (8008ff0 <_dtoa_r+0x648>)
 8008f2c:	ec51 0b19 	vmov	r0, r1, d9
 8008f30:	2200      	movs	r2, #0
 8008f32:	f7f7 fb81 	bl	8000638 <__aeabi_dmul>
 8008f36:	4b2e      	ldr	r3, [pc, #184]	; (8008ff0 <_dtoa_r+0x648>)
 8008f38:	ec41 0b19 	vmov	d9, r0, r1
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 fb79 	bl	8000638 <__aeabi_dmul>
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	e7c5      	b.n	8008ed8 <_dtoa_r+0x530>
 8008f4c:	ec51 0b17 	vmov	r0, r1, d7
 8008f50:	f7f7 fb72 	bl	8000638 <__aeabi_dmul>
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	9d00      	ldr	r5, [sp, #0]
 8008f58:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f5a:	ec41 0b19 	vmov	d9, r0, r1
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	f7f7 fe03 	bl	8000b6c <__aeabi_d2iz>
 8008f66:	4606      	mov	r6, r0
 8008f68:	f7f7 fafc 	bl	8000564 <__aeabi_i2d>
 8008f6c:	3630      	adds	r6, #48	; 0x30
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 f9a7 	bl	80002c8 <__aeabi_dsub>
 8008f7a:	f805 6b01 	strb.w	r6, [r5], #1
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	429d      	cmp	r5, r3
 8008f82:	4680      	mov	r8, r0
 8008f84:	4689      	mov	r9, r1
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	d124      	bne.n	8008fd6 <_dtoa_r+0x62e>
 8008f8c:	4b1b      	ldr	r3, [pc, #108]	; (8008ffc <_dtoa_r+0x654>)
 8008f8e:	ec51 0b19 	vmov	r0, r1, d9
 8008f92:	f7f7 f99b 	bl	80002cc <__adddf3>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	f7f7 fddb 	bl	8000b58 <__aeabi_dcmpgt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d173      	bne.n	800908e <_dtoa_r+0x6e6>
 8008fa6:	ec53 2b19 	vmov	r2, r3, d9
 8008faa:	4914      	ldr	r1, [pc, #80]	; (8008ffc <_dtoa_r+0x654>)
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7f7 f98b 	bl	80002c8 <__aeabi_dsub>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f43f af2f 	beq.w	8008e22 <_dtoa_r+0x47a>
 8008fc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fc6:	1e6b      	subs	r3, r5, #1
 8008fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d0f8      	beq.n	8008fc4 <_dtoa_r+0x61c>
 8008fd2:	46bb      	mov	fp, r7
 8008fd4:	e04a      	b.n	800906c <_dtoa_r+0x6c4>
 8008fd6:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <_dtoa_r+0x648>)
 8008fd8:	f7f7 fb2e 	bl	8000638 <__aeabi_dmul>
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4689      	mov	r9, r1
 8008fe0:	e7bd      	b.n	8008f5e <_dtoa_r+0x5b6>
 8008fe2:	bf00      	nop
 8008fe4:	0800a5d0 	.word	0x0800a5d0
 8008fe8:	0800a5a8 	.word	0x0800a5a8
 8008fec:	3ff00000 	.word	0x3ff00000
 8008ff0:	40240000 	.word	0x40240000
 8008ff4:	401c0000 	.word	0x401c0000
 8008ff8:	40140000 	.word	0x40140000
 8008ffc:	3fe00000 	.word	0x3fe00000
 8009000:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009004:	9d00      	ldr	r5, [sp, #0]
 8009006:	4642      	mov	r2, r8
 8009008:	464b      	mov	r3, r9
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 fc3d 	bl	800088c <__aeabi_ddiv>
 8009012:	f7f7 fdab 	bl	8000b6c <__aeabi_d2iz>
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	f7f7 faa4 	bl	8000564 <__aeabi_i2d>
 800901c:	4642      	mov	r2, r8
 800901e:	464b      	mov	r3, r9
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 f94c 	bl	80002c8 <__aeabi_dsub>
 8009030:	9e01      	ldr	r6, [sp, #4]
 8009032:	9f04      	ldr	r7, [sp, #16]
 8009034:	3630      	adds	r6, #48	; 0x30
 8009036:	f805 6b01 	strb.w	r6, [r5], #1
 800903a:	9e00      	ldr	r6, [sp, #0]
 800903c:	1bae      	subs	r6, r5, r6
 800903e:	42b7      	cmp	r7, r6
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	d134      	bne.n	80090b0 <_dtoa_r+0x708>
 8009046:	f7f7 f941 	bl	80002cc <__adddf3>
 800904a:	4642      	mov	r2, r8
 800904c:	464b      	mov	r3, r9
 800904e:	4606      	mov	r6, r0
 8009050:	460f      	mov	r7, r1
 8009052:	f7f7 fd81 	bl	8000b58 <__aeabi_dcmpgt>
 8009056:	b9c8      	cbnz	r0, 800908c <_dtoa_r+0x6e4>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 fd52 	bl	8000b08 <__aeabi_dcmpeq>
 8009064:	b110      	cbz	r0, 800906c <_dtoa_r+0x6c4>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	07db      	lsls	r3, r3, #31
 800906a:	d40f      	bmi.n	800908c <_dtoa_r+0x6e4>
 800906c:	4651      	mov	r1, sl
 800906e:	4620      	mov	r0, r4
 8009070:	f000 facc 	bl	800960c <_Bfree>
 8009074:	2300      	movs	r3, #0
 8009076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009078:	702b      	strb	r3, [r5, #0]
 800907a:	f10b 0301 	add.w	r3, fp, #1
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009082:	2b00      	cmp	r3, #0
 8009084:	f43f ace2 	beq.w	8008a4c <_dtoa_r+0xa4>
 8009088:	601d      	str	r5, [r3, #0]
 800908a:	e4df      	b.n	8008a4c <_dtoa_r+0xa4>
 800908c:	465f      	mov	r7, fp
 800908e:	462b      	mov	r3, r5
 8009090:	461d      	mov	r5, r3
 8009092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009096:	2a39      	cmp	r2, #57	; 0x39
 8009098:	d106      	bne.n	80090a8 <_dtoa_r+0x700>
 800909a:	9a00      	ldr	r2, [sp, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d1f7      	bne.n	8009090 <_dtoa_r+0x6e8>
 80090a0:	9900      	ldr	r1, [sp, #0]
 80090a2:	2230      	movs	r2, #48	; 0x30
 80090a4:	3701      	adds	r7, #1
 80090a6:	700a      	strb	r2, [r1, #0]
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	3201      	adds	r2, #1
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	e790      	b.n	8008fd2 <_dtoa_r+0x62a>
 80090b0:	4ba3      	ldr	r3, [pc, #652]	; (8009340 <_dtoa_r+0x998>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7f7 fac0 	bl	8000638 <__aeabi_dmul>
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	4606      	mov	r6, r0
 80090be:	460f      	mov	r7, r1
 80090c0:	f7f7 fd22 	bl	8000b08 <__aeabi_dcmpeq>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d09e      	beq.n	8009006 <_dtoa_r+0x65e>
 80090c8:	e7d0      	b.n	800906c <_dtoa_r+0x6c4>
 80090ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	f000 80ca 	beq.w	8009266 <_dtoa_r+0x8be>
 80090d2:	9a07      	ldr	r2, [sp, #28]
 80090d4:	2a01      	cmp	r2, #1
 80090d6:	f300 80ad 	bgt.w	8009234 <_dtoa_r+0x88c>
 80090da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 80a5 	beq.w	800922c <_dtoa_r+0x884>
 80090e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090e6:	9e08      	ldr	r6, [sp, #32]
 80090e8:	9d05      	ldr	r5, [sp, #20]
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	441a      	add	r2, r3
 80090ee:	9205      	str	r2, [sp, #20]
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	2101      	movs	r1, #1
 80090f4:	441a      	add	r2, r3
 80090f6:	4620      	mov	r0, r4
 80090f8:	9206      	str	r2, [sp, #24]
 80090fa:	f000 fb3d 	bl	8009778 <__i2b>
 80090fe:	4607      	mov	r7, r0
 8009100:	b165      	cbz	r5, 800911c <_dtoa_r+0x774>
 8009102:	9b06      	ldr	r3, [sp, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	dd09      	ble.n	800911c <_dtoa_r+0x774>
 8009108:	42ab      	cmp	r3, r5
 800910a:	9a05      	ldr	r2, [sp, #20]
 800910c:	bfa8      	it	ge
 800910e:	462b      	movge	r3, r5
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	9205      	str	r2, [sp, #20]
 8009114:	9a06      	ldr	r2, [sp, #24]
 8009116:	1aed      	subs	r5, r5, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	b1f3      	cbz	r3, 800915e <_dtoa_r+0x7b6>
 8009120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80a3 	beq.w	800926e <_dtoa_r+0x8c6>
 8009128:	2e00      	cmp	r6, #0
 800912a:	dd10      	ble.n	800914e <_dtoa_r+0x7a6>
 800912c:	4639      	mov	r1, r7
 800912e:	4632      	mov	r2, r6
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fbe1 	bl	80098f8 <__pow5mult>
 8009136:	4652      	mov	r2, sl
 8009138:	4601      	mov	r1, r0
 800913a:	4607      	mov	r7, r0
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fb31 	bl	80097a4 <__multiply>
 8009142:	4651      	mov	r1, sl
 8009144:	4680      	mov	r8, r0
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fa60 	bl	800960c <_Bfree>
 800914c:	46c2      	mov	sl, r8
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	1b9a      	subs	r2, r3, r6
 8009152:	d004      	beq.n	800915e <_dtoa_r+0x7b6>
 8009154:	4651      	mov	r1, sl
 8009156:	4620      	mov	r0, r4
 8009158:	f000 fbce 	bl	80098f8 <__pow5mult>
 800915c:	4682      	mov	sl, r0
 800915e:	2101      	movs	r1, #1
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fb09 	bl	8009778 <__i2b>
 8009166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009168:	2b00      	cmp	r3, #0
 800916a:	4606      	mov	r6, r0
 800916c:	f340 8081 	ble.w	8009272 <_dtoa_r+0x8ca>
 8009170:	461a      	mov	r2, r3
 8009172:	4601      	mov	r1, r0
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fbbf 	bl	80098f8 <__pow5mult>
 800917a:	9b07      	ldr	r3, [sp, #28]
 800917c:	2b01      	cmp	r3, #1
 800917e:	4606      	mov	r6, r0
 8009180:	dd7a      	ble.n	8009278 <_dtoa_r+0x8d0>
 8009182:	f04f 0800 	mov.w	r8, #0
 8009186:	6933      	ldr	r3, [r6, #16]
 8009188:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800918c:	6918      	ldr	r0, [r3, #16]
 800918e:	f000 faa5 	bl	80096dc <__hi0bits>
 8009192:	f1c0 0020 	rsb	r0, r0, #32
 8009196:	9b06      	ldr	r3, [sp, #24]
 8009198:	4418      	add	r0, r3
 800919a:	f010 001f 	ands.w	r0, r0, #31
 800919e:	f000 8094 	beq.w	80092ca <_dtoa_r+0x922>
 80091a2:	f1c0 0320 	rsb	r3, r0, #32
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	f340 8085 	ble.w	80092b6 <_dtoa_r+0x90e>
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	f1c0 001c 	rsb	r0, r0, #28
 80091b2:	4403      	add	r3, r0
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	4403      	add	r3, r0
 80091ba:	4405      	add	r5, r0
 80091bc:	9306      	str	r3, [sp, #24]
 80091be:	9b05      	ldr	r3, [sp, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd05      	ble.n	80091d0 <_dtoa_r+0x828>
 80091c4:	4651      	mov	r1, sl
 80091c6:	461a      	mov	r2, r3
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fbef 	bl	80099ac <__lshift>
 80091ce:	4682      	mov	sl, r0
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd05      	ble.n	80091e2 <_dtoa_r+0x83a>
 80091d6:	4631      	mov	r1, r6
 80091d8:	461a      	mov	r2, r3
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fbe6 	bl	80099ac <__lshift>
 80091e0:	4606      	mov	r6, r0
 80091e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d072      	beq.n	80092ce <_dtoa_r+0x926>
 80091e8:	4631      	mov	r1, r6
 80091ea:	4650      	mov	r0, sl
 80091ec:	f000 fc4a 	bl	8009a84 <__mcmp>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	da6c      	bge.n	80092ce <_dtoa_r+0x926>
 80091f4:	2300      	movs	r3, #0
 80091f6:	4651      	mov	r1, sl
 80091f8:	220a      	movs	r2, #10
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fa28 	bl	8009650 <__multadd>
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009206:	4682      	mov	sl, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 81b0 	beq.w	800956e <_dtoa_r+0xbc6>
 800920e:	2300      	movs	r3, #0
 8009210:	4639      	mov	r1, r7
 8009212:	220a      	movs	r2, #10
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fa1b 	bl	8009650 <__multadd>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	4607      	mov	r7, r0
 8009220:	f300 8096 	bgt.w	8009350 <_dtoa_r+0x9a8>
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	2b02      	cmp	r3, #2
 8009228:	dc59      	bgt.n	80092de <_dtoa_r+0x936>
 800922a:	e091      	b.n	8009350 <_dtoa_r+0x9a8>
 800922c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800922e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009232:	e758      	b.n	80090e6 <_dtoa_r+0x73e>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	1e5e      	subs	r6, r3, #1
 8009238:	9b08      	ldr	r3, [sp, #32]
 800923a:	42b3      	cmp	r3, r6
 800923c:	bfbf      	itttt	lt
 800923e:	9b08      	ldrlt	r3, [sp, #32]
 8009240:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009242:	9608      	strlt	r6, [sp, #32]
 8009244:	1af3      	sublt	r3, r6, r3
 8009246:	bfb4      	ite	lt
 8009248:	18d2      	addlt	r2, r2, r3
 800924a:	1b9e      	subge	r6, r3, r6
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	bfbc      	itt	lt
 8009250:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009252:	2600      	movlt	r6, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	bfb7      	itett	lt
 8009258:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800925c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009260:	1a9d      	sublt	r5, r3, r2
 8009262:	2300      	movlt	r3, #0
 8009264:	e741      	b.n	80090ea <_dtoa_r+0x742>
 8009266:	9e08      	ldr	r6, [sp, #32]
 8009268:	9d05      	ldr	r5, [sp, #20]
 800926a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800926c:	e748      	b.n	8009100 <_dtoa_r+0x758>
 800926e:	9a08      	ldr	r2, [sp, #32]
 8009270:	e770      	b.n	8009154 <_dtoa_r+0x7ac>
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	2b01      	cmp	r3, #1
 8009276:	dc19      	bgt.n	80092ac <_dtoa_r+0x904>
 8009278:	9b02      	ldr	r3, [sp, #8]
 800927a:	b9bb      	cbnz	r3, 80092ac <_dtoa_r+0x904>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009282:	b99b      	cbnz	r3, 80092ac <_dtoa_r+0x904>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800928a:	0d1b      	lsrs	r3, r3, #20
 800928c:	051b      	lsls	r3, r3, #20
 800928e:	b183      	cbz	r3, 80092b2 <_dtoa_r+0x90a>
 8009290:	9b05      	ldr	r3, [sp, #20]
 8009292:	3301      	adds	r3, #1
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	9b06      	ldr	r3, [sp, #24]
 8009298:	3301      	adds	r3, #1
 800929a:	9306      	str	r3, [sp, #24]
 800929c:	f04f 0801 	mov.w	r8, #1
 80092a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f47f af6f 	bne.w	8009186 <_dtoa_r+0x7de>
 80092a8:	2001      	movs	r0, #1
 80092aa:	e774      	b.n	8009196 <_dtoa_r+0x7ee>
 80092ac:	f04f 0800 	mov.w	r8, #0
 80092b0:	e7f6      	b.n	80092a0 <_dtoa_r+0x8f8>
 80092b2:	4698      	mov	r8, r3
 80092b4:	e7f4      	b.n	80092a0 <_dtoa_r+0x8f8>
 80092b6:	d082      	beq.n	80091be <_dtoa_r+0x816>
 80092b8:	9a05      	ldr	r2, [sp, #20]
 80092ba:	331c      	adds	r3, #28
 80092bc:	441a      	add	r2, r3
 80092be:	9205      	str	r2, [sp, #20]
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	441a      	add	r2, r3
 80092c4:	441d      	add	r5, r3
 80092c6:	9206      	str	r2, [sp, #24]
 80092c8:	e779      	b.n	80091be <_dtoa_r+0x816>
 80092ca:	4603      	mov	r3, r0
 80092cc:	e7f4      	b.n	80092b8 <_dtoa_r+0x910>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dc37      	bgt.n	8009344 <_dtoa_r+0x99c>
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	dd34      	ble.n	8009344 <_dtoa_r+0x99c>
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	b963      	cbnz	r3, 80092fc <_dtoa_r+0x954>
 80092e2:	4631      	mov	r1, r6
 80092e4:	2205      	movs	r2, #5
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 f9b2 	bl	8009650 <__multadd>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4606      	mov	r6, r0
 80092f0:	4650      	mov	r0, sl
 80092f2:	f000 fbc7 	bl	8009a84 <__mcmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f73f adbb 	bgt.w	8008e72 <_dtoa_r+0x4ca>
 80092fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fe:	9d00      	ldr	r5, [sp, #0]
 8009300:	ea6f 0b03 	mvn.w	fp, r3
 8009304:	f04f 0800 	mov.w	r8, #0
 8009308:	4631      	mov	r1, r6
 800930a:	4620      	mov	r0, r4
 800930c:	f000 f97e 	bl	800960c <_Bfree>
 8009310:	2f00      	cmp	r7, #0
 8009312:	f43f aeab 	beq.w	800906c <_dtoa_r+0x6c4>
 8009316:	f1b8 0f00 	cmp.w	r8, #0
 800931a:	d005      	beq.n	8009328 <_dtoa_r+0x980>
 800931c:	45b8      	cmp	r8, r7
 800931e:	d003      	beq.n	8009328 <_dtoa_r+0x980>
 8009320:	4641      	mov	r1, r8
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f972 	bl	800960c <_Bfree>
 8009328:	4639      	mov	r1, r7
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f96e 	bl	800960c <_Bfree>
 8009330:	e69c      	b.n	800906c <_dtoa_r+0x6c4>
 8009332:	2600      	movs	r6, #0
 8009334:	4637      	mov	r7, r6
 8009336:	e7e1      	b.n	80092fc <_dtoa_r+0x954>
 8009338:	46bb      	mov	fp, r7
 800933a:	4637      	mov	r7, r6
 800933c:	e599      	b.n	8008e72 <_dtoa_r+0x4ca>
 800933e:	bf00      	nop
 8009340:	40240000 	.word	0x40240000
 8009344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 80c8 	beq.w	80094dc <_dtoa_r+0xb34>
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	2d00      	cmp	r5, #0
 8009352:	dd05      	ble.n	8009360 <_dtoa_r+0x9b8>
 8009354:	4639      	mov	r1, r7
 8009356:	462a      	mov	r2, r5
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fb27 	bl	80099ac <__lshift>
 800935e:	4607      	mov	r7, r0
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d05b      	beq.n	800941e <_dtoa_r+0xa76>
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	4620      	mov	r0, r4
 800936a:	f000 f90f 	bl	800958c <_Balloc>
 800936e:	4605      	mov	r5, r0
 8009370:	b928      	cbnz	r0, 800937e <_dtoa_r+0x9d6>
 8009372:	4b83      	ldr	r3, [pc, #524]	; (8009580 <_dtoa_r+0xbd8>)
 8009374:	4602      	mov	r2, r0
 8009376:	f240 21ef 	movw	r1, #751	; 0x2ef
 800937a:	f7ff bb2e 	b.w	80089da <_dtoa_r+0x32>
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	3202      	adds	r2, #2
 8009382:	0092      	lsls	r2, r2, #2
 8009384:	f107 010c 	add.w	r1, r7, #12
 8009388:	300c      	adds	r0, #12
 800938a:	f7ff fa75 	bl	8008878 <memcpy>
 800938e:	2201      	movs	r2, #1
 8009390:	4629      	mov	r1, r5
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fb0a 	bl	80099ac <__lshift>
 8009398:	9b00      	ldr	r3, [sp, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a2:	4413      	add	r3, r2
 80093a4:	9308      	str	r3, [sp, #32]
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	46b8      	mov	r8, r7
 80093ae:	9306      	str	r3, [sp, #24]
 80093b0:	4607      	mov	r7, r0
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	4631      	mov	r1, r6
 80093b6:	3b01      	subs	r3, #1
 80093b8:	4650      	mov	r0, sl
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	f7ff fa6a 	bl	8008894 <quorem>
 80093c0:	4641      	mov	r1, r8
 80093c2:	9002      	str	r0, [sp, #8]
 80093c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093c8:	4650      	mov	r0, sl
 80093ca:	f000 fb5b 	bl	8009a84 <__mcmp>
 80093ce:	463a      	mov	r2, r7
 80093d0:	9005      	str	r0, [sp, #20]
 80093d2:	4631      	mov	r1, r6
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fb71 	bl	8009abc <__mdiff>
 80093da:	68c2      	ldr	r2, [r0, #12]
 80093dc:	4605      	mov	r5, r0
 80093de:	bb02      	cbnz	r2, 8009422 <_dtoa_r+0xa7a>
 80093e0:	4601      	mov	r1, r0
 80093e2:	4650      	mov	r0, sl
 80093e4:	f000 fb4e 	bl	8009a84 <__mcmp>
 80093e8:	4602      	mov	r2, r0
 80093ea:	4629      	mov	r1, r5
 80093ec:	4620      	mov	r0, r4
 80093ee:	9209      	str	r2, [sp, #36]	; 0x24
 80093f0:	f000 f90c 	bl	800960c <_Bfree>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f8:	9d04      	ldr	r5, [sp, #16]
 80093fa:	ea43 0102 	orr.w	r1, r3, r2
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	4319      	orrs	r1, r3
 8009402:	d110      	bne.n	8009426 <_dtoa_r+0xa7e>
 8009404:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009408:	d029      	beq.n	800945e <_dtoa_r+0xab6>
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd02      	ble.n	8009416 <_dtoa_r+0xa6e>
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	f883 9000 	strb.w	r9, [r3]
 800941c:	e774      	b.n	8009308 <_dtoa_r+0x960>
 800941e:	4638      	mov	r0, r7
 8009420:	e7ba      	b.n	8009398 <_dtoa_r+0x9f0>
 8009422:	2201      	movs	r2, #1
 8009424:	e7e1      	b.n	80093ea <_dtoa_r+0xa42>
 8009426:	9b05      	ldr	r3, [sp, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	db04      	blt.n	8009436 <_dtoa_r+0xa8e>
 800942c:	9907      	ldr	r1, [sp, #28]
 800942e:	430b      	orrs	r3, r1
 8009430:	9906      	ldr	r1, [sp, #24]
 8009432:	430b      	orrs	r3, r1
 8009434:	d120      	bne.n	8009478 <_dtoa_r+0xad0>
 8009436:	2a00      	cmp	r2, #0
 8009438:	dded      	ble.n	8009416 <_dtoa_r+0xa6e>
 800943a:	4651      	mov	r1, sl
 800943c:	2201      	movs	r2, #1
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fab4 	bl	80099ac <__lshift>
 8009444:	4631      	mov	r1, r6
 8009446:	4682      	mov	sl, r0
 8009448:	f000 fb1c 	bl	8009a84 <__mcmp>
 800944c:	2800      	cmp	r0, #0
 800944e:	dc03      	bgt.n	8009458 <_dtoa_r+0xab0>
 8009450:	d1e1      	bne.n	8009416 <_dtoa_r+0xa6e>
 8009452:	f019 0f01 	tst.w	r9, #1
 8009456:	d0de      	beq.n	8009416 <_dtoa_r+0xa6e>
 8009458:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800945c:	d1d8      	bne.n	8009410 <_dtoa_r+0xa68>
 800945e:	9a01      	ldr	r2, [sp, #4]
 8009460:	2339      	movs	r3, #57	; 0x39
 8009462:	7013      	strb	r3, [r2, #0]
 8009464:	462b      	mov	r3, r5
 8009466:	461d      	mov	r5, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800946e:	2a39      	cmp	r2, #57	; 0x39
 8009470:	d06c      	beq.n	800954c <_dtoa_r+0xba4>
 8009472:	3201      	adds	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
 8009476:	e747      	b.n	8009308 <_dtoa_r+0x960>
 8009478:	2a00      	cmp	r2, #0
 800947a:	dd07      	ble.n	800948c <_dtoa_r+0xae4>
 800947c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009480:	d0ed      	beq.n	800945e <_dtoa_r+0xab6>
 8009482:	9a01      	ldr	r2, [sp, #4]
 8009484:	f109 0301 	add.w	r3, r9, #1
 8009488:	7013      	strb	r3, [r2, #0]
 800948a:	e73d      	b.n	8009308 <_dtoa_r+0x960>
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	9a08      	ldr	r2, [sp, #32]
 8009490:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009494:	4293      	cmp	r3, r2
 8009496:	d043      	beq.n	8009520 <_dtoa_r+0xb78>
 8009498:	4651      	mov	r1, sl
 800949a:	2300      	movs	r3, #0
 800949c:	220a      	movs	r2, #10
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 f8d6 	bl	8009650 <__multadd>
 80094a4:	45b8      	cmp	r8, r7
 80094a6:	4682      	mov	sl, r0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	f04f 020a 	mov.w	r2, #10
 80094b0:	4641      	mov	r1, r8
 80094b2:	4620      	mov	r0, r4
 80094b4:	d107      	bne.n	80094c6 <_dtoa_r+0xb1e>
 80094b6:	f000 f8cb 	bl	8009650 <__multadd>
 80094ba:	4680      	mov	r8, r0
 80094bc:	4607      	mov	r7, r0
 80094be:	9b04      	ldr	r3, [sp, #16]
 80094c0:	3301      	adds	r3, #1
 80094c2:	9304      	str	r3, [sp, #16]
 80094c4:	e775      	b.n	80093b2 <_dtoa_r+0xa0a>
 80094c6:	f000 f8c3 	bl	8009650 <__multadd>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4680      	mov	r8, r0
 80094ce:	2300      	movs	r3, #0
 80094d0:	220a      	movs	r2, #10
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 f8bc 	bl	8009650 <__multadd>
 80094d8:	4607      	mov	r7, r0
 80094da:	e7f0      	b.n	80094be <_dtoa_r+0xb16>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	9d00      	ldr	r5, [sp, #0]
 80094e2:	4631      	mov	r1, r6
 80094e4:	4650      	mov	r0, sl
 80094e6:	f7ff f9d5 	bl	8008894 <quorem>
 80094ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	f805 9b01 	strb.w	r9, [r5], #1
 80094f4:	1aea      	subs	r2, r5, r3
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	4293      	cmp	r3, r2
 80094fa:	dd07      	ble.n	800950c <_dtoa_r+0xb64>
 80094fc:	4651      	mov	r1, sl
 80094fe:	2300      	movs	r3, #0
 8009500:	220a      	movs	r2, #10
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f8a4 	bl	8009650 <__multadd>
 8009508:	4682      	mov	sl, r0
 800950a:	e7ea      	b.n	80094e2 <_dtoa_r+0xb3a>
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfc8      	it	gt
 8009512:	461d      	movgt	r5, r3
 8009514:	9b00      	ldr	r3, [sp, #0]
 8009516:	bfd8      	it	le
 8009518:	2501      	movle	r5, #1
 800951a:	441d      	add	r5, r3
 800951c:	f04f 0800 	mov.w	r8, #0
 8009520:	4651      	mov	r1, sl
 8009522:	2201      	movs	r2, #1
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fa41 	bl	80099ac <__lshift>
 800952a:	4631      	mov	r1, r6
 800952c:	4682      	mov	sl, r0
 800952e:	f000 faa9 	bl	8009a84 <__mcmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	dc96      	bgt.n	8009464 <_dtoa_r+0xabc>
 8009536:	d102      	bne.n	800953e <_dtoa_r+0xb96>
 8009538:	f019 0f01 	tst.w	r9, #1
 800953c:	d192      	bne.n	8009464 <_dtoa_r+0xabc>
 800953e:	462b      	mov	r3, r5
 8009540:	461d      	mov	r5, r3
 8009542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009546:	2a30      	cmp	r2, #48	; 0x30
 8009548:	d0fa      	beq.n	8009540 <_dtoa_r+0xb98>
 800954a:	e6dd      	b.n	8009308 <_dtoa_r+0x960>
 800954c:	9a00      	ldr	r2, [sp, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d189      	bne.n	8009466 <_dtoa_r+0xabe>
 8009552:	f10b 0b01 	add.w	fp, fp, #1
 8009556:	2331      	movs	r3, #49	; 0x31
 8009558:	e796      	b.n	8009488 <_dtoa_r+0xae0>
 800955a:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <_dtoa_r+0xbdc>)
 800955c:	f7ff ba99 	b.w	8008a92 <_dtoa_r+0xea>
 8009560:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009562:	2b00      	cmp	r3, #0
 8009564:	f47f aa6d 	bne.w	8008a42 <_dtoa_r+0x9a>
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <_dtoa_r+0xbe0>)
 800956a:	f7ff ba92 	b.w	8008a92 <_dtoa_r+0xea>
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dcb5      	bgt.n	80094e0 <_dtoa_r+0xb38>
 8009574:	9b07      	ldr	r3, [sp, #28]
 8009576:	2b02      	cmp	r3, #2
 8009578:	f73f aeb1 	bgt.w	80092de <_dtoa_r+0x936>
 800957c:	e7b0      	b.n	80094e0 <_dtoa_r+0xb38>
 800957e:	bf00      	nop
 8009580:	0800a53a 	.word	0x0800a53a
 8009584:	0800a4c9 	.word	0x0800a4c9
 8009588:	0800a4bc 	.word	0x0800a4bc

0800958c <_Balloc>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	69c6      	ldr	r6, [r0, #28]
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	b976      	cbnz	r6, 80095b4 <_Balloc+0x28>
 8009596:	2010      	movs	r0, #16
 8009598:	f7fe f914 	bl	80077c4 <malloc>
 800959c:	4602      	mov	r2, r0
 800959e:	61e0      	str	r0, [r4, #28]
 80095a0:	b920      	cbnz	r0, 80095ac <_Balloc+0x20>
 80095a2:	4b18      	ldr	r3, [pc, #96]	; (8009604 <_Balloc+0x78>)
 80095a4:	4818      	ldr	r0, [pc, #96]	; (8009608 <_Balloc+0x7c>)
 80095a6:	216b      	movs	r1, #107	; 0x6b
 80095a8:	f000 fbba 	bl	8009d20 <__assert_func>
 80095ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b0:	6006      	str	r6, [r0, #0]
 80095b2:	60c6      	str	r6, [r0, #12]
 80095b4:	69e6      	ldr	r6, [r4, #28]
 80095b6:	68f3      	ldr	r3, [r6, #12]
 80095b8:	b183      	cbz	r3, 80095dc <_Balloc+0x50>
 80095ba:	69e3      	ldr	r3, [r4, #28]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095c2:	b9b8      	cbnz	r0, 80095f4 <_Balloc+0x68>
 80095c4:	2101      	movs	r1, #1
 80095c6:	fa01 f605 	lsl.w	r6, r1, r5
 80095ca:	1d72      	adds	r2, r6, #5
 80095cc:	0092      	lsls	r2, r2, #2
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fbc4 	bl	8009d5c <_calloc_r>
 80095d4:	b160      	cbz	r0, 80095f0 <_Balloc+0x64>
 80095d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095da:	e00e      	b.n	80095fa <_Balloc+0x6e>
 80095dc:	2221      	movs	r2, #33	; 0x21
 80095de:	2104      	movs	r1, #4
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fbbb 	bl	8009d5c <_calloc_r>
 80095e6:	69e3      	ldr	r3, [r4, #28]
 80095e8:	60f0      	str	r0, [r6, #12]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e4      	bne.n	80095ba <_Balloc+0x2e>
 80095f0:	2000      	movs	r0, #0
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	6802      	ldr	r2, [r0, #0]
 80095f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095fa:	2300      	movs	r3, #0
 80095fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009600:	e7f7      	b.n	80095f2 <_Balloc+0x66>
 8009602:	bf00      	nop
 8009604:	0800a4cb 	.word	0x0800a4cb
 8009608:	0800a54b 	.word	0x0800a54b

0800960c <_Bfree>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	69c6      	ldr	r6, [r0, #28]
 8009610:	4605      	mov	r5, r0
 8009612:	460c      	mov	r4, r1
 8009614:	b976      	cbnz	r6, 8009634 <_Bfree+0x28>
 8009616:	2010      	movs	r0, #16
 8009618:	f7fe f8d4 	bl	80077c4 <malloc>
 800961c:	4602      	mov	r2, r0
 800961e:	61e8      	str	r0, [r5, #28]
 8009620:	b920      	cbnz	r0, 800962c <_Bfree+0x20>
 8009622:	4b09      	ldr	r3, [pc, #36]	; (8009648 <_Bfree+0x3c>)
 8009624:	4809      	ldr	r0, [pc, #36]	; (800964c <_Bfree+0x40>)
 8009626:	218f      	movs	r1, #143	; 0x8f
 8009628:	f000 fb7a 	bl	8009d20 <__assert_func>
 800962c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009630:	6006      	str	r6, [r0, #0]
 8009632:	60c6      	str	r6, [r0, #12]
 8009634:	b13c      	cbz	r4, 8009646 <_Bfree+0x3a>
 8009636:	69eb      	ldr	r3, [r5, #28]
 8009638:	6862      	ldr	r2, [r4, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009640:	6021      	str	r1, [r4, #0]
 8009642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	0800a4cb 	.word	0x0800a4cb
 800964c:	0800a54b 	.word	0x0800a54b

08009650 <__multadd>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	690d      	ldr	r5, [r1, #16]
 8009656:	4607      	mov	r7, r0
 8009658:	460c      	mov	r4, r1
 800965a:	461e      	mov	r6, r3
 800965c:	f101 0c14 	add.w	ip, r1, #20
 8009660:	2000      	movs	r0, #0
 8009662:	f8dc 3000 	ldr.w	r3, [ip]
 8009666:	b299      	uxth	r1, r3
 8009668:	fb02 6101 	mla	r1, r2, r1, r6
 800966c:	0c1e      	lsrs	r6, r3, #16
 800966e:	0c0b      	lsrs	r3, r1, #16
 8009670:	fb02 3306 	mla	r3, r2, r6, r3
 8009674:	b289      	uxth	r1, r1
 8009676:	3001      	adds	r0, #1
 8009678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800967c:	4285      	cmp	r5, r0
 800967e:	f84c 1b04 	str.w	r1, [ip], #4
 8009682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009686:	dcec      	bgt.n	8009662 <__multadd+0x12>
 8009688:	b30e      	cbz	r6, 80096ce <__multadd+0x7e>
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	42ab      	cmp	r3, r5
 800968e:	dc19      	bgt.n	80096c4 <__multadd+0x74>
 8009690:	6861      	ldr	r1, [r4, #4]
 8009692:	4638      	mov	r0, r7
 8009694:	3101      	adds	r1, #1
 8009696:	f7ff ff79 	bl	800958c <_Balloc>
 800969a:	4680      	mov	r8, r0
 800969c:	b928      	cbnz	r0, 80096aa <__multadd+0x5a>
 800969e:	4602      	mov	r2, r0
 80096a0:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <__multadd+0x84>)
 80096a2:	480d      	ldr	r0, [pc, #52]	; (80096d8 <__multadd+0x88>)
 80096a4:	21ba      	movs	r1, #186	; 0xba
 80096a6:	f000 fb3b 	bl	8009d20 <__assert_func>
 80096aa:	6922      	ldr	r2, [r4, #16]
 80096ac:	3202      	adds	r2, #2
 80096ae:	f104 010c 	add.w	r1, r4, #12
 80096b2:	0092      	lsls	r2, r2, #2
 80096b4:	300c      	adds	r0, #12
 80096b6:	f7ff f8df 	bl	8008878 <memcpy>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4638      	mov	r0, r7
 80096be:	f7ff ffa5 	bl	800960c <_Bfree>
 80096c2:	4644      	mov	r4, r8
 80096c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096c8:	3501      	adds	r5, #1
 80096ca:	615e      	str	r6, [r3, #20]
 80096cc:	6125      	str	r5, [r4, #16]
 80096ce:	4620      	mov	r0, r4
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	0800a53a 	.word	0x0800a53a
 80096d8:	0800a54b 	.word	0x0800a54b

080096dc <__hi0bits>:
 80096dc:	0c03      	lsrs	r3, r0, #16
 80096de:	041b      	lsls	r3, r3, #16
 80096e0:	b9d3      	cbnz	r3, 8009718 <__hi0bits+0x3c>
 80096e2:	0400      	lsls	r0, r0, #16
 80096e4:	2310      	movs	r3, #16
 80096e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096ea:	bf04      	itt	eq
 80096ec:	0200      	lsleq	r0, r0, #8
 80096ee:	3308      	addeq	r3, #8
 80096f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096f4:	bf04      	itt	eq
 80096f6:	0100      	lsleq	r0, r0, #4
 80096f8:	3304      	addeq	r3, #4
 80096fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096fe:	bf04      	itt	eq
 8009700:	0080      	lsleq	r0, r0, #2
 8009702:	3302      	addeq	r3, #2
 8009704:	2800      	cmp	r0, #0
 8009706:	db05      	blt.n	8009714 <__hi0bits+0x38>
 8009708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800970c:	f103 0301 	add.w	r3, r3, #1
 8009710:	bf08      	it	eq
 8009712:	2320      	moveq	r3, #32
 8009714:	4618      	mov	r0, r3
 8009716:	4770      	bx	lr
 8009718:	2300      	movs	r3, #0
 800971a:	e7e4      	b.n	80096e6 <__hi0bits+0xa>

0800971c <__lo0bits>:
 800971c:	6803      	ldr	r3, [r0, #0]
 800971e:	f013 0207 	ands.w	r2, r3, #7
 8009722:	d00c      	beq.n	800973e <__lo0bits+0x22>
 8009724:	07d9      	lsls	r1, r3, #31
 8009726:	d422      	bmi.n	800976e <__lo0bits+0x52>
 8009728:	079a      	lsls	r2, r3, #30
 800972a:	bf49      	itett	mi
 800972c:	085b      	lsrmi	r3, r3, #1
 800972e:	089b      	lsrpl	r3, r3, #2
 8009730:	6003      	strmi	r3, [r0, #0]
 8009732:	2201      	movmi	r2, #1
 8009734:	bf5c      	itt	pl
 8009736:	6003      	strpl	r3, [r0, #0]
 8009738:	2202      	movpl	r2, #2
 800973a:	4610      	mov	r0, r2
 800973c:	4770      	bx	lr
 800973e:	b299      	uxth	r1, r3
 8009740:	b909      	cbnz	r1, 8009746 <__lo0bits+0x2a>
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	2210      	movs	r2, #16
 8009746:	b2d9      	uxtb	r1, r3
 8009748:	b909      	cbnz	r1, 800974e <__lo0bits+0x32>
 800974a:	3208      	adds	r2, #8
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	0719      	lsls	r1, r3, #28
 8009750:	bf04      	itt	eq
 8009752:	091b      	lsreq	r3, r3, #4
 8009754:	3204      	addeq	r2, #4
 8009756:	0799      	lsls	r1, r3, #30
 8009758:	bf04      	itt	eq
 800975a:	089b      	lsreq	r3, r3, #2
 800975c:	3202      	addeq	r2, #2
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d403      	bmi.n	800976a <__lo0bits+0x4e>
 8009762:	085b      	lsrs	r3, r3, #1
 8009764:	f102 0201 	add.w	r2, r2, #1
 8009768:	d003      	beq.n	8009772 <__lo0bits+0x56>
 800976a:	6003      	str	r3, [r0, #0]
 800976c:	e7e5      	b.n	800973a <__lo0bits+0x1e>
 800976e:	2200      	movs	r2, #0
 8009770:	e7e3      	b.n	800973a <__lo0bits+0x1e>
 8009772:	2220      	movs	r2, #32
 8009774:	e7e1      	b.n	800973a <__lo0bits+0x1e>
	...

08009778 <__i2b>:
 8009778:	b510      	push	{r4, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	2101      	movs	r1, #1
 800977e:	f7ff ff05 	bl	800958c <_Balloc>
 8009782:	4602      	mov	r2, r0
 8009784:	b928      	cbnz	r0, 8009792 <__i2b+0x1a>
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <__i2b+0x24>)
 8009788:	4805      	ldr	r0, [pc, #20]	; (80097a0 <__i2b+0x28>)
 800978a:	f240 1145 	movw	r1, #325	; 0x145
 800978e:	f000 fac7 	bl	8009d20 <__assert_func>
 8009792:	2301      	movs	r3, #1
 8009794:	6144      	str	r4, [r0, #20]
 8009796:	6103      	str	r3, [r0, #16]
 8009798:	bd10      	pop	{r4, pc}
 800979a:	bf00      	nop
 800979c:	0800a53a 	.word	0x0800a53a
 80097a0:	0800a54b 	.word	0x0800a54b

080097a4 <__multiply>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	4691      	mov	r9, r2
 80097aa:	690a      	ldr	r2, [r1, #16]
 80097ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	bfb8      	it	lt
 80097b4:	460b      	movlt	r3, r1
 80097b6:	460c      	mov	r4, r1
 80097b8:	bfbc      	itt	lt
 80097ba:	464c      	movlt	r4, r9
 80097bc:	4699      	movlt	r9, r3
 80097be:	6927      	ldr	r7, [r4, #16]
 80097c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	6861      	ldr	r1, [r4, #4]
 80097c8:	eb07 060a 	add.w	r6, r7, sl
 80097cc:	42b3      	cmp	r3, r6
 80097ce:	b085      	sub	sp, #20
 80097d0:	bfb8      	it	lt
 80097d2:	3101      	addlt	r1, #1
 80097d4:	f7ff feda 	bl	800958c <_Balloc>
 80097d8:	b930      	cbnz	r0, 80097e8 <__multiply+0x44>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b44      	ldr	r3, [pc, #272]	; (80098f0 <__multiply+0x14c>)
 80097de:	4845      	ldr	r0, [pc, #276]	; (80098f4 <__multiply+0x150>)
 80097e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80097e4:	f000 fa9c 	bl	8009d20 <__assert_func>
 80097e8:	f100 0514 	add.w	r5, r0, #20
 80097ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097f0:	462b      	mov	r3, r5
 80097f2:	2200      	movs	r2, #0
 80097f4:	4543      	cmp	r3, r8
 80097f6:	d321      	bcc.n	800983c <__multiply+0x98>
 80097f8:	f104 0314 	add.w	r3, r4, #20
 80097fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009800:	f109 0314 	add.w	r3, r9, #20
 8009804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009808:	9202      	str	r2, [sp, #8]
 800980a:	1b3a      	subs	r2, r7, r4
 800980c:	3a15      	subs	r2, #21
 800980e:	f022 0203 	bic.w	r2, r2, #3
 8009812:	3204      	adds	r2, #4
 8009814:	f104 0115 	add.w	r1, r4, #21
 8009818:	428f      	cmp	r7, r1
 800981a:	bf38      	it	cc
 800981c:	2204      	movcc	r2, #4
 800981e:	9201      	str	r2, [sp, #4]
 8009820:	9a02      	ldr	r2, [sp, #8]
 8009822:	9303      	str	r3, [sp, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d80c      	bhi.n	8009842 <__multiply+0x9e>
 8009828:	2e00      	cmp	r6, #0
 800982a:	dd03      	ble.n	8009834 <__multiply+0x90>
 800982c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009830:	2b00      	cmp	r3, #0
 8009832:	d05b      	beq.n	80098ec <__multiply+0x148>
 8009834:	6106      	str	r6, [r0, #16]
 8009836:	b005      	add	sp, #20
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	f843 2b04 	str.w	r2, [r3], #4
 8009840:	e7d8      	b.n	80097f4 <__multiply+0x50>
 8009842:	f8b3 a000 	ldrh.w	sl, [r3]
 8009846:	f1ba 0f00 	cmp.w	sl, #0
 800984a:	d024      	beq.n	8009896 <__multiply+0xf2>
 800984c:	f104 0e14 	add.w	lr, r4, #20
 8009850:	46a9      	mov	r9, r5
 8009852:	f04f 0c00 	mov.w	ip, #0
 8009856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800985a:	f8d9 1000 	ldr.w	r1, [r9]
 800985e:	fa1f fb82 	uxth.w	fp, r2
 8009862:	b289      	uxth	r1, r1
 8009864:	fb0a 110b 	mla	r1, sl, fp, r1
 8009868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800986c:	f8d9 2000 	ldr.w	r2, [r9]
 8009870:	4461      	add	r1, ip
 8009872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009876:	fb0a c20b 	mla	r2, sl, fp, ip
 800987a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800987e:	b289      	uxth	r1, r1
 8009880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009884:	4577      	cmp	r7, lr
 8009886:	f849 1b04 	str.w	r1, [r9], #4
 800988a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800988e:	d8e2      	bhi.n	8009856 <__multiply+0xb2>
 8009890:	9a01      	ldr	r2, [sp, #4]
 8009892:	f845 c002 	str.w	ip, [r5, r2]
 8009896:	9a03      	ldr	r2, [sp, #12]
 8009898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800989c:	3304      	adds	r3, #4
 800989e:	f1b9 0f00 	cmp.w	r9, #0
 80098a2:	d021      	beq.n	80098e8 <__multiply+0x144>
 80098a4:	6829      	ldr	r1, [r5, #0]
 80098a6:	f104 0c14 	add.w	ip, r4, #20
 80098aa:	46ae      	mov	lr, r5
 80098ac:	f04f 0a00 	mov.w	sl, #0
 80098b0:	f8bc b000 	ldrh.w	fp, [ip]
 80098b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098b8:	fb09 220b 	mla	r2, r9, fp, r2
 80098bc:	4452      	add	r2, sl
 80098be:	b289      	uxth	r1, r1
 80098c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098c4:	f84e 1b04 	str.w	r1, [lr], #4
 80098c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80098cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098d0:	f8be 1000 	ldrh.w	r1, [lr]
 80098d4:	fb09 110a 	mla	r1, r9, sl, r1
 80098d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80098dc:	4567      	cmp	r7, ip
 80098de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098e2:	d8e5      	bhi.n	80098b0 <__multiply+0x10c>
 80098e4:	9a01      	ldr	r2, [sp, #4]
 80098e6:	50a9      	str	r1, [r5, r2]
 80098e8:	3504      	adds	r5, #4
 80098ea:	e799      	b.n	8009820 <__multiply+0x7c>
 80098ec:	3e01      	subs	r6, #1
 80098ee:	e79b      	b.n	8009828 <__multiply+0x84>
 80098f0:	0800a53a 	.word	0x0800a53a
 80098f4:	0800a54b 	.word	0x0800a54b

080098f8 <__pow5mult>:
 80098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	4615      	mov	r5, r2
 80098fe:	f012 0203 	ands.w	r2, r2, #3
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	d007      	beq.n	8009918 <__pow5mult+0x20>
 8009908:	4c25      	ldr	r4, [pc, #148]	; (80099a0 <__pow5mult+0xa8>)
 800990a:	3a01      	subs	r2, #1
 800990c:	2300      	movs	r3, #0
 800990e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009912:	f7ff fe9d 	bl	8009650 <__multadd>
 8009916:	4607      	mov	r7, r0
 8009918:	10ad      	asrs	r5, r5, #2
 800991a:	d03d      	beq.n	8009998 <__pow5mult+0xa0>
 800991c:	69f4      	ldr	r4, [r6, #28]
 800991e:	b97c      	cbnz	r4, 8009940 <__pow5mult+0x48>
 8009920:	2010      	movs	r0, #16
 8009922:	f7fd ff4f 	bl	80077c4 <malloc>
 8009926:	4602      	mov	r2, r0
 8009928:	61f0      	str	r0, [r6, #28]
 800992a:	b928      	cbnz	r0, 8009938 <__pow5mult+0x40>
 800992c:	4b1d      	ldr	r3, [pc, #116]	; (80099a4 <__pow5mult+0xac>)
 800992e:	481e      	ldr	r0, [pc, #120]	; (80099a8 <__pow5mult+0xb0>)
 8009930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009934:	f000 f9f4 	bl	8009d20 <__assert_func>
 8009938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800993c:	6004      	str	r4, [r0, #0]
 800993e:	60c4      	str	r4, [r0, #12]
 8009940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009948:	b94c      	cbnz	r4, 800995e <__pow5mult+0x66>
 800994a:	f240 2171 	movw	r1, #625	; 0x271
 800994e:	4630      	mov	r0, r6
 8009950:	f7ff ff12 	bl	8009778 <__i2b>
 8009954:	2300      	movs	r3, #0
 8009956:	f8c8 0008 	str.w	r0, [r8, #8]
 800995a:	4604      	mov	r4, r0
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	f04f 0900 	mov.w	r9, #0
 8009962:	07eb      	lsls	r3, r5, #31
 8009964:	d50a      	bpl.n	800997c <__pow5mult+0x84>
 8009966:	4639      	mov	r1, r7
 8009968:	4622      	mov	r2, r4
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ff1a 	bl	80097a4 <__multiply>
 8009970:	4639      	mov	r1, r7
 8009972:	4680      	mov	r8, r0
 8009974:	4630      	mov	r0, r6
 8009976:	f7ff fe49 	bl	800960c <_Bfree>
 800997a:	4647      	mov	r7, r8
 800997c:	106d      	asrs	r5, r5, #1
 800997e:	d00b      	beq.n	8009998 <__pow5mult+0xa0>
 8009980:	6820      	ldr	r0, [r4, #0]
 8009982:	b938      	cbnz	r0, 8009994 <__pow5mult+0x9c>
 8009984:	4622      	mov	r2, r4
 8009986:	4621      	mov	r1, r4
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff ff0b 	bl	80097a4 <__multiply>
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	f8c0 9000 	str.w	r9, [r0]
 8009994:	4604      	mov	r4, r0
 8009996:	e7e4      	b.n	8009962 <__pow5mult+0x6a>
 8009998:	4638      	mov	r0, r7
 800999a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999e:	bf00      	nop
 80099a0:	0800a698 	.word	0x0800a698
 80099a4:	0800a4cb 	.word	0x0800a4cb
 80099a8:	0800a54b 	.word	0x0800a54b

080099ac <__lshift>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	460c      	mov	r4, r1
 80099b2:	6849      	ldr	r1, [r1, #4]
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	4607      	mov	r7, r0
 80099be:	4691      	mov	r9, r2
 80099c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099c4:	f108 0601 	add.w	r6, r8, #1
 80099c8:	42b3      	cmp	r3, r6
 80099ca:	db0b      	blt.n	80099e4 <__lshift+0x38>
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff fddd 	bl	800958c <_Balloc>
 80099d2:	4605      	mov	r5, r0
 80099d4:	b948      	cbnz	r0, 80099ea <__lshift+0x3e>
 80099d6:	4602      	mov	r2, r0
 80099d8:	4b28      	ldr	r3, [pc, #160]	; (8009a7c <__lshift+0xd0>)
 80099da:	4829      	ldr	r0, [pc, #164]	; (8009a80 <__lshift+0xd4>)
 80099dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80099e0:	f000 f99e 	bl	8009d20 <__assert_func>
 80099e4:	3101      	adds	r1, #1
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	e7ee      	b.n	80099c8 <__lshift+0x1c>
 80099ea:	2300      	movs	r3, #0
 80099ec:	f100 0114 	add.w	r1, r0, #20
 80099f0:	f100 0210 	add.w	r2, r0, #16
 80099f4:	4618      	mov	r0, r3
 80099f6:	4553      	cmp	r3, sl
 80099f8:	db33      	blt.n	8009a62 <__lshift+0xb6>
 80099fa:	6920      	ldr	r0, [r4, #16]
 80099fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a00:	f104 0314 	add.w	r3, r4, #20
 8009a04:	f019 091f 	ands.w	r9, r9, #31
 8009a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a10:	d02b      	beq.n	8009a6a <__lshift+0xbe>
 8009a12:	f1c9 0e20 	rsb	lr, r9, #32
 8009a16:	468a      	mov	sl, r1
 8009a18:	2200      	movs	r2, #0
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a20:	4310      	orrs	r0, r2
 8009a22:	f84a 0b04 	str.w	r0, [sl], #4
 8009a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2a:	459c      	cmp	ip, r3
 8009a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a30:	d8f3      	bhi.n	8009a1a <__lshift+0x6e>
 8009a32:	ebac 0304 	sub.w	r3, ip, r4
 8009a36:	3b15      	subs	r3, #21
 8009a38:	f023 0303 	bic.w	r3, r3, #3
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	f104 0015 	add.w	r0, r4, #21
 8009a42:	4584      	cmp	ip, r0
 8009a44:	bf38      	it	cc
 8009a46:	2304      	movcc	r3, #4
 8009a48:	50ca      	str	r2, [r1, r3]
 8009a4a:	b10a      	cbz	r2, 8009a50 <__lshift+0xa4>
 8009a4c:	f108 0602 	add.w	r6, r8, #2
 8009a50:	3e01      	subs	r6, #1
 8009a52:	4638      	mov	r0, r7
 8009a54:	612e      	str	r6, [r5, #16]
 8009a56:	4621      	mov	r1, r4
 8009a58:	f7ff fdd8 	bl	800960c <_Bfree>
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a66:	3301      	adds	r3, #1
 8009a68:	e7c5      	b.n	80099f6 <__lshift+0x4a>
 8009a6a:	3904      	subs	r1, #4
 8009a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a74:	459c      	cmp	ip, r3
 8009a76:	d8f9      	bhi.n	8009a6c <__lshift+0xc0>
 8009a78:	e7ea      	b.n	8009a50 <__lshift+0xa4>
 8009a7a:	bf00      	nop
 8009a7c:	0800a53a 	.word	0x0800a53a
 8009a80:	0800a54b 	.word	0x0800a54b

08009a84 <__mcmp>:
 8009a84:	b530      	push	{r4, r5, lr}
 8009a86:	6902      	ldr	r2, [r0, #16]
 8009a88:	690c      	ldr	r4, [r1, #16]
 8009a8a:	1b12      	subs	r2, r2, r4
 8009a8c:	d10e      	bne.n	8009aac <__mcmp+0x28>
 8009a8e:	f100 0314 	add.w	r3, r0, #20
 8009a92:	3114      	adds	r1, #20
 8009a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009aa4:	42a5      	cmp	r5, r4
 8009aa6:	d003      	beq.n	8009ab0 <__mcmp+0x2c>
 8009aa8:	d305      	bcc.n	8009ab6 <__mcmp+0x32>
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4610      	mov	r0, r2
 8009aae:	bd30      	pop	{r4, r5, pc}
 8009ab0:	4283      	cmp	r3, r0
 8009ab2:	d3f3      	bcc.n	8009a9c <__mcmp+0x18>
 8009ab4:	e7fa      	b.n	8009aac <__mcmp+0x28>
 8009ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aba:	e7f7      	b.n	8009aac <__mcmp+0x28>

08009abc <__mdiff>:
 8009abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4690      	mov	r8, r2
 8009aca:	f7ff ffdb 	bl	8009a84 <__mcmp>
 8009ace:	1e05      	subs	r5, r0, #0
 8009ad0:	d110      	bne.n	8009af4 <__mdiff+0x38>
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff fd59 	bl	800958c <_Balloc>
 8009ada:	b930      	cbnz	r0, 8009aea <__mdiff+0x2e>
 8009adc:	4b3a      	ldr	r3, [pc, #232]	; (8009bc8 <__mdiff+0x10c>)
 8009ade:	4602      	mov	r2, r0
 8009ae0:	f240 2137 	movw	r1, #567	; 0x237
 8009ae4:	4839      	ldr	r0, [pc, #228]	; (8009bcc <__mdiff+0x110>)
 8009ae6:	f000 f91b 	bl	8009d20 <__assert_func>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	bfa4      	itt	ge
 8009af6:	4643      	movge	r3, r8
 8009af8:	46a0      	movge	r8, r4
 8009afa:	4630      	mov	r0, r6
 8009afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b00:	bfa6      	itte	ge
 8009b02:	461c      	movge	r4, r3
 8009b04:	2500      	movge	r5, #0
 8009b06:	2501      	movlt	r5, #1
 8009b08:	f7ff fd40 	bl	800958c <_Balloc>
 8009b0c:	b920      	cbnz	r0, 8009b18 <__mdiff+0x5c>
 8009b0e:	4b2e      	ldr	r3, [pc, #184]	; (8009bc8 <__mdiff+0x10c>)
 8009b10:	4602      	mov	r2, r0
 8009b12:	f240 2145 	movw	r1, #581	; 0x245
 8009b16:	e7e5      	b.n	8009ae4 <__mdiff+0x28>
 8009b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b1c:	6926      	ldr	r6, [r4, #16]
 8009b1e:	60c5      	str	r5, [r0, #12]
 8009b20:	f104 0914 	add.w	r9, r4, #20
 8009b24:	f108 0514 	add.w	r5, r8, #20
 8009b28:	f100 0e14 	add.w	lr, r0, #20
 8009b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b34:	f108 0210 	add.w	r2, r8, #16
 8009b38:	46f2      	mov	sl, lr
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b44:	fa11 f88b 	uxtah	r8, r1, fp
 8009b48:	b299      	uxth	r1, r3
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	eba8 0801 	sub.w	r8, r8, r1
 8009b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b58:	fa1f f888 	uxth.w	r8, r8
 8009b5c:	1419      	asrs	r1, r3, #16
 8009b5e:	454e      	cmp	r6, r9
 8009b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b64:	f84a 3b04 	str.w	r3, [sl], #4
 8009b68:	d8e8      	bhi.n	8009b3c <__mdiff+0x80>
 8009b6a:	1b33      	subs	r3, r6, r4
 8009b6c:	3b15      	subs	r3, #21
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	3304      	adds	r3, #4
 8009b74:	3415      	adds	r4, #21
 8009b76:	42a6      	cmp	r6, r4
 8009b78:	bf38      	it	cc
 8009b7a:	2304      	movcc	r3, #4
 8009b7c:	441d      	add	r5, r3
 8009b7e:	4473      	add	r3, lr
 8009b80:	469e      	mov	lr, r3
 8009b82:	462e      	mov	r6, r5
 8009b84:	4566      	cmp	r6, ip
 8009b86:	d30e      	bcc.n	8009ba6 <__mdiff+0xea>
 8009b88:	f10c 0203 	add.w	r2, ip, #3
 8009b8c:	1b52      	subs	r2, r2, r5
 8009b8e:	f022 0203 	bic.w	r2, r2, #3
 8009b92:	3d03      	subs	r5, #3
 8009b94:	45ac      	cmp	ip, r5
 8009b96:	bf38      	it	cc
 8009b98:	2200      	movcc	r2, #0
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ba0:	b17a      	cbz	r2, 8009bc2 <__mdiff+0x106>
 8009ba2:	6107      	str	r7, [r0, #16]
 8009ba4:	e7a4      	b.n	8009af0 <__mdiff+0x34>
 8009ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009baa:	fa11 f288 	uxtah	r2, r1, r8
 8009bae:	1414      	asrs	r4, r2, #16
 8009bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bb4:	b292      	uxth	r2, r2
 8009bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bba:	f84e 2b04 	str.w	r2, [lr], #4
 8009bbe:	1421      	asrs	r1, r4, #16
 8009bc0:	e7e0      	b.n	8009b84 <__mdiff+0xc8>
 8009bc2:	3f01      	subs	r7, #1
 8009bc4:	e7ea      	b.n	8009b9c <__mdiff+0xe0>
 8009bc6:	bf00      	nop
 8009bc8:	0800a53a 	.word	0x0800a53a
 8009bcc:	0800a54b 	.word	0x0800a54b

08009bd0 <__d2b>:
 8009bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	ec59 8b10 	vmov	r8, r9, d0
 8009bdc:	4616      	mov	r6, r2
 8009bde:	f7ff fcd5 	bl	800958c <_Balloc>
 8009be2:	4604      	mov	r4, r0
 8009be4:	b930      	cbnz	r0, 8009bf4 <__d2b+0x24>
 8009be6:	4602      	mov	r2, r0
 8009be8:	4b24      	ldr	r3, [pc, #144]	; (8009c7c <__d2b+0xac>)
 8009bea:	4825      	ldr	r0, [pc, #148]	; (8009c80 <__d2b+0xb0>)
 8009bec:	f240 310f 	movw	r1, #783	; 0x30f
 8009bf0:	f000 f896 	bl	8009d20 <__assert_func>
 8009bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bfc:	bb2d      	cbnz	r5, 8009c4a <__d2b+0x7a>
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	f1b8 0300 	subs.w	r3, r8, #0
 8009c04:	d026      	beq.n	8009c54 <__d2b+0x84>
 8009c06:	4668      	mov	r0, sp
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	f7ff fd87 	bl	800971c <__lo0bits>
 8009c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c12:	b1e8      	cbz	r0, 8009c50 <__d2b+0x80>
 8009c14:	f1c0 0320 	rsb	r3, r0, #32
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	40c2      	lsrs	r2, r0
 8009c20:	6163      	str	r3, [r4, #20]
 8009c22:	9201      	str	r2, [sp, #4]
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	61a3      	str	r3, [r4, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bf14      	ite	ne
 8009c2c:	2202      	movne	r2, #2
 8009c2e:	2201      	moveq	r2, #1
 8009c30:	6122      	str	r2, [r4, #16]
 8009c32:	b1bd      	cbz	r5, 8009c64 <__d2b+0x94>
 8009c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c38:	4405      	add	r5, r0
 8009c3a:	603d      	str	r5, [r7, #0]
 8009c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c40:	6030      	str	r0, [r6, #0]
 8009c42:	4620      	mov	r0, r4
 8009c44:	b003      	add	sp, #12
 8009c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c4e:	e7d6      	b.n	8009bfe <__d2b+0x2e>
 8009c50:	6161      	str	r1, [r4, #20]
 8009c52:	e7e7      	b.n	8009c24 <__d2b+0x54>
 8009c54:	a801      	add	r0, sp, #4
 8009c56:	f7ff fd61 	bl	800971c <__lo0bits>
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	6163      	str	r3, [r4, #20]
 8009c5e:	3020      	adds	r0, #32
 8009c60:	2201      	movs	r2, #1
 8009c62:	e7e5      	b.n	8009c30 <__d2b+0x60>
 8009c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c6c:	6038      	str	r0, [r7, #0]
 8009c6e:	6918      	ldr	r0, [r3, #16]
 8009c70:	f7ff fd34 	bl	80096dc <__hi0bits>
 8009c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c78:	e7e2      	b.n	8009c40 <__d2b+0x70>
 8009c7a:	bf00      	nop
 8009c7c:	0800a53a 	.word	0x0800a53a
 8009c80:	0800a54b 	.word	0x0800a54b

08009c84 <_mprec_log10>:
 8009c84:	2817      	cmp	r0, #23
 8009c86:	b5d0      	push	{r4, r6, r7, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	dc07      	bgt.n	8009c9c <_mprec_log10+0x18>
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <_mprec_log10+0x30>)
 8009c8e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c96:	ec41 0b10 	vmov	d0, r0, r1
 8009c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8009c9c:	4906      	ldr	r1, [pc, #24]	; (8009cb8 <_mprec_log10+0x34>)
 8009c9e:	4f07      	ldr	r7, [pc, #28]	; (8009cbc <_mprec_log10+0x38>)
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	f7f6 fcc6 	bl	8000638 <__aeabi_dmul>
 8009cac:	3c01      	subs	r4, #1
 8009cae:	d1f9      	bne.n	8009ca4 <_mprec_log10+0x20>
 8009cb0:	e7f1      	b.n	8009c96 <_mprec_log10+0x12>
 8009cb2:	bf00      	nop
 8009cb4:	0800a5d0 	.word	0x0800a5d0
 8009cb8:	3ff00000 	.word	0x3ff00000
 8009cbc:	40240000 	.word	0x40240000

08009cc0 <_realloc_r>:
 8009cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4614      	mov	r4, r2
 8009cc8:	460e      	mov	r6, r1
 8009cca:	b921      	cbnz	r1, 8009cd6 <_realloc_r+0x16>
 8009ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	f7fd bda7 	b.w	8007824 <_malloc_r>
 8009cd6:	b92a      	cbnz	r2, 8009ce4 <_realloc_r+0x24>
 8009cd8:	f7fe f892 	bl	8007e00 <_free_r>
 8009cdc:	4625      	mov	r5, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce4:	f000 f850 	bl	8009d88 <_malloc_usable_size_r>
 8009ce8:	4284      	cmp	r4, r0
 8009cea:	4607      	mov	r7, r0
 8009cec:	d802      	bhi.n	8009cf4 <_realloc_r+0x34>
 8009cee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cf2:	d812      	bhi.n	8009d1a <_realloc_r+0x5a>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	f7fd fd94 	bl	8007824 <_malloc_r>
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d0ed      	beq.n	8009cde <_realloc_r+0x1e>
 8009d02:	42bc      	cmp	r4, r7
 8009d04:	4622      	mov	r2, r4
 8009d06:	4631      	mov	r1, r6
 8009d08:	bf28      	it	cs
 8009d0a:	463a      	movcs	r2, r7
 8009d0c:	f7fe fdb4 	bl	8008878 <memcpy>
 8009d10:	4631      	mov	r1, r6
 8009d12:	4640      	mov	r0, r8
 8009d14:	f7fe f874 	bl	8007e00 <_free_r>
 8009d18:	e7e1      	b.n	8009cde <_realloc_r+0x1e>
 8009d1a:	4635      	mov	r5, r6
 8009d1c:	e7df      	b.n	8009cde <_realloc_r+0x1e>
	...

08009d20 <__assert_func>:
 8009d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d22:	4614      	mov	r4, r2
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <__assert_func+0x2c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	68d8      	ldr	r0, [r3, #12]
 8009d2e:	b14c      	cbz	r4, 8009d44 <__assert_func+0x24>
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <__assert_func+0x30>)
 8009d32:	9100      	str	r1, [sp, #0]
 8009d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d38:	4906      	ldr	r1, [pc, #24]	; (8009d54 <__assert_func+0x34>)
 8009d3a:	462b      	mov	r3, r5
 8009d3c:	f000 f82c 	bl	8009d98 <fiprintf>
 8009d40:	f000 f83c 	bl	8009dbc <abort>
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <__assert_func+0x38>)
 8009d46:	461c      	mov	r4, r3
 8009d48:	e7f3      	b.n	8009d32 <__assert_func+0x12>
 8009d4a:	bf00      	nop
 8009d4c:	200000b0 	.word	0x200000b0
 8009d50:	0800a6a4 	.word	0x0800a6a4
 8009d54:	0800a6b1 	.word	0x0800a6b1
 8009d58:	0800a6df 	.word	0x0800a6df

08009d5c <_calloc_r>:
 8009d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5e:	fba1 2402 	umull	r2, r4, r1, r2
 8009d62:	b94c      	cbnz	r4, 8009d78 <_calloc_r+0x1c>
 8009d64:	4611      	mov	r1, r2
 8009d66:	9201      	str	r2, [sp, #4]
 8009d68:	f7fd fd5c 	bl	8007824 <_malloc_r>
 8009d6c:	9a01      	ldr	r2, [sp, #4]
 8009d6e:	4605      	mov	r5, r0
 8009d70:	b930      	cbnz	r0, 8009d80 <_calloc_r+0x24>
 8009d72:	4628      	mov	r0, r5
 8009d74:	b003      	add	sp, #12
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	220c      	movs	r2, #12
 8009d7a:	6002      	str	r2, [r0, #0]
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	e7f8      	b.n	8009d72 <_calloc_r+0x16>
 8009d80:	4621      	mov	r1, r4
 8009d82:	f7fd ffb0 	bl	8007ce6 <memset>
 8009d86:	e7f4      	b.n	8009d72 <_calloc_r+0x16>

08009d88 <_malloc_usable_size_r>:
 8009d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8c:	1f18      	subs	r0, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfbc      	itt	lt
 8009d92:	580b      	ldrlt	r3, [r1, r0]
 8009d94:	18c0      	addlt	r0, r0, r3
 8009d96:	4770      	bx	lr

08009d98 <fiprintf>:
 8009d98:	b40e      	push	{r1, r2, r3}
 8009d9a:	b503      	push	{r0, r1, lr}
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	ab03      	add	r3, sp, #12
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <fiprintf+0x20>)
 8009da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da6:	6800      	ldr	r0, [r0, #0]
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	f000 f837 	bl	8009e1c <_vfiprintf_r>
 8009dae:	b002      	add	sp, #8
 8009db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db4:	b003      	add	sp, #12
 8009db6:	4770      	bx	lr
 8009db8:	200000b0 	.word	0x200000b0

08009dbc <abort>:
 8009dbc:	b508      	push	{r3, lr}
 8009dbe:	2006      	movs	r0, #6
 8009dc0:	f000 fa04 	bl	800a1cc <raise>
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	f7f8 f9a7 	bl	8002118 <_exit>

08009dca <__sfputc_r>:
 8009dca:	6893      	ldr	r3, [r2, #8]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	b410      	push	{r4}
 8009dd2:	6093      	str	r3, [r2, #8]
 8009dd4:	da08      	bge.n	8009de8 <__sfputc_r+0x1e>
 8009dd6:	6994      	ldr	r4, [r2, #24]
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	db01      	blt.n	8009de0 <__sfputc_r+0x16>
 8009ddc:	290a      	cmp	r1, #10
 8009dde:	d103      	bne.n	8009de8 <__sfputc_r+0x1e>
 8009de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de4:	f000 b934 	b.w	800a050 <__swbuf_r>
 8009de8:	6813      	ldr	r3, [r2, #0]
 8009dea:	1c58      	adds	r0, r3, #1
 8009dec:	6010      	str	r0, [r2, #0]
 8009dee:	7019      	strb	r1, [r3, #0]
 8009df0:	4608      	mov	r0, r1
 8009df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <__sfputs_r>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	4614      	mov	r4, r2
 8009e00:	18d5      	adds	r5, r2, r3
 8009e02:	42ac      	cmp	r4, r5
 8009e04:	d101      	bne.n	8009e0a <__sfputs_r+0x12>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e007      	b.n	8009e1a <__sfputs_r+0x22>
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	463a      	mov	r2, r7
 8009e10:	4630      	mov	r0, r6
 8009e12:	f7ff ffda 	bl	8009dca <__sfputc_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d1f3      	bne.n	8009e02 <__sfputs_r+0xa>
 8009e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e1c <_vfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	460d      	mov	r5, r1
 8009e22:	b09d      	sub	sp, #116	; 0x74
 8009e24:	4614      	mov	r4, r2
 8009e26:	4698      	mov	r8, r3
 8009e28:	4606      	mov	r6, r0
 8009e2a:	b118      	cbz	r0, 8009e34 <_vfiprintf_r+0x18>
 8009e2c:	6a03      	ldr	r3, [r0, #32]
 8009e2e:	b90b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x18>
 8009e30:	f7fd fec0 	bl	8007bb4 <__sinit>
 8009e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d405      	bmi.n	8009e46 <_vfiprintf_r+0x2a>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	059a      	lsls	r2, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_vfiprintf_r+0x2a>
 8009e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e42:	f7fd ffda 	bl	8007dfa <__retarget_lock_acquire_recursive>
 8009e46:	89ab      	ldrh	r3, [r5, #12]
 8009e48:	071b      	lsls	r3, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <_vfiprintf_r+0x34>
 8009e4c:	692b      	ldr	r3, [r5, #16]
 8009e4e:	b99b      	cbnz	r3, 8009e78 <_vfiprintf_r+0x5c>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f93a 	bl	800a0cc <__swsetup_r>
 8009e58:	b170      	cbz	r0, 8009e78 <_vfiprintf_r+0x5c>
 8009e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5c:	07dc      	lsls	r4, r3, #31
 8009e5e:	d504      	bpl.n	8009e6a <_vfiprintf_r+0x4e>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b01d      	add	sp, #116	; 0x74
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	0598      	lsls	r0, r3, #22
 8009e6e:	d4f7      	bmi.n	8009e60 <_vfiprintf_r+0x44>
 8009e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e72:	f7fd ffc3 	bl	8007dfc <__retarget_lock_release_recursive>
 8009e76:	e7f3      	b.n	8009e60 <_vfiprintf_r+0x44>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e86:	2330      	movs	r3, #48	; 0x30
 8009e88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a03c <_vfiprintf_r+0x220>
 8009e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e90:	f04f 0901 	mov.w	r9, #1
 8009e94:	4623      	mov	r3, r4
 8009e96:	469a      	mov	sl, r3
 8009e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e9c:	b10a      	cbz	r2, 8009ea2 <_vfiprintf_r+0x86>
 8009e9e:	2a25      	cmp	r2, #37	; 0x25
 8009ea0:	d1f9      	bne.n	8009e96 <_vfiprintf_r+0x7a>
 8009ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea6:	d00b      	beq.n	8009ec0 <_vfiprintf_r+0xa4>
 8009ea8:	465b      	mov	r3, fp
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ffa2 	bl	8009df8 <__sfputs_r>
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f000 80a9 	beq.w	800a00c <_vfiprintf_r+0x1f0>
 8009eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ebc:	445a      	add	r2, fp
 8009ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 80a1 	beq.w	800a00c <_vfiprintf_r+0x1f0>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed4:	f10a 0a01 	add.w	sl, sl, #1
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	9307      	str	r3, [sp, #28]
 8009edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ee2:	4654      	mov	r4, sl
 8009ee4:	2205      	movs	r2, #5
 8009ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eea:	4854      	ldr	r0, [pc, #336]	; (800a03c <_vfiprintf_r+0x220>)
 8009eec:	f7f6 f998 	bl	8000220 <memchr>
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	b9d8      	cbnz	r0, 8009f2c <_vfiprintf_r+0x110>
 8009ef4:	06d1      	lsls	r1, r2, #27
 8009ef6:	bf44      	itt	mi
 8009ef8:	2320      	movmi	r3, #32
 8009efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009efe:	0713      	lsls	r3, r2, #28
 8009f00:	bf44      	itt	mi
 8009f02:	232b      	movmi	r3, #43	; 0x2b
 8009f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f0e:	d015      	beq.n	8009f3c <_vfiprintf_r+0x120>
 8009f10:	9a07      	ldr	r2, [sp, #28]
 8009f12:	4654      	mov	r4, sl
 8009f14:	2000      	movs	r0, #0
 8009f16:	f04f 0c0a 	mov.w	ip, #10
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f20:	3b30      	subs	r3, #48	; 0x30
 8009f22:	2b09      	cmp	r3, #9
 8009f24:	d94d      	bls.n	8009fc2 <_vfiprintf_r+0x1a6>
 8009f26:	b1b0      	cbz	r0, 8009f56 <_vfiprintf_r+0x13a>
 8009f28:	9207      	str	r2, [sp, #28]
 8009f2a:	e014      	b.n	8009f56 <_vfiprintf_r+0x13a>
 8009f2c:	eba0 0308 	sub.w	r3, r0, r8
 8009f30:	fa09 f303 	lsl.w	r3, r9, r3
 8009f34:	4313      	orrs	r3, r2
 8009f36:	9304      	str	r3, [sp, #16]
 8009f38:	46a2      	mov	sl, r4
 8009f3a:	e7d2      	b.n	8009ee2 <_vfiprintf_r+0xc6>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	1d19      	adds	r1, r3, #4
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9103      	str	r1, [sp, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfbb      	ittet	lt
 8009f48:	425b      	neglt	r3, r3
 8009f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f4e:	9307      	strge	r3, [sp, #28]
 8009f50:	9307      	strlt	r3, [sp, #28]
 8009f52:	bfb8      	it	lt
 8009f54:	9204      	strlt	r2, [sp, #16]
 8009f56:	7823      	ldrb	r3, [r4, #0]
 8009f58:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5a:	d10c      	bne.n	8009f76 <_vfiprintf_r+0x15a>
 8009f5c:	7863      	ldrb	r3, [r4, #1]
 8009f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f60:	d134      	bne.n	8009fcc <_vfiprintf_r+0x1b0>
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	1d1a      	adds	r2, r3, #4
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	9203      	str	r2, [sp, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bfb8      	it	lt
 8009f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f72:	3402      	adds	r4, #2
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a04c <_vfiprintf_r+0x230>
 8009f7a:	7821      	ldrb	r1, [r4, #0]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7f6 f94e 	bl	8000220 <memchr>
 8009f84:	b138      	cbz	r0, 8009f96 <_vfiprintf_r+0x17a>
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	eba0 000a 	sub.w	r0, r0, sl
 8009f8c:	2240      	movs	r2, #64	; 0x40
 8009f8e:	4082      	lsls	r2, r0
 8009f90:	4313      	orrs	r3, r2
 8009f92:	3401      	adds	r4, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9a:	4829      	ldr	r0, [pc, #164]	; (800a040 <_vfiprintf_r+0x224>)
 8009f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fa0:	2206      	movs	r2, #6
 8009fa2:	f7f6 f93d 	bl	8000220 <memchr>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d03f      	beq.n	800a02a <_vfiprintf_r+0x20e>
 8009faa:	4b26      	ldr	r3, [pc, #152]	; (800a044 <_vfiprintf_r+0x228>)
 8009fac:	bb1b      	cbnz	r3, 8009ff6 <_vfiprintf_r+0x1da>
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	f023 0307 	bic.w	r3, r3, #7
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fbc:	443b      	add	r3, r7
 8009fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc0:	e768      	b.n	8009e94 <_vfiprintf_r+0x78>
 8009fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	2001      	movs	r0, #1
 8009fca:	e7a6      	b.n	8009f1a <_vfiprintf_r+0xfe>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	3401      	adds	r4, #1
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f04f 0c0a 	mov.w	ip, #10
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fde:	3a30      	subs	r2, #48	; 0x30
 8009fe0:	2a09      	cmp	r2, #9
 8009fe2:	d903      	bls.n	8009fec <_vfiprintf_r+0x1d0>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0c6      	beq.n	8009f76 <_vfiprintf_r+0x15a>
 8009fe8:	9105      	str	r1, [sp, #20]
 8009fea:	e7c4      	b.n	8009f76 <_vfiprintf_r+0x15a>
 8009fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e7f0      	b.n	8009fd8 <_vfiprintf_r+0x1bc>
 8009ff6:	ab03      	add	r3, sp, #12
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4b12      	ldr	r3, [pc, #72]	; (800a048 <_vfiprintf_r+0x22c>)
 8009ffe:	a904      	add	r1, sp, #16
 800a000:	4630      	mov	r0, r6
 800a002:	f3af 8000 	nop.w
 800a006:	4607      	mov	r7, r0
 800a008:	1c78      	adds	r0, r7, #1
 800a00a:	d1d6      	bne.n	8009fba <_vfiprintf_r+0x19e>
 800a00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d405      	bmi.n	800a01e <_vfiprintf_r+0x202>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d402      	bmi.n	800a01e <_vfiprintf_r+0x202>
 800a018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a01a:	f7fd feef 	bl	8007dfc <__retarget_lock_release_recursive>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	065b      	lsls	r3, r3, #25
 800a022:	f53f af1d 	bmi.w	8009e60 <_vfiprintf_r+0x44>
 800a026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a028:	e71c      	b.n	8009e64 <_vfiprintf_r+0x48>
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <_vfiprintf_r+0x22c>)
 800a032:	a904      	add	r1, sp, #16
 800a034:	4630      	mov	r0, r6
 800a036:	f7fe fa2d 	bl	8008494 <_printf_i>
 800a03a:	e7e4      	b.n	800a006 <_vfiprintf_r+0x1ea>
 800a03c:	0800a489 	.word	0x0800a489
 800a040:	0800a493 	.word	0x0800a493
 800a044:	00000000 	.word	0x00000000
 800a048:	08009df9 	.word	0x08009df9
 800a04c:	0800a48f 	.word	0x0800a48f

0800a050 <__swbuf_r>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	460e      	mov	r6, r1
 800a054:	4614      	mov	r4, r2
 800a056:	4605      	mov	r5, r0
 800a058:	b118      	cbz	r0, 800a062 <__swbuf_r+0x12>
 800a05a:	6a03      	ldr	r3, [r0, #32]
 800a05c:	b90b      	cbnz	r3, 800a062 <__swbuf_r+0x12>
 800a05e:	f7fd fda9 	bl	8007bb4 <__sinit>
 800a062:	69a3      	ldr	r3, [r4, #24]
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	071a      	lsls	r2, r3, #28
 800a06a:	d525      	bpl.n	800a0b8 <__swbuf_r+0x68>
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	b31b      	cbz	r3, 800a0b8 <__swbuf_r+0x68>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	1a98      	subs	r0, r3, r2
 800a076:	6963      	ldr	r3, [r4, #20]
 800a078:	b2f6      	uxtb	r6, r6
 800a07a:	4283      	cmp	r3, r0
 800a07c:	4637      	mov	r7, r6
 800a07e:	dc04      	bgt.n	800a08a <__swbuf_r+0x3a>
 800a080:	4621      	mov	r1, r4
 800a082:	4628      	mov	r0, r5
 800a084:	f7fe fbae 	bl	80087e4 <_fflush_r>
 800a088:	b9e0      	cbnz	r0, 800a0c4 <__swbuf_r+0x74>
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	60a3      	str	r3, [r4, #8]
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	6022      	str	r2, [r4, #0]
 800a096:	701e      	strb	r6, [r3, #0]
 800a098:	6962      	ldr	r2, [r4, #20]
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d004      	beq.n	800a0aa <__swbuf_r+0x5a>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	07db      	lsls	r3, r3, #31
 800a0a4:	d506      	bpl.n	800a0b4 <__swbuf_r+0x64>
 800a0a6:	2e0a      	cmp	r6, #10
 800a0a8:	d104      	bne.n	800a0b4 <__swbuf_r+0x64>
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f7fe fb99 	bl	80087e4 <_fflush_r>
 800a0b2:	b938      	cbnz	r0, 800a0c4 <__swbuf_r+0x74>
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 f806 	bl	800a0cc <__swsetup_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d0d5      	beq.n	800a070 <__swbuf_r+0x20>
 800a0c4:	f04f 37ff 	mov.w	r7, #4294967295
 800a0c8:	e7f4      	b.n	800a0b4 <__swbuf_r+0x64>
	...

0800a0cc <__swsetup_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4b2a      	ldr	r3, [pc, #168]	; (800a178 <__swsetup_r+0xac>)
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	b118      	cbz	r0, 800a0e0 <__swsetup_r+0x14>
 800a0d8:	6a03      	ldr	r3, [r0, #32]
 800a0da:	b90b      	cbnz	r3, 800a0e0 <__swsetup_r+0x14>
 800a0dc:	f7fd fd6a 	bl	8007bb4 <__sinit>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e6:	0718      	lsls	r0, r3, #28
 800a0e8:	d422      	bmi.n	800a130 <__swsetup_r+0x64>
 800a0ea:	06d9      	lsls	r1, r3, #27
 800a0ec:	d407      	bmi.n	800a0fe <__swsetup_r+0x32>
 800a0ee:	2309      	movs	r3, #9
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0f6:	81a3      	strh	r3, [r4, #12]
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fc:	e034      	b.n	800a168 <__swsetup_r+0x9c>
 800a0fe:	0758      	lsls	r0, r3, #29
 800a100:	d512      	bpl.n	800a128 <__swsetup_r+0x5c>
 800a102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a104:	b141      	cbz	r1, 800a118 <__swsetup_r+0x4c>
 800a106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a10a:	4299      	cmp	r1, r3
 800a10c:	d002      	beq.n	800a114 <__swsetup_r+0x48>
 800a10e:	4628      	mov	r0, r5
 800a110:	f7fd fe76 	bl	8007e00 <_free_r>
 800a114:	2300      	movs	r3, #0
 800a116:	6363      	str	r3, [r4, #52]	; 0x34
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	2300      	movs	r3, #0
 800a122:	6063      	str	r3, [r4, #4]
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f043 0308 	orr.w	r3, r3, #8
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	b94b      	cbnz	r3, 800a148 <__swsetup_r+0x7c>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a13a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a13e:	d003      	beq.n	800a148 <__swsetup_r+0x7c>
 800a140:	4621      	mov	r1, r4
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f884 	bl	800a250 <__smakebuf_r>
 800a148:	89a0      	ldrh	r0, [r4, #12]
 800a14a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a14e:	f010 0301 	ands.w	r3, r0, #1
 800a152:	d00a      	beq.n	800a16a <__swsetup_r+0x9e>
 800a154:	2300      	movs	r3, #0
 800a156:	60a3      	str	r3, [r4, #8]
 800a158:	6963      	ldr	r3, [r4, #20]
 800a15a:	425b      	negs	r3, r3
 800a15c:	61a3      	str	r3, [r4, #24]
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	b943      	cbnz	r3, 800a174 <__swsetup_r+0xa8>
 800a162:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a166:	d1c4      	bne.n	800a0f2 <__swsetup_r+0x26>
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	0781      	lsls	r1, r0, #30
 800a16c:	bf58      	it	pl
 800a16e:	6963      	ldrpl	r3, [r4, #20]
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	e7f4      	b.n	800a15e <__swsetup_r+0x92>
 800a174:	2000      	movs	r0, #0
 800a176:	e7f7      	b.n	800a168 <__swsetup_r+0x9c>
 800a178:	200000b0 	.word	0x200000b0

0800a17c <_raise_r>:
 800a17c:	291f      	cmp	r1, #31
 800a17e:	b538      	push	{r3, r4, r5, lr}
 800a180:	4604      	mov	r4, r0
 800a182:	460d      	mov	r5, r1
 800a184:	d904      	bls.n	800a190 <_raise_r+0x14>
 800a186:	2316      	movs	r3, #22
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	f04f 30ff 	mov.w	r0, #4294967295
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a192:	b112      	cbz	r2, 800a19a <_raise_r+0x1e>
 800a194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a198:	b94b      	cbnz	r3, 800a1ae <_raise_r+0x32>
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 f830 	bl	800a200 <_getpid_r>
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1aa:	f000 b817 	b.w	800a1dc <_kill_r>
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d00a      	beq.n	800a1c8 <_raise_r+0x4c>
 800a1b2:	1c59      	adds	r1, r3, #1
 800a1b4:	d103      	bne.n	800a1be <_raise_r+0x42>
 800a1b6:	2316      	movs	r3, #22
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	e7e7      	b.n	800a18e <_raise_r+0x12>
 800a1be:	2400      	movs	r4, #0
 800a1c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	4798      	blx	r3
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7e0      	b.n	800a18e <_raise_r+0x12>

0800a1cc <raise>:
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <raise+0xc>)
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	f7ff bfd3 	b.w	800a17c <_raise_r>
 800a1d6:	bf00      	nop
 800a1d8:	200000b0 	.word	0x200000b0

0800a1dc <_kill_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4d07      	ldr	r5, [pc, #28]	; (800a1fc <_kill_r+0x20>)
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	f7f7 ff85 	bl	80020f8 <_kill>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	d102      	bne.n	800a1f8 <_kill_r+0x1c>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b103      	cbz	r3, 800a1f8 <_kill_r+0x1c>
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	bd38      	pop	{r3, r4, r5, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000480 	.word	0x20000480

0800a200 <_getpid_r>:
 800a200:	f7f7 bf72 	b.w	80020e8 <_getpid>

0800a204 <__swhatbuf_r>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20c:	2900      	cmp	r1, #0
 800a20e:	b096      	sub	sp, #88	; 0x58
 800a210:	4615      	mov	r5, r2
 800a212:	461e      	mov	r6, r3
 800a214:	da0d      	bge.n	800a232 <__swhatbuf_r+0x2e>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a21c:	f04f 0100 	mov.w	r1, #0
 800a220:	bf0c      	ite	eq
 800a222:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a226:	2340      	movne	r3, #64	; 0x40
 800a228:	2000      	movs	r0, #0
 800a22a:	6031      	str	r1, [r6, #0]
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	b016      	add	sp, #88	; 0x58
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	466a      	mov	r2, sp
 800a234:	f000 f848 	bl	800a2c8 <_fstat_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	dbec      	blt.n	800a216 <__swhatbuf_r+0x12>
 800a23c:	9901      	ldr	r1, [sp, #4]
 800a23e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a242:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a246:	4259      	negs	r1, r3
 800a248:	4159      	adcs	r1, r3
 800a24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24e:	e7eb      	b.n	800a228 <__swhatbuf_r+0x24>

0800a250 <__smakebuf_r>:
 800a250:	898b      	ldrh	r3, [r1, #12]
 800a252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a254:	079d      	lsls	r5, r3, #30
 800a256:	4606      	mov	r6, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	d507      	bpl.n	800a26c <__smakebuf_r+0x1c>
 800a25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	6123      	str	r3, [r4, #16]
 800a264:	2301      	movs	r3, #1
 800a266:	6163      	str	r3, [r4, #20]
 800a268:	b002      	add	sp, #8
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	ab01      	add	r3, sp, #4
 800a26e:	466a      	mov	r2, sp
 800a270:	f7ff ffc8 	bl	800a204 <__swhatbuf_r>
 800a274:	9900      	ldr	r1, [sp, #0]
 800a276:	4605      	mov	r5, r0
 800a278:	4630      	mov	r0, r6
 800a27a:	f7fd fad3 	bl	8007824 <_malloc_r>
 800a27e:	b948      	cbnz	r0, 800a294 <__smakebuf_r+0x44>
 800a280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a284:	059a      	lsls	r2, r3, #22
 800a286:	d4ef      	bmi.n	800a268 <__smakebuf_r+0x18>
 800a288:	f023 0303 	bic.w	r3, r3, #3
 800a28c:	f043 0302 	orr.w	r3, r3, #2
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	e7e3      	b.n	800a25c <__smakebuf_r+0xc>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	6020      	str	r0, [r4, #0]
 800a298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	6163      	str	r3, [r4, #20]
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	6120      	str	r0, [r4, #16]
 800a2a6:	b15b      	cbz	r3, 800a2c0 <__smakebuf_r+0x70>
 800a2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f000 f81d 	bl	800a2ec <_isatty_r>
 800a2b2:	b128      	cbz	r0, 800a2c0 <__smakebuf_r+0x70>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	f043 0301 	orr.w	r3, r3, #1
 800a2be:	81a3      	strh	r3, [r4, #12]
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	431d      	orrs	r5, r3
 800a2c4:	81a5      	strh	r5, [r4, #12]
 800a2c6:	e7cf      	b.n	800a268 <__smakebuf_r+0x18>

0800a2c8 <_fstat_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d07      	ldr	r5, [pc, #28]	; (800a2e8 <_fstat_r+0x20>)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f7f7 ff6e 	bl	80021b6 <_fstat>
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	d102      	bne.n	800a2e4 <_fstat_r+0x1c>
 800a2de:	682b      	ldr	r3, [r5, #0]
 800a2e0:	b103      	cbz	r3, 800a2e4 <_fstat_r+0x1c>
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000480 	.word	0x20000480

0800a2ec <_isatty_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d06      	ldr	r5, [pc, #24]	; (800a308 <_isatty_r+0x1c>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f7 ff6d 	bl	80021d6 <_isatty>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_isatty_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_isatty_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000480 	.word	0x20000480

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
