
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aec  08006aec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af4  08006af4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000007c  08006b78  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08006b78  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e2a  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d9  00000000  00000000  00037f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e32  00000000  00000000  0003c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027910  00000000  00000000  0003d6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b291  00000000  00000000  00064fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f206a  00000000  00000000  0008024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fec  00000000  00000000  001722b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001772a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a70 	.word	0x08006a70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006a70 	.word	0x08006a70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	b299      	uxth	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f107 020f 	add.w	r2, r7, #15
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	f001 fcfb 	bl	8001fc8 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005d2:	2310      	movs	r3, #16
 80005d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	b299      	uxth	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f107 020f 	add.w	r2, r7, #15
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	f001 fcec 	bl	8001fc8 <HAL_I2C_Master_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	b299      	uxth	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f107 020c 	add.w	r2, r7, #12
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	f001 fdcb 	bl	80021b0 <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800061a:	7b3b      	ldrb	r3, [r7, #12]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	7b7a      	ldrb	r2, [r7, #13]
 8000620:	4313      	orrs	r3, r2
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800064c <BH1750_ReadIlluminance_lux+0x54>
 800062e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	3f99999a 	.word	0x3f99999a

08000650 <Bulb_State>:
#include <stdbool.h>
#include "stm32f7xx_hal.h"
#include "bulb.h"

void Bulb_State(bool state)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, state);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	461a      	mov	r2, r3
 800065e:	2108      	movs	r1, #8
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <Bulb_State+0x20>)
 8000662:	f001 fc07 	bl	8001e74 <HAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020800 	.word	0x40020800

08000674 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (hled->Output.Duty) : (100.0f - hled->Output.Duty);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7b1b      	ldrb	r3, [r3, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d103      	bne.n	800068c <LED_PWM_Init+0x18>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	edd3 7a02 	vldr	s15, [r3, #8]
 800068a:	e006      	b.n	800069a <LED_PWM_Init+0x26>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000692:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006b0 <LED_PWM_Init+0x3c>
 8000696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hled->Output));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f8d4 	bl	8000850 <PWM_Init>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	42c80000 	.word	0x42c80000

080006b4 <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	ed87 0a00 	vstr	s0, [r7]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (duty) : (100.0f - duty);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7b1b      	ldrb	r3, [r3, #12]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d006      	beq.n	80006d6 <LED_PWM_WriteDuty+0x22>
 80006c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80006fc <LED_PWM_WriteDuty+0x48>
 80006cc:	edd7 7a00 	vldr	s15, [r7]
 80006d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006d4:	e001      	b.n	80006da <LED_PWM_WriteDuty+0x26>
 80006d6:	edd7 7a00 	vldr	s15, [r7]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hled->Output), hled->Output.Duty);
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80006e8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ec:	4610      	mov	r0, r2
 80006ee:	f000 f8c7 	bl	8000880 <PWM_WriteDuty>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	42c80000 	.word	0x42c80000

08000700 <Light_Boundries>:
#include "delay_us.h"
#include "bh1750_config.h"
#include <stdio.h>
#include <stdlib.h>
int* Light_Boundries()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  int size = 4;
 8000706:	2304      	movs	r3, #4
 8000708:	61fb      	str	r3, [r7, #28]
  int* Boundries = (int*) malloc(sizeof(*Boundries) * size);
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fcfa 	bl	8006108 <malloc>
 8000714:	4603      	mov	r3, r0
 8000716:	61bb      	str	r3, [r7, #24]
  float H_Boundry_with_Bulb;
  float L_Boundry_With_Bulb;
  float H_Boundry_No_Bulb;
  float L_Boundry_No_Bulb;
  unsigned int illuminance_int = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

    Bulb_State(1); //Light Bulb
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ff97 	bl	8000650 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99);
 8000722:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800083c <Light_Boundries+0x13c>
 8000726:	4846      	ldr	r0, [pc, #280]	; (8000840 <Light_Boundries+0x140>)
 8000728:	f7ff ffc4 	bl	80006b4 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 800072c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000730:	f001 f82c 	bl	800178c <HAL_Delay>
    H_Boundry_with_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 8000734:	4843      	ldr	r0, [pc, #268]	; (8000844 <Light_Boundries+0x144>)
 8000736:	f7ff ff5f 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 800073a:	ed87 0a04 	vstr	s0, [r7, #16]
    illuminance_int =  H_Boundry_with_Bulb * 1000.0f;
 800073e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000742:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000848 <Light_Boundries+0x148>
 8000746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800074a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074e:	ee17 3a90 	vmov	r3, s15
 8000752:	617b      	str	r3, [r7, #20]
    Boundries[0] =   illuminance_int;
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	601a      	str	r2, [r3, #0]
    HAL_Delay(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f001 f816 	bl	800178c <HAL_Delay>
    Bulb_State(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff75 	bl	8000650 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0);
 8000766:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800084c <Light_Boundries+0x14c>
 800076a:	4835      	ldr	r0, [pc, #212]	; (8000840 <Light_Boundries+0x140>)
 800076c:	f7ff ffa2 	bl	80006b4 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f001 f80a 	bl	800178c <HAL_Delay>
    L_Boundry_With_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <Light_Boundries+0x144>)
 800077a:	f7ff ff3d 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 800077e:	ed87 0a03 	vstr	s0, [r7, #12]
    illuminance_int =  L_Boundry_With_Bulb * 1000.0f;
 8000782:	edd7 7a03 	vldr	s15, [r7, #12]
 8000786:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000848 <Light_Boundries+0x148>
 800078a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800078e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	617b      	str	r3, [r7, #20]
    Boundries[1]=  illuminance_int;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	3304      	adds	r3, #4
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f000 fff3 	bl	800178c <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff ff52 	bl	8000650 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99); //Light LED
 80007ac:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800083c <Light_Boundries+0x13c>
 80007b0:	4823      	ldr	r0, [pc, #140]	; (8000840 <Light_Boundries+0x140>)
 80007b2:	f7ff ff7f 	bl	80006b4 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 80007b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ba:	f000 ffe7 	bl	800178c <HAL_Delay>
    H_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <Light_Boundries+0x144>)
 80007c0:	f7ff ff1a 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 80007c4:	ed87 0a02 	vstr	s0, [r7, #8]
    HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f000 ffdf 	bl	800178c <HAL_Delay>
    illuminance_int = H_Boundry_No_Bulb * 1000.0f;
 80007ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80007d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000848 <Light_Boundries+0x148>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007de:	ee17 3a90 	vmov	r3, s15
 80007e2:	617b      	str	r3, [r7, #20]
    Boundries[2]= illuminance_int;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	3308      	adds	r3, #8
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 ffcd 	bl	800178c <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff2c 	bl	8000650 <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0); //OFF LED
 80007f8:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800084c <Light_Boundries+0x14c>
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <Light_Boundries+0x140>)
 80007fe:	f7ff ff59 	bl	80006b4 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 8000802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000806:	f000 ffc1 	bl	800178c <HAL_Delay>
    L_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <Light_Boundries+0x144>)
 800080c:	f7ff fef4 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 8000810:	ed87 0a01 	vstr	s0, [r7, #4]
    illuminance_int = L_Boundry_No_Bulb * 1000.0f;
 8000814:	edd7 7a01 	vldr	s15, [r7, #4]
 8000818:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000848 <Light_Boundries+0x148>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000824:	ee17 3a90 	vmov	r3, s15
 8000828:	617b      	str	r3, [r7, #20]
    Boundries[3] =  illuminance_int;
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	330c      	adds	r3, #12
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	601a      	str	r2, [r3, #0]





  return Boundries;
 8000832:	69bb      	ldr	r3, [r7, #24]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	42c60000 	.word	0x42c60000
 8000840:	20000010 	.word	0x20000010
 8000844:	20000000 	.word	0x20000000
 8000848:	447a0000 	.word	0x447a0000
 800084c:	00000000 	.word	0x00000000

08000850 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	edd3 7a02 	vldr	s15, [r3, #8]
 800085e:	eeb0 0a67 	vmov.f32	s0, s15
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f80c 	bl	8000880 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	4610      	mov	r0, r2
 8000874:	f003 fb52 	bl	8003f1c <HAL_TIM_PWM_Start>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800088c:	edd7 7a00 	vldr	s15, [r7]
 8000890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	d503      	bpl.n	80008a2 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	e00a      	b.n	80008b8 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80008a2:	edd7 7a00 	vldr	s15, [r7]
 80008a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000964 <PWM_WriteDuty+0xe4>
 80008aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b2:	dd01      	ble.n	80008b8 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <PWM_WriteDuty+0xe8>)
 80008b6:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	3301      	adds	r3, #1
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008d0:	edd7 7a00 	vldr	s15, [r7]
 80008d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008d8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000964 <PWM_WriteDuty+0xe4>
 80008dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e4:	ee17 3a90 	vmov	r3, s15
 80008e8:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d105      	bne.n	80008fe <PWM_WriteDuty+0x7e>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008fc:	e02c      	b.n	8000958 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d105      	bne.n	8000912 <PWM_WriteDuty+0x92>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000910:	e022      	b.n	8000958 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d105      	bne.n	8000926 <PWM_WriteDuty+0xa6>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000924:	e018      	b.n	8000958 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b0c      	cmp	r3, #12
 800092c:	d105      	bne.n	800093a <PWM_WriteDuty+0xba>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000938:	e00e      	b.n	8000958 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d105      	bne.n	800094e <PWM_WriteDuty+0xce>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800094c:	e004      	b.n	8000958 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	42c80000 	.word	0x42c80000
 8000968:	42c80000 	.word	0x42c80000

0800096c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4ba6      	ldr	r3, [pc, #664]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4aa5      	ldr	r2, [pc, #660]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4ba3      	ldr	r3, [pc, #652]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4ba0      	ldr	r3, [pc, #640]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a9f      	ldr	r2, [pc, #636]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b9d      	ldr	r3, [pc, #628]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b9a      	ldr	r3, [pc, #616]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a99      	ldr	r2, [pc, #612]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b94      	ldr	r3, [pc, #592]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a93      	ldr	r2, [pc, #588]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e2:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a8d      	ldr	r2, [pc, #564]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b88      	ldr	r3, [pc, #544]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a87      	ldr	r2, [pc, #540]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b85      	ldr	r3, [pc, #532]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b82      	ldr	r3, [pc, #520]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a81      	ldr	r2, [pc, #516]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b7f      	ldr	r3, [pc, #508]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	4b7c      	ldr	r3, [pc, #496]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a7b      	ldr	r2, [pc, #492]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b79      	ldr	r3, [pc, #484]	; (8000c1c <MX_GPIO_Init+0x2b0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIGHT_BULB_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2109      	movs	r1, #9
 8000a46:	4876      	ldr	r0, [pc, #472]	; (8000c20 <MX_GPIO_Init+0x2b4>)
 8000a48:	f001 fa14 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a52:	4874      	ldr	r0, [pc, #464]	; (8000c24 <MX_GPIO_Init+0x2b8>)
 8000a54:	f001 fa0e 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	4872      	ldr	r0, [pc, #456]	; (8000c28 <MX_GPIO_Init+0x2bc>)
 8000a60:	f001 fa08 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f244 2140 	movw	r1, #16960	; 0x4240
 8000a6a:	4870      	ldr	r0, [pc, #448]	; (8000c2c <MX_GPIO_Init+0x2c0>)
 8000a6c:	f001 fa02 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4866      	ldr	r0, [pc, #408]	; (8000c20 <MX_GPIO_Init+0x2b4>)
 8000a88:	f001 f848 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LIGHT_BULB_Pin;
 8000a8c:	2309      	movs	r3, #9
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	485f      	ldr	r0, [pc, #380]	; (8000c20 <MX_GPIO_Init+0x2b4>)
 8000aa4:	f001 f83a 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aa8:	2332      	movs	r3, #50	; 0x32
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab8:	230b      	movs	r3, #11
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4857      	ldr	r0, [pc, #348]	; (8000c20 <MX_GPIO_Init+0x2b4>)
 8000ac4:	f001 f82a 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ac8:	2386      	movs	r3, #134	; 0x86
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4853      	ldr	r0, [pc, #332]	; (8000c30 <MX_GPIO_Init+0x2c4>)
 8000ae4:	f001 f81a 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ae8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4848      	ldr	r0, [pc, #288]	; (8000c24 <MX_GPIO_Init+0x2b8>)
 8000b02:	f001 f80b 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 8000b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x2bc>)
 8000b1e:	f000 fffd 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD6_Pin;
 8000b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483b      	ldr	r0, [pc, #236]	; (8000c28 <MX_GPIO_Init+0x2bc>)
 8000b3c:	f000 ffee 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8000b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4837      	ldr	r0, [pc, #220]	; (8000c34 <MX_GPIO_Init+0x2c8>)
 8000b58:	f000 ffe0 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	482a      	ldr	r0, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x2b8>)
 8000b7a:	f000 ffcf 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8000b7e:	f244 2340 	movw	r3, #16960	; 0x4240
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_GPIO_Init+0x2c0>)
 8000b98:	f000 ffc0 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_GPIO_Init+0x2c0>)
 8000bb0:	f000 ffb4 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bb4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_GPIO_Init+0x2c4>)
 8000bd2:	f000 ffa3 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_GPIO_Init+0x2c4>)
 8000bec:	f000 ff96 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_GPIO_Init+0x2c0>)
 8000c0e:	f000 ff85 	bl	8001b1c <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40021400 	.word	0x40021400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40021000 	.word	0x40021000

08000c38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_I2C1_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <MX_I2C1_Init+0x7c>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c74:	f001 f918 	bl	8001ea8 <HAL_I2C_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7e:	f000 f981 	bl	8000f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c86:	f001 fdf5 	bl	8002874 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f000 f978 	bl	8000f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c98:	f001 fe37 	bl	800290a <HAL_I2CEx_ConfigDigitalFilter>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 f96f 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	20404768 	.word	0x20404768

08000cb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0aa      	sub	sp, #168	; 0xa8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2284      	movs	r2, #132	; 0x84
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 faf1 	bl	80062c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_I2C_MspInit+0xb4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d13c      	bne.n	8000d62 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fb7e 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d02:	f000 f93f 	bl	8000f84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_I2C_MspInit+0xbc>)
 8000d46:	f000 fee9 	bl	8001b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0xb8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d62:	bf00      	nop
 8000d64:	37a8      	adds	r7, #168	; 0xa8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d140      	bne.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x92>
  {
    static unsigned int cnt = 0;
    cnt++;
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d90:	6013      	str	r3, [r2, #0]
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d94:	f7ff fc30 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_lux_Int = Illuminance_lux * 1000.0f;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000e24 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db4:	ee17 2a90 	vmov	r2, s15
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dba:	601a      	str	r2, [r3, #0]



    if(cnt == 5)
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d122      	bne.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x92>
    {
      uint8_t tx_buffer[32];
      int tx_msg_len = sprintf((char*)tx_buffer, "Illuminance: %5u.%03u\r", Illuminance_lux_Int / 1000, Illuminance_lux_Int % 1000);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0999      	lsrs	r1, r3, #6
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	fb00 f303 	mul.w	r3, r0, r3
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	f107 000c 	add.w	r0, r7, #12
 8000dea:	460a      	mov	r2, r1
 8000dec:	4910      	ldr	r1, [pc, #64]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000dee:	f005 fa47 	bl	8006280 <siprintf>
 8000df2:	62f8      	str	r0, [r7, #44]	; 0x2c
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8000df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e00:	f004 f964 	bl	80050cc <HAL_UART_Transmit>
      cnt = 0;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000194 	.word	0x20000194
 8000e18:	200000f4 	.word	0x200000f4
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	200000ec 	.word	0x200000ec
 8000e24:	447a0000 	.word	0x447a0000
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	10624dd3 	.word	0x10624dd3
 8000e30:	08006a88 	.word	0x08006a88
 8000e34:	2000022c 	.word	0x2000022c

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fc48 	bl	80016d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f831 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f7ff fd91 	bl	800096c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e4a:	f000 fb81 	bl	8001550 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000e4e:	f7ff fef3 	bl	8000c38 <MX_I2C1_Init>
  MX_TIM9_Init();
 8000e52:	f000 fa55 	bl	8001300 <MX_TIM9_Init>
  MX_TIM7_Init();
 8000e56:	f000 fa1b 	bl	8001290 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000e5a:	f000 f9a1 	bl	80011a0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e5e:	f000 f94b 	bl	80010f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  float Illuminance_lux_min = 0.0f;
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  float Illuminance_lux_max = 0.0f;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]

  int size = 4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	607b      	str	r3, [r7, #4]


  BH1750_Init(&hbh1750);
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <main+0x60>)
 8000e74:	f7ff fb9a 	bl	80005ac <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <main+0x64>)
 8000e7a:	f002 ff75 	bl	8003d68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <main+0x68>)
 8000e80:	f002 ff02 	bl	8003c88 <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  LED_PWM_Init(&hld1);
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <main+0x6c>)
 8000e86:	f7ff fbf5 	bl	8000674 <LED_PWM_Init>


  //Bulb_State(1);


  int* tab =Light_Boundries();
 8000e8a:	f7ff fc39 	bl	8000700 <Light_Boundries>
 8000e8e:	6038      	str	r0, [r7, #0]
  free(tab);
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f005 f941 	bl	8006118 <free>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <main+0x5e>
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000194 	.word	0x20000194
 8000ea0:	200000fc 	.word	0x200000fc
 8000ea4:	20000010 	.word	0x20000010

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 fa02 	bl	80062c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ecc:	f001 fd6a 	bl	80029a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <SystemClock_Config+0xd4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <SystemClock_Config+0xd4>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <SystemClock_Config+0xd4>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <SystemClock_Config+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <SystemClock_Config+0xd8>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f18:	23d8      	movs	r3, #216	; 0xd8
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f20:	2303      	movs	r3, #3
 8000f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fd9b 	bl	8002a64 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f34:	f000 f826 	bl	8000f84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f38:	f001 fd44 	bl	80029c4 <HAL_PWREx_EnableOverDrive>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f42:	f000 f81f 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2107      	movs	r1, #7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 f821 	bl	8002fac <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f70:	f000 f808 	bl	8000f84 <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3750      	adds	r7, #80	; 0x50
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 fb92 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM3_IRQHandler+0x10>)
 8001032:	f003 f86d 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000148 	.word	0x20000148

08001040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USART3_IRQHandler+0x10>)
 8001046:	f004 f8c5 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000022c 	.word	0x2000022c

08001054 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM7_IRQHandler+0x10>)
 800105a:	f003 f859 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000194 	.word	0x20000194

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f005 f92a 	bl	80062f0 <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20050000 	.word	0x20050000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	200000f8 	.word	0x200000f8
 80010d0:	20000400 	.word	0x20000400

080010d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <MX_TIM1_Init+0xa4>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM1_Init+0xa0>)
 800111e:	226b      	movs	r2, #107	; 0x6b
 8001120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM1_Init+0xa0>)
 800112a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM1_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001144:	f002 fd48 	bl	8003bd8 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800114e:	f7ff ff19 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001160:	f003 fa0a 	bl	8004578 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800116a:	f7ff ff0b 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_TIM1_Init+0xa0>)
 8001180:	f003 feaa 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800118a:	f7ff fefb 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000fc 	.word	0x200000fc
 800119c:	40010000 	.word	0x40010000

080011a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <MX_TIM3_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_TIM3_Init+0xe8>)
 80011fa:	f002 fced 	bl	8003bd8 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001204:	f7ff febe 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_TIM3_Init+0xe8>)
 8001216:	f003 f9af 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001220:	f7ff feb0 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <MX_TIM3_Init+0xe8>)
 8001226:	f002 fe17 	bl	8003e58 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001230:	f7ff fea8 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_TIM3_Init+0xe8>)
 8001244:	f003 fe48 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800124e:	f7ff fe99 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM3_Init+0xe8>)
 800126a:	f003 f871 	bl	8004350 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001274:	f7ff fe86 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM3_Init+0xe8>)
 800127a:	f000 f90d 	bl	8001498 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	; 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000148 	.word	0x20000148
 800128c:	40000400 	.word	0x40000400

08001290 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <MX_TIM7_Init+0x6c>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012a8:	f240 4237 	movw	r2, #1079	; 0x437
 80012ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012c4:	f002 fc88 	bl	8003bd8 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012ce:	f7ff fe59 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM7_Init+0x68>)
 80012e0:	f003 fdfa 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f7ff fe4b 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000194 	.word	0x20000194
 80012fc:	40001400 	.word	0x40001400

08001300 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <MX_TIM9_Init+0xc0>)
 800132a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_TIM9_Init+0xbc>)
 800132e:	226b      	movs	r2, #107	; 0x6b
 8001330:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_TIM9_Init+0xbc>)
 800133a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800133e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800134c:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_TIM9_Init+0xbc>)
 800134e:	f002 fc43 	bl	8003bd8 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001358:	f7ff fe14 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4619      	mov	r1, r3
 8001368:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_TIM9_Init+0xbc>)
 800136a:	f003 f905 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001374:	f7ff fe06 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_TIM9_Init+0xbc>)
 800137a:	f002 fd6d 	bl	8003e58 <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001384:	f7ff fdfe 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM9_Init+0xbc>)
 80013a0:	f002 ffd6 	bl	8004350 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80013aa:	f7ff fdeb 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM9_Init+0xbc>)
 80013b0:	f000 f872 	bl	8001498 <HAL_TIM_MspPostInit>

}
 80013b4:	bf00      	nop
 80013b6:	3730      	adds	r7, #48	; 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001e0 	.word	0x200001e0
 80013c0:	40014000 	.word	0x40014000

080013c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_TIM_Base_MspInit+0xc0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10c      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80013ee:	e044      	b.n	800147a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a25      	ldr	r2, [pc, #148]	; (800148c <HAL_TIM_Base_MspInit+0xc8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d114      	bne.n	8001424 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201d      	movs	r0, #29
 8001418:	f000 fab7 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141c:	201d      	movs	r0, #29
 800141e:	f000 fad0 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8001422:	e02a      	b.n	800147a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_TIM_Base_MspInit+0xcc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d114      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2037      	movs	r0, #55	; 0x37
 800144c:	f000 fa9d 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001450:	2037      	movs	r0, #55	; 0x37
 8001452:	f000 fab6 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8001456:	e010      	b.n	800147a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_TIM_Base_MspInit+0xd0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10b      	bne.n	800147a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_TIM_Base_MspInit+0xc4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800
 800148c:	40000400 	.word	0x40000400
 8001490:	40001400 	.word	0x40001400
 8001494:	40014000 	.word	0x40014000

08001498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <HAL_TIM_MspPostInit+0xa8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d11c      	bne.n	80014f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014e2:	2302      	movs	r3, #2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <HAL_TIM_MspPostInit+0xb0>)
 80014ee:	f000 fb15 	bl	8001b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80014f2:	e020      	b.n	8001536 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM9)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_TIM_MspPostInit+0xb4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d11b      	bne.n	8001536 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_TIM_MspPostInit+0xac>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001516:	2308      	movs	r3, #8
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001526:	2303      	movs	r3, #3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_TIM_MspPostInit+0xb0>)
 8001532:	f000 faf3 	bl	8001b1c <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40000400 	.word	0x40000400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40014000 	.word	0x40014000

08001550 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART3_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001594:	f003 fd4c 	bl	8005030 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f7ff fcf1 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000022c 	.word	0x2000022c
 80015ac:	40004800 	.word	0x40004800

080015b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0aa      	sub	sp, #168	; 0xa8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2284      	movs	r2, #132	; 0x84
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fe75 	bl	80062c0 <memset>
  if(uartHandle->Instance==USART3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_UART_MspInit+0xc4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d144      	bne.n	800166a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 ff02 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015fa:	f7ff fcc3 	bl	8000f84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_UART_MspInit+0xc8>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_UART_MspInit+0xc8>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_UART_MspInit+0xc8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_UART_MspInit+0xc8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_UART_MspInit+0xc8>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_UART_MspInit+0xc8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800162e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001648:	2307      	movs	r3, #7
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_UART_MspInit+0xcc>)
 8001656:	f000 fa61 	bl	8001b1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2027      	movs	r0, #39	; 0x27
 8001660:	f000 f993 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001664:	2027      	movs	r0, #39	; 0x27
 8001666:	f000 f9ac 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	37a8      	adds	r7, #168	; 0xa8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004800 	.word	0x40004800
 8001678:	40023800 	.word	0x40023800
 800167c:	40020c00 	.word	0x40020c00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001686:	490e      	ldr	r1, [pc, #56]	; (80016c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800169c:	4c0b      	ldr	r4, [pc, #44]	; (80016cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016aa:	f7ff fd13 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f004 fe25 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fbc1 	bl	8000e38 <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016c4:	08006afc 	.word	0x08006afc
  ldr r2, =_sbss
 80016c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016cc:	20000400 	.word	0x20000400

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>

080016d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f94c 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f805 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e2:	f7ff fc55 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000020 	.word	0x20000020
 8001744:	20000028 	.word	0x20000028
 8001748:	20000024 	.word	0x20000024

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000028 	.word	0x20000028
 8001770:	200002b4 	.word	0x200002b4

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200002b4 	.word	0x200002b4

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000028 	.word	0x20000028

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x40>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	05fa0000 	.word	0x05fa0000

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feb6 	bl	8001774 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d008      	beq.n	8001a28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e052      	b.n	8001ace <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0216 	bic.w	r2, r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <HAL_DMA_Abort+0x62>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0208 	bic.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e013      	b.n	8001aa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff fe7b 	bl	8001774 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d90c      	bls.n	8001aa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e015      	b.n	8001ace <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e4      	bne.n	8001a7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d004      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e00c      	b.n	8001b0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2205      	movs	r2, #5
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e175      	b.n	8001e28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8164 	bne.w	8001e22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d005      	beq.n	8001b72 <HAL_GPIO_Init+0x56>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d130      	bne.n	8001bd4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d017      	beq.n	8001c10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80be 	beq.w	8001e22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cbe:	4a61      	ldr	r2, [pc, #388]	; (8001e44 <HAL_GPIO_Init+0x328>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d037      	beq.n	8001d5a <HAL_GPIO_Init+0x23e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_GPIO_Init+0x330>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d031      	beq.n	8001d56 <HAL_GPIO_Init+0x23a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_GPIO_Init+0x334>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x236>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a55      	ldr	r2, [pc, #340]	; (8001e54 <HAL_GPIO_Init+0x338>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x232>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a54      	ldr	r2, [pc, #336]	; (8001e58 <HAL_GPIO_Init+0x33c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a53      	ldr	r2, [pc, #332]	; (8001e5c <HAL_GPIO_Init+0x340>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x22a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_GPIO_Init+0x344>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <HAL_GPIO_Init+0x348>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_GPIO_Init+0x34c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <HAL_GPIO_Init+0x350>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x21a>
 8001d32:	2309      	movs	r3, #9
 8001d34:	e012      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d36:	230a      	movs	r3, #10
 8001d38:	e010      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	e00e      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x240>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x328>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <HAL_GPIO_Init+0x354>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae86 	bls.w	8001b3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40021c00 	.word	0x40021c00
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40022400 	.word	0x40022400
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fef2 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d104      	bne.n	8001f42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_I2C_Init+0x11c>)
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69d9      	ldr	r1, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	02008000 	.word	0x02008000

08001fc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	f040 80da 	bne.w	800219e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x30>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0d3      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002000:	f7ff fbb8 	bl	8001774 <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2319      	movs	r3, #25
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f9e6 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0be      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2221      	movs	r2, #33	; 0x21
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2210      	movs	r2, #16
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	d90e      	bls.n	8002072 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	b2da      	uxtb	r2, r3
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fbd0 	bl	8002810 <I2C_TransferConfig>
 8002070:	e06c      	b.n	800214c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	b2da      	uxtb	r2, r3
 8002082:	8979      	ldrh	r1, [r7, #10]
 8002084:	4b48      	ldr	r3, [pc, #288]	; (80021a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fbbf 	bl	8002810 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002092:	e05b      	b.n	800214c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	6a39      	ldr	r1, [r7, #32]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f9e3 	bl	8002464 <I2C_WaitOnTXISFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e07b      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d034      	beq.n	800214c <HAL_I2C_Master_Transmit+0x184>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d130      	bne.n	800214c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f975 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04d      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	d90e      	bls.n	800212c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fb73 	bl	8002810 <I2C_TransferConfig>
 800212a:	e00f      	b.n	800214c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fb62 	bl	8002810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d19e      	bne.n	8002094 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6a39      	ldr	r1, [r7, #32]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f9c2 	bl	80024e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01a      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2220      	movs	r2, #32
 8002170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_I2C_Master_Transmit+0x1e4>)
 800217e:	400b      	ands	r3, r1
 8002180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	80002000 	.word	0x80002000
 80021ac:	fe00e800 	.word	0xfe00e800

080021b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	817b      	strh	r3, [r7, #10]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	f040 80db 	bne.w	8002388 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_I2C_Master_Receive+0x30>
 80021dc:	2302      	movs	r3, #2
 80021de:	e0d4      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021e8:	f7ff fac4 	bl	8001774 <HAL_GetTick>
 80021ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2319      	movs	r3, #25
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f8f2 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0bf      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2222      	movs	r2, #34	; 0x22
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2bff      	cmp	r3, #255	; 0xff
 800223a:	d90e      	bls.n	800225a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	22ff      	movs	r2, #255	; 0xff
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_I2C_Master_Receive+0x1e4>)
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fadc 	bl	8002810 <I2C_TransferConfig>
 8002258:	e06d      	b.n	8002336 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_I2C_Master_Receive+0x1e4>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 facb 	bl	8002810 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800227a:	e05c      	b.n	8002336 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	6a39      	ldr	r1, [r7, #32]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f96b 	bl	800255c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e07c      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d034      	beq.n	8002336 <HAL_I2C_Master_Receive+0x186>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d130      	bne.n	8002336 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2200      	movs	r2, #0
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f880 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04d      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2bff      	cmp	r3, #255	; 0xff
 80022f6:	d90e      	bls.n	8002316 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	22ff      	movs	r2, #255	; 0xff
 80022fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	b2da      	uxtb	r2, r3
 8002304:	8979      	ldrh	r1, [r7, #10]
 8002306:	2300      	movs	r3, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa7e 	bl	8002810 <I2C_TransferConfig>
 8002314:	e00f      	b.n	8002336 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	b2da      	uxtb	r2, r3
 8002326:	8979      	ldrh	r1, [r7, #10]
 8002328:	2300      	movs	r3, #0
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fa6d 	bl	8002810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d19d      	bne.n	800227c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f8cd 	bl	80024e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e01a      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2220      	movs	r2, #32
 800235a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_I2C_Master_Receive+0x1e8>)
 8002368:	400b      	ands	r3, r1
 800236a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	80002400 	.word	0x80002400
 8002398:	fe00e800 	.word	0xfe00e800

0800239c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d103      	bne.n	80023ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d007      	beq.n	80023d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	619a      	str	r2, [r3, #24]
  }
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f4:	e022      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d01e      	beq.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7ff f9b9 	bl	8001774 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00f      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d0cd      	beq.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002470:	e02c      	b.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8ea 	bl	8002650 <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e02a      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d01e      	beq.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7ff f971 	bl	8001774 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e007      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d1cb      	bne.n	8002472 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f0:	e028      	b.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8aa 	bl	8002650 <I2C_IsErrorOccurred>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e026      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7ff f935 	bl	8001774 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d113      	bne.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d1cf      	bne.n	80024f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002568:	e064      	b.n	8002634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f86e 	bl	8002650 <I2C_IsErrorOccurred>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e062      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b20      	cmp	r3, #32
 800258a:	d138      	bne.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d105      	bne.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e04e      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d107      	bne.n	80025c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2204      	movs	r2, #4
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
 80025c2:	e002      	b.n	80025ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80025de:	400b      	ands	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e022      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7ff f8b9 	bl	8001774 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e007      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d193      	bne.n	800256a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fe00e800 	.word	0xfe00e800

08002650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d068      	beq.n	800274e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2210      	movs	r2, #16
 8002682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002684:	e049      	b.n	800271a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d045      	beq.n	800271a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff f871 	bl	8001774 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_IsErrorOccurred+0x54>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d13a      	bne.n	800271a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c6:	d121      	bne.n	800270c <I2C_IsErrorOccurred+0xbc>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ce:	d01d      	beq.n	800270c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d01a      	beq.n	800270c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026e6:	f7ff f845 	bl	8001774 <HAL_GetTick>
 80026ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ec:	e00e      	b.n	800270c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026ee:	f7ff f841 	bl	8001774 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b19      	cmp	r3, #25
 80026fa:	d907      	bls.n	800270c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f043 0320 	orr.w	r3, r3, #32
 8002702:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800270a:	e006      	b.n	800271a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d1e9      	bne.n	80026ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b20      	cmp	r3, #32
 8002726:	d003      	beq.n	8002730 <I2C_IsErrorOccurred+0xe0>
 8002728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0aa      	beq.n	8002686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002792:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01c      	beq.n	80027fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fde9 	bl	800239c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <I2C_IsErrorOccurred+0x1bc>)
 80027d6:	400b      	ands	r3, r1
 80027d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002802:	4618      	mov	r0, r3
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	4613      	mov	r3, r2
 8002820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002828:	7a7b      	ldrb	r3, [r7, #9]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002830:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	4313      	orrs	r3, r2
 800283a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	0d5b      	lsrs	r3, r3, #21
 800284a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <I2C_TransferConfig+0x60>)
 8002850:	430b      	orrs	r3, r1
 8002852:	43db      	mvns	r3, r3
 8002854:	ea02 0103 	and.w	r1, r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	03ff63ff 	.word	0x03ff63ff

08002874 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	d138      	bne.n	80028fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002894:	2302      	movs	r3, #2
 8002896:	e032      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	; 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	d139      	bne.n	8002994 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800292a:	2302      	movs	r3, #2
 800292c:	e033      	b.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2224      	movs	r2, #36	; 0x24
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800295c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000

080029c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f2:	f7fe febf 	bl	8001774 <HAL_GetTick>
 80029f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029f8:	e009      	b.n	8002a0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029fa:	f7fe febb 	bl	8001774 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a08:	d901      	bls.n	8002a0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e022      	b.n	8002a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d1ee      	bne.n	80029fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7fe fea4 	bl	8001774 <HAL_GetTick>
 8002a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a2e:	e009      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a30:	f7fe fea0 	bl	8001774 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3e:	d901      	bls.n	8002a44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e007      	b.n	8002a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a50:	d1ee      	bne.n	8002a30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40007000 	.word	0x40007000

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e291      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8087 	beq.w	8002b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a88:	4b96      	ldr	r3, [pc, #600]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d00c      	beq.n	8002aae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a94:	4b93      	ldr	r3, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d112      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62>
 8002aa0:	4b90      	ldr	r3, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	4b8d      	ldr	r3, [pc, #564]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d06c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x130>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d168      	bne.n	8002b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e26b      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x7a>
 8002ad0:	4b84      	ldr	r3, [pc, #528]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a83      	ldr	r2, [pc, #524]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e02e      	b.n	8002b3c <HAL_RCC_OscConfig+0xd8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x9c>
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7e      	ldr	r2, [pc, #504]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b7c      	ldr	r3, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7b      	ldr	r2, [pc, #492]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e01d      	b.n	8002b3c <HAL_RCC_OscConfig+0xd8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0xc0>
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b73      	ldr	r3, [pc, #460]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a72      	ldr	r2, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0xd8>
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6b      	ldr	r2, [pc, #428]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fe16 	bl	8001774 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fe12 	bl	8001774 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e21f      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe8>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fe02 	bl	8001774 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fdfe 	bl	8001774 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e20b      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	4b57      	ldr	r3, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x110>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d069      	beq.n	8002c76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x190>
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x17a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1df      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	493d      	ldr	r1, [pc, #244]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e040      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d023      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fdb4 	bl	8001774 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fdb0 	bl	8001774 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1bd      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4929      	ldr	r1, [pc, #164]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
 8002c42:	e018      	b.n	8002c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fd90 	bl	8001774 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe fd8c 	bl	8001774 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e199      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d038      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d019      	beq.n	8002cbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fd6d 	bl	8001774 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fd69 	bl	8001774 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e176      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x23a>
 8002cbc:	e01a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fd53 	bl	8001774 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fd4f 	bl	8001774 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d903      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e15c      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
 8002ce4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b91      	ldr	r3, [pc, #580]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a4 	beq.w	8002e4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a87      	ldr	r2, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d36:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	; (8002f34 <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fe fd17 	bl	8001774 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fd13 	bl	8001774 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b64      	cmp	r3, #100	; 0x64
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e120      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x31a>
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_OscConfig+0x376>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x33c>
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a66      	ldr	r2, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x376>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x35e>
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a60      	ldr	r2, [pc, #384]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x376>
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fe fcc7 	bl	8001774 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe fcc3 	bl	8001774 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0ce      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x386>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fcb1 	bl	8001774 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fcad 	bl	8001774 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0b8      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a4 	beq.w	8002f9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d06b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d149      	bne.n	8002efc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fc7e 	bl	8001774 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fc7a 	bl	8001774 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e087      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	019b      	lsls	r3, r3, #6
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ec6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fc4e 	bl	8001774 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fc4a 	bl	8001774 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e057      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x478>
 8002efa:	e04f      	b.n	8002f9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fc34 	bl	8001774 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fc30 	bl	8001774 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e03d      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4ac>
 8002f2e:	e035      	b.n	8002f9c <HAL_RCC_OscConfig+0x538>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x544>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d028      	beq.n	8002f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d121      	bne.n	8002f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d11a      	bne.n	8002f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d111      	bne.n	8002f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d0      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	4965      	ldr	r1, [pc, #404]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d040      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d115      	bne.n	800308e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e073      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06b      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4936      	ldr	r1, [pc, #216]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fe fb68 	bl	8001774 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe fb64 	bl	8001774 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e053      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d210      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 020f 	bic.w	r2, r3, #15
 80030e6:	4922      	ldr	r1, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f821 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1cc>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1d0>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1d4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fac4 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	08006aa0 	.word	0x08006aa0
 800317c:	20000020 	.word	0x20000020
 8003180:	20000024 	.word	0x20000024

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b094      	sub	sp, #80	; 0x50
 800318a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
 8003190:	2300      	movs	r3, #0
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003194:	2300      	movs	r3, #0
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800319c:	4b79      	ldr	r3, [pc, #484]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d00d      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x40>
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	f200 80e1 	bhi.w	8003370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x34>
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x3a>
 80031b6:	e0db      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b73      	ldr	r3, [pc, #460]	; (8003388 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031bc:	e0db      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031be:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_GetSysClockFreq+0x208>)
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c2:	e0d8      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031da:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	2200      	movs	r2, #0
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
 80031ee:	2300      	movs	r3, #0
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
 80031f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003208:	0150      	lsls	r0, r2, #5
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4621      	mov	r1, r4
 8003210:	1a51      	subs	r1, r2, r1
 8003212:	6139      	str	r1, [r7, #16]
 8003214:	4629      	mov	r1, r5
 8003216:	eb63 0301 	sbc.w	r3, r3, r1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003228:	4659      	mov	r1, fp
 800322a:	018b      	lsls	r3, r1, #6
 800322c:	4651      	mov	r1, sl
 800322e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003232:	4651      	mov	r1, sl
 8003234:	018a      	lsls	r2, r1, #6
 8003236:	4651      	mov	r1, sl
 8003238:	ebb2 0801 	subs.w	r8, r2, r1
 800323c:	4659      	mov	r1, fp
 800323e:	eb63 0901 	sbc.w	r9, r3, r1
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800324e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003256:	4690      	mov	r8, r2
 8003258:	4699      	mov	r9, r3
 800325a:	4623      	mov	r3, r4
 800325c:	eb18 0303 	adds.w	r3, r8, r3
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	462b      	mov	r3, r5
 8003264:	eb49 0303 	adc.w	r3, r9, r3
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003276:	4629      	mov	r1, r5
 8003278:	024b      	lsls	r3, r1, #9
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003280:	4621      	mov	r1, r4
 8003282:	024a      	lsls	r2, r1, #9
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
 800328e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003294:	f7fd f80c 	bl	80002b0 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a0:	e058      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	2200      	movs	r2, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	4611      	mov	r1, r2
 80032ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032b2:	623b      	str	r3, [r7, #32]
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	f04f 0000 	mov.w	r0, #0
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	0159      	lsls	r1, r3, #5
 80032ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ce:	0150      	lsls	r0, r2, #5
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4641      	mov	r1, r8
 80032d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032da:	4649      	mov	r1, r9
 80032dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f4:	ebb2 040a 	subs.w	r4, r2, sl
 80032f8:	eb63 050b 	sbc.w	r5, r3, fp
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	00eb      	lsls	r3, r5, #3
 8003306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	4643      	mov	r3, r8
 8003312:	18e3      	adds	r3, r4, r3
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	464b      	mov	r3, r9
 8003318:	eb45 0303 	adc.w	r3, r5, r3
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332a:	4629      	mov	r1, r5
 800332c:	028b      	lsls	r3, r1, #10
 800332e:	4621      	mov	r1, r4
 8003330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003334:	4621      	mov	r1, r4
 8003336:	028a      	lsls	r2, r1, #10
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	2200      	movs	r2, #0
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	61fa      	str	r2, [r7, #28]
 8003344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003348:	f7fc ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetSysClockFreq+0x204>)
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003378:	4618      	mov	r0, r3
 800337a:	3750      	adds	r7, #80	; 0x50
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	007a1200 	.word	0x007a1200

08003390 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000020 	.word	0x20000020

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08006ab0 	.word	0x08006ab0

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d4:	f7ff ffdc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08006ab0 	.word	0x08006ab0

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003420:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a68      	ldr	r2, [pc, #416]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800342a:	6093      	str	r3, [r2, #8]
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	4964      	ldr	r1, [pc, #400]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d017      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	4959      	ldr	r1, [pc, #356]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800348e:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	494a      	ldr	r1, [pc, #296]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 808b 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6413      	str	r3, [r2, #64]	; 0x40
 80034e8:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a34      	ldr	r2, [pc, #208]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003500:	f7fe f938 	bl	8001774 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe f934 	bl	8001774 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e357      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003526:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d035      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d02e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003564:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d114      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f8fc 	bl	8001774 <HAL_GetTick>
 800357c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe f8f8 	bl	8001774 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e319      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ee      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ae:	d111      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035be:	400b      	ands	r3, r1
 80035c0:	4901      	ldr	r1, [pc, #4]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000
 80035d0:	0ffffcff 	.word	0x0ffffcff
 80035d4:	4baa      	ldr	r3, [pc, #680]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4aa9      	ldr	r2, [pc, #676]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	4ba7      	ldr	r3, [pc, #668]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	49a4      	ldr	r1, [pc, #656]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035fe:	4ba0      	ldr	r3, [pc, #640]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003604:	4a9e      	ldr	r2, [pc, #632]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800360e:	4b9c      	ldr	r3, [pc, #624]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003610:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	4999      	ldr	r1, [pc, #612]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800362c:	4b94      	ldr	r3, [pc, #592]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	4991      	ldr	r1, [pc, #580]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800364e:	4b8c      	ldr	r3, [pc, #560]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365c:	4988      	ldr	r1, [pc, #544]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003670:	4b83      	ldr	r3, [pc, #524]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	4980      	ldr	r1, [pc, #512]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003692:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4977      	ldr	r1, [pc, #476]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b4:	4b72      	ldr	r3, [pc, #456]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	496f      	ldr	r1, [pc, #444]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f023 020c 	bic.w	r2, r3, #12
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	4966      	ldr	r1, [pc, #408]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f8:	4b61      	ldr	r3, [pc, #388]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	495e      	ldr	r1, [pc, #376]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800371a:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	4955      	ldr	r1, [pc, #340]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800373c:	4b50      	ldr	r3, [pc, #320]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	494d      	ldr	r1, [pc, #308]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800375e:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	4944      	ldr	r1, [pc, #272]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003780:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	493c      	ldr	r1, [pc, #240]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037a2:	4b37      	ldr	r3, [pc, #220]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b0:	4933      	ldr	r1, [pc, #204]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c4:	4b2e      	ldr	r3, [pc, #184]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	492b      	ldr	r1, [pc, #172]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f4:	4922      	ldr	r1, [pc, #136]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003804:	d101      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	4912      	ldr	r1, [pc, #72]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00b      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003858:	4909      	ldr	r1, [pc, #36]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d006      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80d9 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a01      	ldr	r2, [pc, #4]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800387e:	e001      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003880:	40023800 	.word	0x40023800
 8003884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fd ff75 	bl	8001774 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800388e:	f7fd ff71 	bl	8001774 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e194      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a0:	4b6c      	ldr	r3, [pc, #432]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d021      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038c0:	4b64      	ldr	r3, [pc, #400]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038ce:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d4:	0e1b      	lsrs	r3, r3, #24
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	019a      	lsls	r2, r3, #6
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	071b      	lsls	r3, r3, #28
 80038f4:	4957      	ldr	r1, [pc, #348]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003926:	d129      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003928:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393c:	0f1b      	lsrs	r3, r3, #28
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	019a      	lsls	r2, r3, #6
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	431a      	orrs	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	071b      	lsls	r3, r3, #28
 800395c:	493d      	ldr	r1, [pc, #244]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003964:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396a:	f023 021f 	bic.w	r2, r3, #31
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	3b01      	subs	r3, #1
 8003974:	4937      	ldr	r1, [pc, #220]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003988:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	0e1b      	lsrs	r3, r3, #24
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399c:	0f1b      	lsrs	r3, r3, #28
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	019a      	lsls	r2, r3, #6
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	071b      	lsls	r3, r3, #28
 80039bc:	4925      	ldr	r1, [pc, #148]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d011      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	019a      	lsls	r2, r3, #6
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	071b      	lsls	r3, r3, #28
 80039ec:	4919      	ldr	r1, [pc, #100]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fd feb8 	bl	8001774 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a08:	f7fd feb4 	bl	8001774 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0d7      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 80cd 	bne.w	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fe9b 	bl	8001774 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a42:	f7fd fe97 	bl	8001774 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d903      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0ba      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a58:	4b5e      	ldr	r3, [pc, #376]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a64:	d0ed      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02e      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d12a      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	0f1b      	lsrs	r3, r3, #28
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	4944      	ldr	r1, [pc, #272]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aca:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	493d      	ldr	r1, [pc, #244]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af8:	d11d      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	0e1b      	lsrs	r3, r3, #24
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b08:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	0f1b      	lsrs	r3, r3, #28
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	019a      	lsls	r2, r3, #6
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	071b      	lsls	r3, r3, #28
 8003b2e:	4929      	ldr	r1, [pc, #164]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	0e1b      	lsrs	r3, r3, #24
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b50:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	019a      	lsls	r2, r3, #6
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	071b      	lsls	r3, r3, #28
 8003b76:	4917      	ldr	r1, [pc, #92]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4911      	ldr	r1, [pc, #68]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fde8 	bl	8001774 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ba8:	f7fd fde4 	bl	8001774 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e007      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc6:	d1ef      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e049      	b.n	8003c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fbe0 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 fda0 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d001      	beq.n	8003ca0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e04c      	b.n	8003d3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <HAL_TIM_Base_Start+0xc0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d01d      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <HAL_TIM_Base_Start+0xc4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <HAL_TIM_Base_Start+0xc8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <HAL_TIM_Base_Start+0xcc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_TIM_Base_Start+0xd0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_TIM_Base_Start+0xd4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_Base_Start+0x70>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_TIM_Base_Start+0xd8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d115      	bne.n	8003d24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_TIM_Base_Start+0xdc>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d015      	beq.n	8003d36 <HAL_TIM_Base_Start+0xae>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d011      	beq.n	8003d36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e008      	b.n	8003d36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40010400 	.word	0x40010400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40001800 	.word	0x40001800
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e054      	b.n	8003e2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d01d      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_TIM_Base_Start_IT+0xe4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <HAL_TIM_Base_Start_IT+0xe8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d115      	bne.n	8003e14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_TIM_Base_Start_IT+0xec>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d015      	beq.n	8003e26 <HAL_TIM_Base_Start_IT+0xbe>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d011      	beq.n	8003e26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e000      	b.n	8003e28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40001800 	.word	0x40001800
 8003e54:	00010007 	.word	0x00010007

08003e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e049      	b.n	8003efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f841 	bl	8003f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fc60 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x24>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e03c      	b.n	8003fba <HAL_TIM_PWM_Start+0x9e>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d109      	bne.n	8003f5a <HAL_TIM_PWM_Start+0x3e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e02f      	b.n	8003fba <HAL_TIM_PWM_Start+0x9e>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x58>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e022      	b.n	8003fba <HAL_TIM_PWM_Start+0x9e>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d109      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x72>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e015      	b.n	8003fba <HAL_TIM_PWM_Start+0x9e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x8c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e008      	b.n	8003fba <HAL_TIM_PWM_Start+0x9e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e092      	b.n	80040e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0xb6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	e023      	b.n	800401a <HAL_TIM_PWM_Start+0xfe>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xc6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	e01b      	b.n	800401a <HAL_TIM_PWM_Start+0xfe>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xd6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	e013      	b.n	800401a <HAL_TIM_PWM_Start+0xfe>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Start+0xe6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	e00b      	b.n	800401a <HAL_TIM_PWM_Start+0xfe>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b10      	cmp	r3, #16
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Start+0xf6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004010:	e003      	b.n	800401a <HAL_TIM_PWM_Start+0xfe>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 ff32 	bl	8004e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_TIM_PWM_Start+0x1d4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_PWM_Start+0x120>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <HAL_TIM_PWM_Start+0x1d8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_TIM_PWM_Start+0x124>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_TIM_PWM_Start+0x126>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HAL_TIM_PWM_Start+0x1d4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d022      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d01d      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_TIM_PWM_Start+0x1dc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a20      	ldr	r2, [pc, #128]	; (80040fc <HAL_TIM_PWM_Start+0x1e0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <HAL_TIM_PWM_Start+0x1e4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_TIM_PWM_Start+0x1d8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_TIM_PWM_Start+0x1e8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x18a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_TIM_PWM_Start+0x1ec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d115      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_TIM_PWM_Start+0x1f0>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d015      	beq.n	80040e4 <HAL_TIM_PWM_Start+0x1c8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040be:	d011      	beq.n	80040e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d0:	e008      	b.n	80040e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e000      	b.n	80040e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40001800 	.word	0x40001800
 800410c:	00010007 	.word	0x00010007

08004110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fae4 	bl	8004720 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fad6 	bl	800470c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fae7 	bl	8004734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0204 	mvn.w	r2, #4
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 faba 	bl	8004720 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 faac 	bl	800470c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fabd 	bl	8004734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0208 	mvn.w	r2, #8
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa90 	bl	8004720 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa82 	bl	800470c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa93 	bl	8004734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa66 	bl	8004720 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa58 	bl	800470c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa69 	bl	8004734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fd72 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fea4 	bl	8005008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fe97 	bl	800501c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fa17 	bl	8004748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b20      	cmp	r3, #32
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0220 	mvn.w	r2, #32
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fe57 	bl	8004ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800436a:	2302      	movs	r3, #2
 800436c:	e0ff      	b.n	800456e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b14      	cmp	r3, #20
 800437a:	f200 80f0 	bhi.w	800455e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043d9 	.word	0x080043d9
 8004388:	0800455f 	.word	0x0800455f
 800438c:	0800455f 	.word	0x0800455f
 8004390:	0800455f 	.word	0x0800455f
 8004394:	08004419 	.word	0x08004419
 8004398:	0800455f 	.word	0x0800455f
 800439c:	0800455f 	.word	0x0800455f
 80043a0:	0800455f 	.word	0x0800455f
 80043a4:	0800445b 	.word	0x0800445b
 80043a8:	0800455f 	.word	0x0800455f
 80043ac:	0800455f 	.word	0x0800455f
 80043b0:	0800455f 	.word	0x0800455f
 80043b4:	0800449b 	.word	0x0800449b
 80043b8:	0800455f 	.word	0x0800455f
 80043bc:	0800455f 	.word	0x0800455f
 80043c0:	0800455f 	.word	0x0800455f
 80043c4:	080044dd 	.word	0x080044dd
 80043c8:	0800455f 	.word	0x0800455f
 80043cc:	0800455f 	.word	0x0800455f
 80043d0:	0800455f 	.word	0x0800455f
 80043d4:	0800451d 	.word	0x0800451d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa5c 	bl	800489c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0208 	orr.w	r2, r2, #8
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
      break;
 8004416:	e0a5      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 faae 	bl	8004980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6999      	ldr	r1, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	619a      	str	r2, [r3, #24]
      break;
 8004458:	e084      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fb05 	bl	8004a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0208 	orr.w	r2, r2, #8
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
      break;
 8004498:	e064      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fb5b 	bl	8004b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69d9      	ldr	r1, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	021a      	lsls	r2, r3, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	61da      	str	r2, [r3, #28]
      break;
 80044da:	e043      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb92 	bl	8004c0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451a:	e023      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fbc4 	bl	8004cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800455c:	e002      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      break;
 8004562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e0b4      	b.n	80046fe <HAL_TIM_ConfigClockSource+0x186>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4b56      	ldr	r3, [pc, #344]	; (8004708 <HAL_TIM_ConfigClockSource+0x190>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045cc:	d03e      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xd4>
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	f200 8087 	bhi.w	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	f000 8086 	beq.w	80046ea <HAL_TIM_ConfigClockSource+0x172>
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e2:	d87f      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b70      	cmp	r3, #112	; 0x70
 80045e6:	d01a      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xa6>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d87b      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b60      	cmp	r3, #96	; 0x60
 80045ee:	d050      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x11a>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d877      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b50      	cmp	r3, #80	; 0x50
 80045f6:	d03c      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0xfa>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d873      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d058      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d86f      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d064      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d86b      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d060      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d867      	bhi.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d05c      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d05a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x15a>
 800461c:	e062      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800462e:	f000 fc0d 	bl	8004e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]
      break;
 800464a:	e04f      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800465c:	f000 fbf6 	bl	8004e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800466e:	609a      	str	r2, [r3, #8]
      break;
 8004670:	e03c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fb6a 	bl	8004d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2150      	movs	r1, #80	; 0x50
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fbc3 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004690:	e02c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 fb89 	bl	8004db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2160      	movs	r1, #96	; 0x60
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fbb3 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e01c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 fb4a 	bl	8004d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2140      	movs	r1, #64	; 0x40
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fba3 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e00c      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f000 fb9a 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80046e2:	e003      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e000      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	fffeff88 	.word	0xfffeff88

0800470c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a40      	ldr	r2, [pc, #256]	; (8004870 <TIM_Base_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d00f      	beq.n	800479c <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3d      	ldr	r2, [pc, #244]	; (8004874 <TIM_Base_SetConfig+0x118>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <TIM_Base_SetConfig+0x11c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3b      	ldr	r2, [pc, #236]	; (800487c <TIM_Base_SetConfig+0x120>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3a      	ldr	r2, [pc, #232]	; (8004880 <TIM_Base_SetConfig+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d108      	bne.n	80047ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2f      	ldr	r2, [pc, #188]	; (8004870 <TIM_Base_SetConfig+0x114>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02b      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d027      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <TIM_Base_SetConfig+0x118>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d023      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <TIM_Base_SetConfig+0x11c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01f      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2a      	ldr	r2, [pc, #168]	; (800487c <TIM_Base_SetConfig+0x120>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01b      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a29      	ldr	r2, [pc, #164]	; (8004880 <TIM_Base_SetConfig+0x124>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d017      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a28      	ldr	r2, [pc, #160]	; (8004884 <TIM_Base_SetConfig+0x128>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a27      	ldr	r2, [pc, #156]	; (8004888 <TIM_Base_SetConfig+0x12c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00f      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a26      	ldr	r2, [pc, #152]	; (800488c <TIM_Base_SetConfig+0x130>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00b      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a25      	ldr	r2, [pc, #148]	; (8004890 <TIM_Base_SetConfig+0x134>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a24      	ldr	r2, [pc, #144]	; (8004894 <TIM_Base_SetConfig+0x138>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a23      	ldr	r2, [pc, #140]	; (8004898 <TIM_Base_SetConfig+0x13c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <TIM_Base_SetConfig+0x114>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <TIM_Base_SetConfig+0xf8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0c      	ldr	r2, [pc, #48]	; (8004880 <TIM_Base_SetConfig+0x124>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d103      	bne.n	800485c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	615a      	str	r2, [r3, #20]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40010400 	.word	0x40010400
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800
 8004890:	40001800 	.word	0x40001800
 8004894:	40001c00 	.word	0x40001c00
 8004898:	40002000 	.word	0x40002000

0800489c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <TIM_OC1_SetConfig+0xd8>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0302 	bic.w	r3, r3, #2
 80048e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a21      	ldr	r2, [pc, #132]	; (8004978 <TIM_OC1_SetConfig+0xdc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC1_SetConfig+0x64>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a20      	ldr	r2, [pc, #128]	; (800497c <TIM_OC1_SetConfig+0xe0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10c      	bne.n	800491a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0308 	bic.w	r3, r3, #8
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <TIM_OC1_SetConfig+0xdc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_OC1_SetConfig+0x8e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a15      	ldr	r2, [pc, #84]	; (800497c <TIM_OC1_SetConfig+0xe0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d111      	bne.n	800494e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	fffeff8f 	.word	0xfffeff8f
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400

08004980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <TIM_OC2_SetConfig+0xe4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0320 	bic.w	r3, r3, #32
 80049ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <TIM_OC2_SetConfig+0xe8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_OC2_SetConfig+0x68>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <TIM_OC2_SetConfig+0xec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10d      	bne.n	8004a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <TIM_OC2_SetConfig+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC2_SetConfig+0x94>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <TIM_OC2_SetConfig+0xec>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d113      	bne.n	8004a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	feff8fff 	.word	0xfeff8fff
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400

08004a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <TIM_OC3_SetConfig+0xe0>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <TIM_OC3_SetConfig+0xe4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_OC3_SetConfig+0x66>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <TIM_OC3_SetConfig+0xe8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10d      	bne.n	8004af2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <TIM_OC3_SetConfig+0xe4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC3_SetConfig+0x92>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <TIM_OC3_SetConfig+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d113      	bne.n	8004b2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	fffeff8f 	.word	0xfffeff8f
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40010400 	.word	0x40010400

08004b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <TIM_OC4_SetConfig+0xa4>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <TIM_OC4_SetConfig+0xa8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC4_SetConfig+0x68>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <TIM_OC4_SetConfig+0xac>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d109      	bne.n	8004bd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	feff8fff 	.word	0xfeff8fff
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400

08004c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <TIM_OC5_SetConfig+0x98>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <TIM_OC5_SetConfig+0x9c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC5_SetConfig+0x5e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <TIM_OC5_SetConfig+0xa0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d109      	bne.n	8004c7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	fffeff8f 	.word	0xfffeff8f
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40010400 	.word	0x40010400

08004cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <TIM_OC6_SetConfig+0x9c>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	051b      	lsls	r3, r3, #20
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <TIM_OC6_SetConfig+0xa0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC6_SetConfig+0x60>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <TIM_OC6_SetConfig+0xa4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d109      	bne.n	8004d24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	feff8fff 	.word	0xfeff8fff
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010400 	.word	0x40010400

08004d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 030a 	bic.w	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f043 0307 	orr.w	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e06d      	b.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d108      	bne.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d01d      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a16      	ldr	r2, [pc, #88]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10c      	bne.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40001800 	.word	0x40001800

08004ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e040      	b.n	80050c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc faac 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2224      	movs	r2, #36	; 0x24
 800505c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fba2 	bl	80057b8 <UART_SetConfig>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e022      	b.n	80050c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fdfa 	bl	8005c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800509a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fe81 	bl	8005dc4 <UART_CheckIdleState>
 80050c2:	4603      	mov	r3, r0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d171      	bne.n	80051c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_UART_Transmit+0x24>
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e06a      	b.n	80051ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2221      	movs	r2, #33	; 0x21
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005102:	f7fc fb37 	bl	8001774 <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005120:	d108      	bne.n	8005134 <HAL_UART_Transmit+0x68>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513c:	e02c      	b.n	8005198 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fe72 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e038      	b.n	80051ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1cc      	bne.n	800513e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fe3f 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e005      	b.n	80051ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0ba      	sub	sp, #232	; 0xe8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005202:	4013      	ands	r3, r2
 8005204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8297 	beq.w	8005760 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
      }
      return;
 800523a:	e291      	b.n	8005760 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800523c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8117 	beq.w	8005474 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005256:	4b85      	ldr	r3, [pc, #532]	; (800546c <HAL_UART_IRQHandler+0x298>)
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 810a 	beq.w	8005474 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <HAL_UART_IRQHandler+0xbc>
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d011      	beq.n	80052c0 <HAL_UART_IRQHandler+0xec>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2202      	movs	r2, #2
 80052ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	f043 0204 	orr.w	r2, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d011      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
 80052cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2204      	movs	r2, #4
 80052de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2208      	movs	r2, #8
 800531a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_UART_IRQHandler+0x18a>
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800534c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 81fd 	beq.w	8005764 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00d      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04f      	beq.n	8005456 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fe01 	bl	8005fbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d141      	bne.n	800544e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800540e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1d9      	bne.n	80053ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	2b00      	cmp	r3, #0
 800541c:	d013      	beq.n	8005446 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <HAL_UART_IRQHandler+0x29c>)
 8005424:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	4618      	mov	r0, r3
 800542c:	f7fc fb53 	bl	8001ad6 <HAL_DMA_Abort_IT>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e00f      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9a0 	bl	800578c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00b      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f99c 	bl	800578c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e007      	b.n	8005466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f998 	bl	800578c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005464:	e17e      	b.n	8005764 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005466:	bf00      	nop
    return;
 8005468:	e17c      	b.n	8005764 <HAL_UART_IRQHandler+0x590>
 800546a:	bf00      	nop
 800546c:	04000120 	.word	0x04000120
 8005470:	08006087 	.word	0x08006087

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 814c 	bne.w	8005716 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8145 	beq.w	8005716 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 813e 	beq.w	8005716 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2210      	movs	r2, #16
 80054a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	f040 80b6 	bne.w	800561e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8150 	beq.w	8005768 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f080 8148 	bcs.w	8005768 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	f000 8086 	beq.w	80055fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800551a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800551e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005526:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1da      	bne.n	80054f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800554a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005562:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e1      	bne.n	800553a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800559a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800559c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055cc:	f023 0310 	bic.w	r3, r3, #16
 80055d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055de:	65bb      	str	r3, [r7, #88]	; 0x58
 80055e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e4      	bne.n	80055bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fc f9fd 	bl	80019f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8c2 	bl	80057a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561c:	e0a4      	b.n	8005768 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800562a:	b29b      	uxth	r3, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8096 	beq.w	800576c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8091 	beq.w	800576c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
 800566e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e4      	bne.n	800564a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3308      	adds	r3, #8
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	623b      	str	r3, [r7, #32]
   return(result);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056a4:	633a      	str	r2, [r7, #48]	; 0x30
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e3      	bne.n	8005680 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0310 	bic.w	r3, r3, #16
 80056e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	69b9      	ldr	r1, [r7, #24]
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	617b      	str	r3, [r7, #20]
   return(result);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e4      	bne.n	80056cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f846 	bl	80057a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005714:	e02a      	b.n	800576c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01c      	beq.n	8005770 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
    }
    return;
 800573e:	e017      	b.n	8005770 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d012      	beq.n	8005772 <HAL_UART_IRQHandler+0x59e>
 800574c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00c      	beq.n	8005772 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fcaa 	bl	80060b2 <UART_EndTransmit_IT>
    return;
 800575e:	e008      	b.n	8005772 <HAL_UART_IRQHandler+0x59e>
      return;
 8005760:	bf00      	nop
 8005762:	e006      	b.n	8005772 <HAL_UART_IRQHandler+0x59e>
    return;
 8005764:	bf00      	nop
 8005766:	e004      	b.n	8005772 <HAL_UART_IRQHandler+0x59e>
      return;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <HAL_UART_IRQHandler+0x59e>
      return;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_UART_IRQHandler+0x59e>
    return;
 8005770:	bf00      	nop
  }

}
 8005772:	37e8      	adds	r7, #232	; 0xe8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4ba6      	ldr	r3, [pc, #664]	; (8005a7c <UART_SetConfig+0x2c4>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a94      	ldr	r2, [pc, #592]	; (8005a80 <UART_SetConfig+0x2c8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d120      	bne.n	8005876 <UART_SetConfig+0xbe>
 8005834:	4b93      	ldr	r3, [pc, #588]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d816      	bhi.n	8005870 <UART_SetConfig+0xb8>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x90>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	08005865 	.word	0x08005865
 8005850:	0800585f 	.word	0x0800585f
 8005854:	0800586b 	.word	0x0800586b
 8005858:	2301      	movs	r3, #1
 800585a:	77fb      	strb	r3, [r7, #31]
 800585c:	e150      	b.n	8005b00 <UART_SetConfig+0x348>
 800585e:	2302      	movs	r3, #2
 8005860:	77fb      	strb	r3, [r7, #31]
 8005862:	e14d      	b.n	8005b00 <UART_SetConfig+0x348>
 8005864:	2304      	movs	r3, #4
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e14a      	b.n	8005b00 <UART_SetConfig+0x348>
 800586a:	2308      	movs	r3, #8
 800586c:	77fb      	strb	r3, [r7, #31]
 800586e:	e147      	b.n	8005b00 <UART_SetConfig+0x348>
 8005870:	2310      	movs	r3, #16
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e144      	b.n	8005b00 <UART_SetConfig+0x348>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a83      	ldr	r2, [pc, #524]	; (8005a88 <UART_SetConfig+0x2d0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d132      	bne.n	80058e6 <UART_SetConfig+0x12e>
 8005880:	4b80      	ldr	r3, [pc, #512]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b0c      	cmp	r3, #12
 800588c:	d828      	bhi.n	80058e0 <UART_SetConfig+0x128>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0xdc>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058e1 	.word	0x080058e1
 80058a0:	080058e1 	.word	0x080058e1
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058e1 	.word	0x080058e1
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080058e1 	.word	0x080058e1
 80058b4:	080058cf 	.word	0x080058cf
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e1 	.word	0x080058e1
 80058c4:	080058db 	.word	0x080058db
 80058c8:	2300      	movs	r3, #0
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e118      	b.n	8005b00 <UART_SetConfig+0x348>
 80058ce:	2302      	movs	r3, #2
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e115      	b.n	8005b00 <UART_SetConfig+0x348>
 80058d4:	2304      	movs	r3, #4
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e112      	b.n	8005b00 <UART_SetConfig+0x348>
 80058da:	2308      	movs	r3, #8
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e10f      	b.n	8005b00 <UART_SetConfig+0x348>
 80058e0:	2310      	movs	r3, #16
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e10c      	b.n	8005b00 <UART_SetConfig+0x348>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <UART_SetConfig+0x2d4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d120      	bne.n	8005932 <UART_SetConfig+0x17a>
 80058f0:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <UART_SetConfig+0x2cc>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058fa:	2b30      	cmp	r3, #48	; 0x30
 80058fc:	d013      	beq.n	8005926 <UART_SetConfig+0x16e>
 80058fe:	2b30      	cmp	r3, #48	; 0x30
 8005900:	d814      	bhi.n	800592c <UART_SetConfig+0x174>
 8005902:	2b20      	cmp	r3, #32
 8005904:	d009      	beq.n	800591a <UART_SetConfig+0x162>
 8005906:	2b20      	cmp	r3, #32
 8005908:	d810      	bhi.n	800592c <UART_SetConfig+0x174>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <UART_SetConfig+0x15c>
 800590e:	2b10      	cmp	r3, #16
 8005910:	d006      	beq.n	8005920 <UART_SetConfig+0x168>
 8005912:	e00b      	b.n	800592c <UART_SetConfig+0x174>
 8005914:	2300      	movs	r3, #0
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e0f2      	b.n	8005b00 <UART_SetConfig+0x348>
 800591a:	2302      	movs	r3, #2
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e0ef      	b.n	8005b00 <UART_SetConfig+0x348>
 8005920:	2304      	movs	r3, #4
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e0ec      	b.n	8005b00 <UART_SetConfig+0x348>
 8005926:	2308      	movs	r3, #8
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e0e9      	b.n	8005b00 <UART_SetConfig+0x348>
 800592c:	2310      	movs	r3, #16
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e0e6      	b.n	8005b00 <UART_SetConfig+0x348>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a56      	ldr	r2, [pc, #344]	; (8005a90 <UART_SetConfig+0x2d8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d120      	bne.n	800597e <UART_SetConfig+0x1c6>
 800593c:	4b51      	ldr	r3, [pc, #324]	; (8005a84 <UART_SetConfig+0x2cc>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005946:	2bc0      	cmp	r3, #192	; 0xc0
 8005948:	d013      	beq.n	8005972 <UART_SetConfig+0x1ba>
 800594a:	2bc0      	cmp	r3, #192	; 0xc0
 800594c:	d814      	bhi.n	8005978 <UART_SetConfig+0x1c0>
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d009      	beq.n	8005966 <UART_SetConfig+0x1ae>
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d810      	bhi.n	8005978 <UART_SetConfig+0x1c0>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <UART_SetConfig+0x1a8>
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d006      	beq.n	800596c <UART_SetConfig+0x1b4>
 800595e:	e00b      	b.n	8005978 <UART_SetConfig+0x1c0>
 8005960:	2300      	movs	r3, #0
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e0cc      	b.n	8005b00 <UART_SetConfig+0x348>
 8005966:	2302      	movs	r3, #2
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e0c9      	b.n	8005b00 <UART_SetConfig+0x348>
 800596c:	2304      	movs	r3, #4
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0c6      	b.n	8005b00 <UART_SetConfig+0x348>
 8005972:	2308      	movs	r3, #8
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e0c3      	b.n	8005b00 <UART_SetConfig+0x348>
 8005978:	2310      	movs	r3, #16
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0c0      	b.n	8005b00 <UART_SetConfig+0x348>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <UART_SetConfig+0x2dc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d125      	bne.n	80059d4 <UART_SetConfig+0x21c>
 8005988:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <UART_SetConfig+0x2cc>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005996:	d017      	beq.n	80059c8 <UART_SetConfig+0x210>
 8005998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800599c:	d817      	bhi.n	80059ce <UART_SetConfig+0x216>
 800599e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a2:	d00b      	beq.n	80059bc <UART_SetConfig+0x204>
 80059a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a8:	d811      	bhi.n	80059ce <UART_SetConfig+0x216>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <UART_SetConfig+0x1fe>
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b2:	d006      	beq.n	80059c2 <UART_SetConfig+0x20a>
 80059b4:	e00b      	b.n	80059ce <UART_SetConfig+0x216>
 80059b6:	2300      	movs	r3, #0
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e0a1      	b.n	8005b00 <UART_SetConfig+0x348>
 80059bc:	2302      	movs	r3, #2
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e09e      	b.n	8005b00 <UART_SetConfig+0x348>
 80059c2:	2304      	movs	r3, #4
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e09b      	b.n	8005b00 <UART_SetConfig+0x348>
 80059c8:	2308      	movs	r3, #8
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e098      	b.n	8005b00 <UART_SetConfig+0x348>
 80059ce:	2310      	movs	r3, #16
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e095      	b.n	8005b00 <UART_SetConfig+0x348>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <UART_SetConfig+0x2e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d125      	bne.n	8005a2a <UART_SetConfig+0x272>
 80059de:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <UART_SetConfig+0x2cc>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ec:	d017      	beq.n	8005a1e <UART_SetConfig+0x266>
 80059ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f2:	d817      	bhi.n	8005a24 <UART_SetConfig+0x26c>
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f8:	d00b      	beq.n	8005a12 <UART_SetConfig+0x25a>
 80059fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fe:	d811      	bhi.n	8005a24 <UART_SetConfig+0x26c>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <UART_SetConfig+0x254>
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	d006      	beq.n	8005a18 <UART_SetConfig+0x260>
 8005a0a:	e00b      	b.n	8005a24 <UART_SetConfig+0x26c>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e076      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e073      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e070      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e06d      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e06a      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <UART_SetConfig+0x2e4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d138      	bne.n	8005aa6 <UART_SetConfig+0x2ee>
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a42:	d017      	beq.n	8005a74 <UART_SetConfig+0x2bc>
 8005a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a48:	d82a      	bhi.n	8005aa0 <UART_SetConfig+0x2e8>
 8005a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4e:	d00b      	beq.n	8005a68 <UART_SetConfig+0x2b0>
 8005a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a54:	d824      	bhi.n	8005aa0 <UART_SetConfig+0x2e8>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <UART_SetConfig+0x2aa>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d006      	beq.n	8005a6e <UART_SetConfig+0x2b6>
 8005a60:	e01e      	b.n	8005aa0 <UART_SetConfig+0x2e8>
 8005a62:	2300      	movs	r3, #0
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e04b      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e048      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e045      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a74:	2308      	movs	r3, #8
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e042      	b.n	8005b00 <UART_SetConfig+0x348>
 8005a7a:	bf00      	nop
 8005a7c:	efff69f3 	.word	0xefff69f3
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	40004c00 	.word	0x40004c00
 8005a94:	40005000 	.word	0x40005000
 8005a98:	40011400 	.word	0x40011400
 8005a9c:	40007800 	.word	0x40007800
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e02c      	b.n	8005b00 <UART_SetConfig+0x348>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a72      	ldr	r2, [pc, #456]	; (8005c74 <UART_SetConfig+0x4bc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d125      	bne.n	8005afc <UART_SetConfig+0x344>
 8005ab0:	4b71      	ldr	r3, [pc, #452]	; (8005c78 <UART_SetConfig+0x4c0>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005abe:	d017      	beq.n	8005af0 <UART_SetConfig+0x338>
 8005ac0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ac4:	d817      	bhi.n	8005af6 <UART_SetConfig+0x33e>
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aca:	d00b      	beq.n	8005ae4 <UART_SetConfig+0x32c>
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad0:	d811      	bhi.n	8005af6 <UART_SetConfig+0x33e>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <UART_SetConfig+0x326>
 8005ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ada:	d006      	beq.n	8005aea <UART_SetConfig+0x332>
 8005adc:	e00b      	b.n	8005af6 <UART_SetConfig+0x33e>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e00d      	b.n	8005b00 <UART_SetConfig+0x348>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e00a      	b.n	8005b00 <UART_SetConfig+0x348>
 8005aea:	2304      	movs	r3, #4
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e007      	b.n	8005b00 <UART_SetConfig+0x348>
 8005af0:	2308      	movs	r3, #8
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e004      	b.n	8005b00 <UART_SetConfig+0x348>
 8005af6:	2310      	movs	r3, #16
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e001      	b.n	8005b00 <UART_SetConfig+0x348>
 8005afc:	2310      	movs	r3, #16
 8005afe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b08:	d15b      	bne.n	8005bc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b0a:	7ffb      	ldrb	r3, [r7, #31]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d828      	bhi.n	8005b62 <UART_SetConfig+0x3aa>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x360>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	08005b63 	.word	0x08005b63
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b63 	.word	0x08005b63
 8005b34:	08005b63 	.word	0x08005b63
 8005b38:	08005b5b 	.word	0x08005b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fd fc34 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8005b40:	61b8      	str	r0, [r7, #24]
        break;
 8005b42:	e013      	b.n	8005b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fd fc44 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8005b48:	61b8      	str	r0, [r7, #24]
        break;
 8005b4a:	e00f      	b.n	8005b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <UART_SetConfig+0x4c4>)
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e00c      	b.n	8005b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b52:	f7fd fb17 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8005b56:	61b8      	str	r0, [r7, #24]
        break;
 8005b58:	e008      	b.n	8005b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	61bb      	str	r3, [r7, #24]
        break;
 8005b60:	e004      	b.n	8005b6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77bb      	strb	r3, [r7, #30]
        break;
 8005b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d074      	beq.n	8005c5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	005a      	lsls	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d916      	bls.n	8005bbc <UART_SetConfig+0x404>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d212      	bcs.n	8005bbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	89fa      	ldrh	r2, [r7, #14]
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	e04f      	b.n	8005c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	77bb      	strb	r3, [r7, #30]
 8005bc0:	e04c      	b.n	8005c5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc2:	7ffb      	ldrb	r3, [r7, #31]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d828      	bhi.n	8005c1a <UART_SetConfig+0x462>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x418>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fd fbd8 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61b8      	str	r0, [r7, #24]
        break;
 8005bfa:	e013      	b.n	8005c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fbe8 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8005c00:	61b8      	str	r0, [r7, #24]
        break;
 8005c02:	e00f      	b.n	8005c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <UART_SetConfig+0x4c4>)
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e00c      	b.n	8005c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fd fabb 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61b8      	str	r0, [r7, #24]
        break;
 8005c10:	e008      	b.n	8005c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e004      	b.n	8005c24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	77bb      	strb	r3, [r7, #30]
        break;
 8005c22:	bf00      	nop
    }

    if (pclk != 0U)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d018      	beq.n	8005c5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085a      	lsrs	r2, r3, #1
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b0f      	cmp	r3, #15
 8005c42:	d909      	bls.n	8005c58 <UART_SetConfig+0x4a0>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4a:	d205      	bcs.n	8005c58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	e001      	b.n	8005c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40007c00 	.word	0x40007c00
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400

08005c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d7e:	d10a      	bne.n	8005d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd4:	f7fb fcce 	bl	8001774 <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d10e      	bne.n	8005e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f81b 	bl	8005e32 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e011      	b.n	8005e2a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b09c      	sub	sp, #112	; 0x70
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e42:	e0a7      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	f000 80a3 	beq.w	8005f94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fb fc91 	bl	8001774 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d13f      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e6      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e068      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d050      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	d148      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e6      	bne.n	8005f0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f5e:	623a      	str	r2, [r7, #32]
 8005f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	69f9      	ldr	r1, [r7, #28]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e010      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f43f af48 	beq.w	8005e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3770      	adds	r7, #112	; 0x70
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b095      	sub	sp, #84	; 0x54
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800601e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e5      	bne.n	8005ff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	2b01      	cmp	r3, #1
 8006032:	d118      	bne.n	8006066 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	60bb      	str	r3, [r7, #8]
   return(result);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f023 0310 	bic.w	r3, r3, #16
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	613b      	str	r3, [r7, #16]
   return(result);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	669a      	str	r2, [r3, #104]	; 0x68
}
 800607a:	bf00      	nop
 800607c:	3754      	adds	r7, #84	; 0x54
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fb71 	bl	800578c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b088      	sub	sp, #32
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	613b      	str	r3, [r7, #16]
   return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fb3d 	bl	8005778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060fe:	bf00      	nop
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <malloc>:
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <malloc+0xc>)
 800610a:	4601      	mov	r1, r0
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f000 b82b 	b.w	8006168 <_malloc_r>
 8006112:	bf00      	nop
 8006114:	20000078 	.word	0x20000078

08006118 <free>:
 8006118:	4b02      	ldr	r3, [pc, #8]	; (8006124 <free+0xc>)
 800611a:	4601      	mov	r1, r0
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	f000 b913 	b.w	8006348 <_free_r>
 8006122:	bf00      	nop
 8006124:	20000078 	.word	0x20000078

08006128 <sbrk_aligned>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4e0e      	ldr	r6, [pc, #56]	; (8006164 <sbrk_aligned+0x3c>)
 800612c:	460c      	mov	r4, r1
 800612e:	6831      	ldr	r1, [r6, #0]
 8006130:	4605      	mov	r5, r0
 8006132:	b911      	cbnz	r1, 800613a <sbrk_aligned+0x12>
 8006134:	f000 f8cc 	bl	80062d0 <_sbrk_r>
 8006138:	6030      	str	r0, [r6, #0]
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f000 f8c7 	bl	80062d0 <_sbrk_r>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d00a      	beq.n	800615c <sbrk_aligned+0x34>
 8006146:	1cc4      	adds	r4, r0, #3
 8006148:	f024 0403 	bic.w	r4, r4, #3
 800614c:	42a0      	cmp	r0, r4
 800614e:	d007      	beq.n	8006160 <sbrk_aligned+0x38>
 8006150:	1a21      	subs	r1, r4, r0
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f8bc 	bl	80062d0 <_sbrk_r>
 8006158:	3001      	adds	r0, #1
 800615a:	d101      	bne.n	8006160 <sbrk_aligned+0x38>
 800615c:	f04f 34ff 	mov.w	r4, #4294967295
 8006160:	4620      	mov	r0, r4
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	200002bc 	.word	0x200002bc

08006168 <_malloc_r>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	1ccd      	adds	r5, r1, #3
 800616e:	f025 0503 	bic.w	r5, r5, #3
 8006172:	3508      	adds	r5, #8
 8006174:	2d0c      	cmp	r5, #12
 8006176:	bf38      	it	cc
 8006178:	250c      	movcc	r5, #12
 800617a:	2d00      	cmp	r5, #0
 800617c:	4607      	mov	r7, r0
 800617e:	db01      	blt.n	8006184 <_malloc_r+0x1c>
 8006180:	42a9      	cmp	r1, r5
 8006182:	d905      	bls.n	8006190 <_malloc_r+0x28>
 8006184:	230c      	movs	r3, #12
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	2600      	movs	r6, #0
 800618a:	4630      	mov	r0, r6
 800618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006190:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006264 <_malloc_r+0xfc>
 8006194:	f000 f868 	bl	8006268 <__malloc_lock>
 8006198:	f8d8 3000 	ldr.w	r3, [r8]
 800619c:	461c      	mov	r4, r3
 800619e:	bb5c      	cbnz	r4, 80061f8 <_malloc_r+0x90>
 80061a0:	4629      	mov	r1, r5
 80061a2:	4638      	mov	r0, r7
 80061a4:	f7ff ffc0 	bl	8006128 <sbrk_aligned>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	4604      	mov	r4, r0
 80061ac:	d155      	bne.n	800625a <_malloc_r+0xf2>
 80061ae:	f8d8 4000 	ldr.w	r4, [r8]
 80061b2:	4626      	mov	r6, r4
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	d145      	bne.n	8006244 <_malloc_r+0xdc>
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	d048      	beq.n	800624e <_malloc_r+0xe6>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	4631      	mov	r1, r6
 80061c0:	4638      	mov	r0, r7
 80061c2:	eb04 0903 	add.w	r9, r4, r3
 80061c6:	f000 f883 	bl	80062d0 <_sbrk_r>
 80061ca:	4581      	cmp	r9, r0
 80061cc:	d13f      	bne.n	800624e <_malloc_r+0xe6>
 80061ce:	6821      	ldr	r1, [r4, #0]
 80061d0:	1a6d      	subs	r5, r5, r1
 80061d2:	4629      	mov	r1, r5
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ffa7 	bl	8006128 <sbrk_aligned>
 80061da:	3001      	adds	r0, #1
 80061dc:	d037      	beq.n	800624e <_malloc_r+0xe6>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	442b      	add	r3, r5
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	f8d8 3000 	ldr.w	r3, [r8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d038      	beq.n	800625e <_malloc_r+0xf6>
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	42a2      	cmp	r2, r4
 80061f0:	d12b      	bne.n	800624a <_malloc_r+0xe2>
 80061f2:	2200      	movs	r2, #0
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	e00f      	b.n	8006218 <_malloc_r+0xb0>
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	1b52      	subs	r2, r2, r5
 80061fc:	d41f      	bmi.n	800623e <_malloc_r+0xd6>
 80061fe:	2a0b      	cmp	r2, #11
 8006200:	d917      	bls.n	8006232 <_malloc_r+0xca>
 8006202:	1961      	adds	r1, r4, r5
 8006204:	42a3      	cmp	r3, r4
 8006206:	6025      	str	r5, [r4, #0]
 8006208:	bf18      	it	ne
 800620a:	6059      	strne	r1, [r3, #4]
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	bf08      	it	eq
 8006210:	f8c8 1000 	streq.w	r1, [r8]
 8006214:	5162      	str	r2, [r4, r5]
 8006216:	604b      	str	r3, [r1, #4]
 8006218:	4638      	mov	r0, r7
 800621a:	f104 060b 	add.w	r6, r4, #11
 800621e:	f000 f829 	bl	8006274 <__malloc_unlock>
 8006222:	f026 0607 	bic.w	r6, r6, #7
 8006226:	1d23      	adds	r3, r4, #4
 8006228:	1af2      	subs	r2, r6, r3
 800622a:	d0ae      	beq.n	800618a <_malloc_r+0x22>
 800622c:	1b9b      	subs	r3, r3, r6
 800622e:	50a3      	str	r3, [r4, r2]
 8006230:	e7ab      	b.n	800618a <_malloc_r+0x22>
 8006232:	42a3      	cmp	r3, r4
 8006234:	6862      	ldr	r2, [r4, #4]
 8006236:	d1dd      	bne.n	80061f4 <_malloc_r+0x8c>
 8006238:	f8c8 2000 	str.w	r2, [r8]
 800623c:	e7ec      	b.n	8006218 <_malloc_r+0xb0>
 800623e:	4623      	mov	r3, r4
 8006240:	6864      	ldr	r4, [r4, #4]
 8006242:	e7ac      	b.n	800619e <_malloc_r+0x36>
 8006244:	4634      	mov	r4, r6
 8006246:	6876      	ldr	r6, [r6, #4]
 8006248:	e7b4      	b.n	80061b4 <_malloc_r+0x4c>
 800624a:	4613      	mov	r3, r2
 800624c:	e7cc      	b.n	80061e8 <_malloc_r+0x80>
 800624e:	230c      	movs	r3, #12
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4638      	mov	r0, r7
 8006254:	f000 f80e 	bl	8006274 <__malloc_unlock>
 8006258:	e797      	b.n	800618a <_malloc_r+0x22>
 800625a:	6025      	str	r5, [r4, #0]
 800625c:	e7dc      	b.n	8006218 <_malloc_r+0xb0>
 800625e:	605b      	str	r3, [r3, #4]
 8006260:	deff      	udf	#255	; 0xff
 8006262:	bf00      	nop
 8006264:	200002b8 	.word	0x200002b8

08006268 <__malloc_lock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_lock+0x8>)
 800626a:	f000 b86b 	b.w	8006344 <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	200003fc 	.word	0x200003fc

08006274 <__malloc_unlock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_unlock+0x8>)
 8006276:	f000 b866 	b.w	8006346 <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	200003fc 	.word	0x200003fc

08006280 <siprintf>:
 8006280:	b40e      	push	{r1, r2, r3}
 8006282:	b500      	push	{lr}
 8006284:	b09c      	sub	sp, #112	; 0x70
 8006286:	ab1d      	add	r3, sp, #116	; 0x74
 8006288:	9002      	str	r0, [sp, #8]
 800628a:	9006      	str	r0, [sp, #24]
 800628c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006290:	4809      	ldr	r0, [pc, #36]	; (80062b8 <siprintf+0x38>)
 8006292:	9107      	str	r1, [sp, #28]
 8006294:	9104      	str	r1, [sp, #16]
 8006296:	4909      	ldr	r1, [pc, #36]	; (80062bc <siprintf+0x3c>)
 8006298:	f853 2b04 	ldr.w	r2, [r3], #4
 800629c:	9105      	str	r1, [sp, #20]
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	a902      	add	r1, sp, #8
 80062a4:	f000 f8f6 	bl	8006494 <_svfiprintf_r>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	b01c      	add	sp, #112	; 0x70
 80062b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b4:	b003      	add	sp, #12
 80062b6:	4770      	bx	lr
 80062b8:	20000078 	.word	0x20000078
 80062bc:	ffff0208 	.word	0xffff0208

080062c0 <memset>:
 80062c0:	4402      	add	r2, r0
 80062c2:	4603      	mov	r3, r0
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d100      	bne.n	80062ca <memset+0xa>
 80062c8:	4770      	bx	lr
 80062ca:	f803 1b01 	strb.w	r1, [r3], #1
 80062ce:	e7f9      	b.n	80062c4 <memset+0x4>

080062d0 <_sbrk_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4d06      	ldr	r5, [pc, #24]	; (80062ec <_sbrk_r+0x1c>)
 80062d4:	2300      	movs	r3, #0
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	f7fa fec4 	bl	8001068 <_sbrk>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_sbrk_r+0x1a>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_sbrk_r+0x1a>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	200003f8 	.word	0x200003f8

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000078 	.word	0x20000078

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f000 fbae 	bl	8006a70 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08006af4 	.word	0x08006af4
 8006338:	08006af4 	.word	0x08006af4
 800633c:	08006af4 	.word	0x08006af4
 8006340:	08006af8 	.word	0x08006af8

08006344 <__retarget_lock_acquire_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_release_recursive>:
 8006346:	4770      	bx	lr

08006348 <_free_r>:
 8006348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800634a:	2900      	cmp	r1, #0
 800634c:	d044      	beq.n	80063d8 <_free_r+0x90>
 800634e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006352:	9001      	str	r0, [sp, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f1a1 0404 	sub.w	r4, r1, #4
 800635a:	bfb8      	it	lt
 800635c:	18e4      	addlt	r4, r4, r3
 800635e:	f7ff ff83 	bl	8006268 <__malloc_lock>
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <_free_r+0x94>)
 8006364:	9801      	ldr	r0, [sp, #4]
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	b933      	cbnz	r3, 8006378 <_free_r+0x30>
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	6014      	str	r4, [r2, #0]
 800636e:	b003      	add	sp, #12
 8006370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006374:	f7ff bf7e 	b.w	8006274 <__malloc_unlock>
 8006378:	42a3      	cmp	r3, r4
 800637a:	d908      	bls.n	800638e <_free_r+0x46>
 800637c:	6825      	ldr	r5, [r4, #0]
 800637e:	1961      	adds	r1, r4, r5
 8006380:	428b      	cmp	r3, r1
 8006382:	bf01      	itttt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	1949      	addeq	r1, r1, r5
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	e7ed      	b.n	800636a <_free_r+0x22>
 800638e:	461a      	mov	r2, r3
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b10b      	cbz	r3, 8006398 <_free_r+0x50>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d9fa      	bls.n	800638e <_free_r+0x46>
 8006398:	6811      	ldr	r1, [r2, #0]
 800639a:	1855      	adds	r5, r2, r1
 800639c:	42a5      	cmp	r5, r4
 800639e:	d10b      	bne.n	80063b8 <_free_r+0x70>
 80063a0:	6824      	ldr	r4, [r4, #0]
 80063a2:	4421      	add	r1, r4
 80063a4:	1854      	adds	r4, r2, r1
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	d1e0      	bne.n	800636e <_free_r+0x26>
 80063ac:	681c      	ldr	r4, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	6053      	str	r3, [r2, #4]
 80063b2:	440c      	add	r4, r1
 80063b4:	6014      	str	r4, [r2, #0]
 80063b6:	e7da      	b.n	800636e <_free_r+0x26>
 80063b8:	d902      	bls.n	80063c0 <_free_r+0x78>
 80063ba:	230c      	movs	r3, #12
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	e7d6      	b.n	800636e <_free_r+0x26>
 80063c0:	6825      	ldr	r5, [r4, #0]
 80063c2:	1961      	adds	r1, r4, r5
 80063c4:	428b      	cmp	r3, r1
 80063c6:	bf04      	itt	eq
 80063c8:	6819      	ldreq	r1, [r3, #0]
 80063ca:	685b      	ldreq	r3, [r3, #4]
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	bf04      	itt	eq
 80063d0:	1949      	addeq	r1, r1, r5
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	6054      	str	r4, [r2, #4]
 80063d6:	e7ca      	b.n	800636e <_free_r+0x26>
 80063d8:	b003      	add	sp, #12
 80063da:	bd30      	pop	{r4, r5, pc}
 80063dc:	200002b8 	.word	0x200002b8

080063e0 <__ssputs_r>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	688e      	ldr	r6, [r1, #8]
 80063e6:	461f      	mov	r7, r3
 80063e8:	42be      	cmp	r6, r7
 80063ea:	680b      	ldr	r3, [r1, #0]
 80063ec:	4682      	mov	sl, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4690      	mov	r8, r2
 80063f2:	d82c      	bhi.n	800644e <__ssputs_r+0x6e>
 80063f4:	898a      	ldrh	r2, [r1, #12]
 80063f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063fa:	d026      	beq.n	800644a <__ssputs_r+0x6a>
 80063fc:	6965      	ldr	r5, [r4, #20]
 80063fe:	6909      	ldr	r1, [r1, #16]
 8006400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006404:	eba3 0901 	sub.w	r9, r3, r1
 8006408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800640c:	1c7b      	adds	r3, r7, #1
 800640e:	444b      	add	r3, r9
 8006410:	106d      	asrs	r5, r5, #1
 8006412:	429d      	cmp	r5, r3
 8006414:	bf38      	it	cc
 8006416:	461d      	movcc	r5, r3
 8006418:	0553      	lsls	r3, r2, #21
 800641a:	d527      	bpl.n	800646c <__ssputs_r+0x8c>
 800641c:	4629      	mov	r1, r5
 800641e:	f7ff fea3 	bl	8006168 <_malloc_r>
 8006422:	4606      	mov	r6, r0
 8006424:	b360      	cbz	r0, 8006480 <__ssputs_r+0xa0>
 8006426:	6921      	ldr	r1, [r4, #16]
 8006428:	464a      	mov	r2, r9
 800642a:	f000 fadb 	bl	80069e4 <memcpy>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	6126      	str	r6, [r4, #16]
 800643c:	6165      	str	r5, [r4, #20]
 800643e:	444e      	add	r6, r9
 8006440:	eba5 0509 	sub.w	r5, r5, r9
 8006444:	6026      	str	r6, [r4, #0]
 8006446:	60a5      	str	r5, [r4, #8]
 8006448:	463e      	mov	r6, r7
 800644a:	42be      	cmp	r6, r7
 800644c:	d900      	bls.n	8006450 <__ssputs_r+0x70>
 800644e:	463e      	mov	r6, r7
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	4632      	mov	r2, r6
 8006454:	4641      	mov	r1, r8
 8006456:	f000 faab 	bl	80069b0 <memmove>
 800645a:	68a3      	ldr	r3, [r4, #8]
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	60a3      	str	r3, [r4, #8]
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	4433      	add	r3, r6
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	2000      	movs	r0, #0
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646c:	462a      	mov	r2, r5
 800646e:	f000 fac7 	bl	8006a00 <_realloc_r>
 8006472:	4606      	mov	r6, r0
 8006474:	2800      	cmp	r0, #0
 8006476:	d1e0      	bne.n	800643a <__ssputs_r+0x5a>
 8006478:	6921      	ldr	r1, [r4, #16]
 800647a:	4650      	mov	r0, sl
 800647c:	f7ff ff64 	bl	8006348 <_free_r>
 8006480:	230c      	movs	r3, #12
 8006482:	f8ca 3000 	str.w	r3, [sl]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	e7e9      	b.n	8006468 <__ssputs_r+0x88>

08006494 <_svfiprintf_r>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	4698      	mov	r8, r3
 800649a:	898b      	ldrh	r3, [r1, #12]
 800649c:	061b      	lsls	r3, r3, #24
 800649e:	b09d      	sub	sp, #116	; 0x74
 80064a0:	4607      	mov	r7, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	4614      	mov	r4, r2
 80064a6:	d50e      	bpl.n	80064c6 <_svfiprintf_r+0x32>
 80064a8:	690b      	ldr	r3, [r1, #16]
 80064aa:	b963      	cbnz	r3, 80064c6 <_svfiprintf_r+0x32>
 80064ac:	2140      	movs	r1, #64	; 0x40
 80064ae:	f7ff fe5b 	bl	8006168 <_malloc_r>
 80064b2:	6028      	str	r0, [r5, #0]
 80064b4:	6128      	str	r0, [r5, #16]
 80064b6:	b920      	cbnz	r0, 80064c2 <_svfiprintf_r+0x2e>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	e0d0      	b.n	8006664 <_svfiprintf_r+0x1d0>
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	616b      	str	r3, [r5, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ca:	2320      	movs	r3, #32
 80064cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064d4:	2330      	movs	r3, #48	; 0x30
 80064d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800667c <_svfiprintf_r+0x1e8>
 80064da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064de:	f04f 0901 	mov.w	r9, #1
 80064e2:	4623      	mov	r3, r4
 80064e4:	469a      	mov	sl, r3
 80064e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ea:	b10a      	cbz	r2, 80064f0 <_svfiprintf_r+0x5c>
 80064ec:	2a25      	cmp	r2, #37	; 0x25
 80064ee:	d1f9      	bne.n	80064e4 <_svfiprintf_r+0x50>
 80064f0:	ebba 0b04 	subs.w	fp, sl, r4
 80064f4:	d00b      	beq.n	800650e <_svfiprintf_r+0x7a>
 80064f6:	465b      	mov	r3, fp
 80064f8:	4622      	mov	r2, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff ff6f 	bl	80063e0 <__ssputs_r>
 8006502:	3001      	adds	r0, #1
 8006504:	f000 80a9 	beq.w	800665a <_svfiprintf_r+0x1c6>
 8006508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800650a:	445a      	add	r2, fp
 800650c:	9209      	str	r2, [sp, #36]	; 0x24
 800650e:	f89a 3000 	ldrb.w	r3, [sl]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a1 	beq.w	800665a <_svfiprintf_r+0x1c6>
 8006518:	2300      	movs	r3, #0
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006522:	f10a 0a01 	add.w	sl, sl, #1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	9307      	str	r3, [sp, #28]
 800652a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800652e:	931a      	str	r3, [sp, #104]	; 0x68
 8006530:	4654      	mov	r4, sl
 8006532:	2205      	movs	r2, #5
 8006534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006538:	4850      	ldr	r0, [pc, #320]	; (800667c <_svfiprintf_r+0x1e8>)
 800653a:	f7f9 fe69 	bl	8000210 <memchr>
 800653e:	9a04      	ldr	r2, [sp, #16]
 8006540:	b9d8      	cbnz	r0, 800657a <_svfiprintf_r+0xe6>
 8006542:	06d0      	lsls	r0, r2, #27
 8006544:	bf44      	itt	mi
 8006546:	2320      	movmi	r3, #32
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654c:	0711      	lsls	r1, r2, #28
 800654e:	bf44      	itt	mi
 8006550:	232b      	movmi	r3, #43	; 0x2b
 8006552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006556:	f89a 3000 	ldrb.w	r3, [sl]
 800655a:	2b2a      	cmp	r3, #42	; 0x2a
 800655c:	d015      	beq.n	800658a <_svfiprintf_r+0xf6>
 800655e:	9a07      	ldr	r2, [sp, #28]
 8006560:	4654      	mov	r4, sl
 8006562:	2000      	movs	r0, #0
 8006564:	f04f 0c0a 	mov.w	ip, #10
 8006568:	4621      	mov	r1, r4
 800656a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800656e:	3b30      	subs	r3, #48	; 0x30
 8006570:	2b09      	cmp	r3, #9
 8006572:	d94d      	bls.n	8006610 <_svfiprintf_r+0x17c>
 8006574:	b1b0      	cbz	r0, 80065a4 <_svfiprintf_r+0x110>
 8006576:	9207      	str	r2, [sp, #28]
 8006578:	e014      	b.n	80065a4 <_svfiprintf_r+0x110>
 800657a:	eba0 0308 	sub.w	r3, r0, r8
 800657e:	fa09 f303 	lsl.w	r3, r9, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	46a2      	mov	sl, r4
 8006588:	e7d2      	b.n	8006530 <_svfiprintf_r+0x9c>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	1d19      	adds	r1, r3, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	9103      	str	r1, [sp, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfbb      	ittet	lt
 8006596:	425b      	neglt	r3, r3
 8006598:	f042 0202 	orrlt.w	r2, r2, #2
 800659c:	9307      	strge	r3, [sp, #28]
 800659e:	9307      	strlt	r3, [sp, #28]
 80065a0:	bfb8      	it	lt
 80065a2:	9204      	strlt	r2, [sp, #16]
 80065a4:	7823      	ldrb	r3, [r4, #0]
 80065a6:	2b2e      	cmp	r3, #46	; 0x2e
 80065a8:	d10c      	bne.n	80065c4 <_svfiprintf_r+0x130>
 80065aa:	7863      	ldrb	r3, [r4, #1]
 80065ac:	2b2a      	cmp	r3, #42	; 0x2a
 80065ae:	d134      	bne.n	800661a <_svfiprintf_r+0x186>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	9203      	str	r2, [sp, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfb8      	it	lt
 80065bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065c0:	3402      	adds	r4, #2
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800668c <_svfiprintf_r+0x1f8>
 80065c8:	7821      	ldrb	r1, [r4, #0]
 80065ca:	2203      	movs	r2, #3
 80065cc:	4650      	mov	r0, sl
 80065ce:	f7f9 fe1f 	bl	8000210 <memchr>
 80065d2:	b138      	cbz	r0, 80065e4 <_svfiprintf_r+0x150>
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	eba0 000a 	sub.w	r0, r0, sl
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	4082      	lsls	r2, r0
 80065de:	4313      	orrs	r3, r2
 80065e0:	3401      	adds	r4, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e8:	4825      	ldr	r0, [pc, #148]	; (8006680 <_svfiprintf_r+0x1ec>)
 80065ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ee:	2206      	movs	r2, #6
 80065f0:	f7f9 fe0e 	bl	8000210 <memchr>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d038      	beq.n	800666a <_svfiprintf_r+0x1d6>
 80065f8:	4b22      	ldr	r3, [pc, #136]	; (8006684 <_svfiprintf_r+0x1f0>)
 80065fa:	bb1b      	cbnz	r3, 8006644 <_svfiprintf_r+0x1b0>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	3307      	adds	r3, #7
 8006600:	f023 0307 	bic.w	r3, r3, #7
 8006604:	3308      	adds	r3, #8
 8006606:	9303      	str	r3, [sp, #12]
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660a:	4433      	add	r3, r6
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	e768      	b.n	80064e2 <_svfiprintf_r+0x4e>
 8006610:	fb0c 3202 	mla	r2, ip, r2, r3
 8006614:	460c      	mov	r4, r1
 8006616:	2001      	movs	r0, #1
 8006618:	e7a6      	b.n	8006568 <_svfiprintf_r+0xd4>
 800661a:	2300      	movs	r3, #0
 800661c:	3401      	adds	r4, #1
 800661e:	9305      	str	r3, [sp, #20]
 8006620:	4619      	mov	r1, r3
 8006622:	f04f 0c0a 	mov.w	ip, #10
 8006626:	4620      	mov	r0, r4
 8006628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662c:	3a30      	subs	r2, #48	; 0x30
 800662e:	2a09      	cmp	r2, #9
 8006630:	d903      	bls.n	800663a <_svfiprintf_r+0x1a6>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0c6      	beq.n	80065c4 <_svfiprintf_r+0x130>
 8006636:	9105      	str	r1, [sp, #20]
 8006638:	e7c4      	b.n	80065c4 <_svfiprintf_r+0x130>
 800663a:	fb0c 2101 	mla	r1, ip, r1, r2
 800663e:	4604      	mov	r4, r0
 8006640:	2301      	movs	r3, #1
 8006642:	e7f0      	b.n	8006626 <_svfiprintf_r+0x192>
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	462a      	mov	r2, r5
 800664a:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <_svfiprintf_r+0x1f4>)
 800664c:	a904      	add	r1, sp, #16
 800664e:	4638      	mov	r0, r7
 8006650:	f3af 8000 	nop.w
 8006654:	1c42      	adds	r2, r0, #1
 8006656:	4606      	mov	r6, r0
 8006658:	d1d6      	bne.n	8006608 <_svfiprintf_r+0x174>
 800665a:	89ab      	ldrh	r3, [r5, #12]
 800665c:	065b      	lsls	r3, r3, #25
 800665e:	f53f af2d 	bmi.w	80064bc <_svfiprintf_r+0x28>
 8006662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006664:	b01d      	add	sp, #116	; 0x74
 8006666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666a:	ab03      	add	r3, sp, #12
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	462a      	mov	r2, r5
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <_svfiprintf_r+0x1f4>)
 8006672:	a904      	add	r1, sp, #16
 8006674:	4638      	mov	r0, r7
 8006676:	f000 f879 	bl	800676c <_printf_i>
 800667a:	e7eb      	b.n	8006654 <_svfiprintf_r+0x1c0>
 800667c:	08006ab8 	.word	0x08006ab8
 8006680:	08006ac2 	.word	0x08006ac2
 8006684:	00000000 	.word	0x00000000
 8006688:	080063e1 	.word	0x080063e1
 800668c:	08006abe 	.word	0x08006abe

08006690 <_printf_common>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	4616      	mov	r6, r2
 8006696:	4699      	mov	r9, r3
 8006698:	688a      	ldr	r2, [r1, #8]
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bfb8      	it	lt
 80066a4:	4613      	movlt	r3, r2
 80066a6:	6033      	str	r3, [r6, #0]
 80066a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ac:	4607      	mov	r7, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	b10a      	cbz	r2, 80066b6 <_printf_common+0x26>
 80066b2:	3301      	adds	r3, #1
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	0699      	lsls	r1, r3, #26
 80066ba:	bf42      	ittt	mi
 80066bc:	6833      	ldrmi	r3, [r6, #0]
 80066be:	3302      	addmi	r3, #2
 80066c0:	6033      	strmi	r3, [r6, #0]
 80066c2:	6825      	ldr	r5, [r4, #0]
 80066c4:	f015 0506 	ands.w	r5, r5, #6
 80066c8:	d106      	bne.n	80066d8 <_printf_common+0x48>
 80066ca:	f104 0a19 	add.w	sl, r4, #25
 80066ce:	68e3      	ldr	r3, [r4, #12]
 80066d0:	6832      	ldr	r2, [r6, #0]
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	42ab      	cmp	r3, r5
 80066d6:	dc26      	bgt.n	8006726 <_printf_common+0x96>
 80066d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066dc:	1e13      	subs	r3, r2, #0
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	bf18      	it	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	0692      	lsls	r2, r2, #26
 80066e6:	d42b      	bmi.n	8006740 <_printf_common+0xb0>
 80066e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066ec:	4649      	mov	r1, r9
 80066ee:	4638      	mov	r0, r7
 80066f0:	47c0      	blx	r8
 80066f2:	3001      	adds	r0, #1
 80066f4:	d01e      	beq.n	8006734 <_printf_common+0xa4>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	f003 0306 	and.w	r3, r3, #6
 80066fe:	2b04      	cmp	r3, #4
 8006700:	bf02      	ittt	eq
 8006702:	68e5      	ldreq	r5, [r4, #12]
 8006704:	6833      	ldreq	r3, [r6, #0]
 8006706:	1aed      	subeq	r5, r5, r3
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	bf0c      	ite	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	2500      	movne	r5, #0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfc4      	itt	gt
 8006716:	1a9b      	subgt	r3, r3, r2
 8006718:	18ed      	addgt	r5, r5, r3
 800671a:	2600      	movs	r6, #0
 800671c:	341a      	adds	r4, #26
 800671e:	42b5      	cmp	r5, r6
 8006720:	d11a      	bne.n	8006758 <_printf_common+0xc8>
 8006722:	2000      	movs	r0, #0
 8006724:	e008      	b.n	8006738 <_printf_common+0xa8>
 8006726:	2301      	movs	r3, #1
 8006728:	4652      	mov	r2, sl
 800672a:	4649      	mov	r1, r9
 800672c:	4638      	mov	r0, r7
 800672e:	47c0      	blx	r8
 8006730:	3001      	adds	r0, #1
 8006732:	d103      	bne.n	800673c <_printf_common+0xac>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	3501      	adds	r5, #1
 800673e:	e7c6      	b.n	80066ce <_printf_common+0x3e>
 8006740:	18e1      	adds	r1, r4, r3
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	2030      	movs	r0, #48	; 0x30
 8006746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674a:	4422      	add	r2, r4
 800674c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006754:	3302      	adds	r3, #2
 8006756:	e7c7      	b.n	80066e8 <_printf_common+0x58>
 8006758:	2301      	movs	r3, #1
 800675a:	4622      	mov	r2, r4
 800675c:	4649      	mov	r1, r9
 800675e:	4638      	mov	r0, r7
 8006760:	47c0      	blx	r8
 8006762:	3001      	adds	r0, #1
 8006764:	d0e6      	beq.n	8006734 <_printf_common+0xa4>
 8006766:	3601      	adds	r6, #1
 8006768:	e7d9      	b.n	800671e <_printf_common+0x8e>
	...

0800676c <_printf_i>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	7e0f      	ldrb	r7, [r1, #24]
 8006772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006774:	2f78      	cmp	r7, #120	; 0x78
 8006776:	4691      	mov	r9, r2
 8006778:	4680      	mov	r8, r0
 800677a:	460c      	mov	r4, r1
 800677c:	469a      	mov	sl, r3
 800677e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006782:	d807      	bhi.n	8006794 <_printf_i+0x28>
 8006784:	2f62      	cmp	r7, #98	; 0x62
 8006786:	d80a      	bhi.n	800679e <_printf_i+0x32>
 8006788:	2f00      	cmp	r7, #0
 800678a:	f000 80d4 	beq.w	8006936 <_printf_i+0x1ca>
 800678e:	2f58      	cmp	r7, #88	; 0x58
 8006790:	f000 80c0 	beq.w	8006914 <_printf_i+0x1a8>
 8006794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800679c:	e03a      	b.n	8006814 <_printf_i+0xa8>
 800679e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067a2:	2b15      	cmp	r3, #21
 80067a4:	d8f6      	bhi.n	8006794 <_printf_i+0x28>
 80067a6:	a101      	add	r1, pc, #4	; (adr r1, 80067ac <_printf_i+0x40>)
 80067a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006795 	.word	0x08006795
 80067b8:	08006795 	.word	0x08006795
 80067bc:	08006795 	.word	0x08006795
 80067c0:	08006795 	.word	0x08006795
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006795 	.word	0x08006795
 80067cc:	08006795 	.word	0x08006795
 80067d0:	08006795 	.word	0x08006795
 80067d4:	08006795 	.word	0x08006795
 80067d8:	0800691d 	.word	0x0800691d
 80067dc:	08006845 	.word	0x08006845
 80067e0:	080068d7 	.word	0x080068d7
 80067e4:	08006795 	.word	0x08006795
 80067e8:	08006795 	.word	0x08006795
 80067ec:	0800693f 	.word	0x0800693f
 80067f0:	08006795 	.word	0x08006795
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006795 	.word	0x08006795
 80067fc:	08006795 	.word	0x08006795
 8006800:	080068df 	.word	0x080068df
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	602a      	str	r2, [r5, #0]
 800680c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006814:	2301      	movs	r3, #1
 8006816:	e09f      	b.n	8006958 <_printf_i+0x1ec>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	0607      	lsls	r7, r0, #24
 800681e:	f103 0104 	add.w	r1, r3, #4
 8006822:	6029      	str	r1, [r5, #0]
 8006824:	d501      	bpl.n	800682a <_printf_i+0xbe>
 8006826:	681e      	ldr	r6, [r3, #0]
 8006828:	e003      	b.n	8006832 <_printf_i+0xc6>
 800682a:	0646      	lsls	r6, r0, #25
 800682c:	d5fb      	bpl.n	8006826 <_printf_i+0xba>
 800682e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006832:	2e00      	cmp	r6, #0
 8006834:	da03      	bge.n	800683e <_printf_i+0xd2>
 8006836:	232d      	movs	r3, #45	; 0x2d
 8006838:	4276      	negs	r6, r6
 800683a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800683e:	485a      	ldr	r0, [pc, #360]	; (80069a8 <_printf_i+0x23c>)
 8006840:	230a      	movs	r3, #10
 8006842:	e012      	b.n	800686a <_printf_i+0xfe>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	6029      	str	r1, [r5, #0]
 800684c:	0605      	lsls	r5, r0, #24
 800684e:	d501      	bpl.n	8006854 <_printf_i+0xe8>
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0xee>
 8006854:	0641      	lsls	r1, r0, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0xe4>
 8006858:	881e      	ldrh	r6, [r3, #0]
 800685a:	4853      	ldr	r0, [pc, #332]	; (80069a8 <_printf_i+0x23c>)
 800685c:	2f6f      	cmp	r7, #111	; 0x6f
 800685e:	bf0c      	ite	eq
 8006860:	2308      	moveq	r3, #8
 8006862:	230a      	movne	r3, #10
 8006864:	2100      	movs	r1, #0
 8006866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800686a:	6865      	ldr	r5, [r4, #4]
 800686c:	60a5      	str	r5, [r4, #8]
 800686e:	2d00      	cmp	r5, #0
 8006870:	bfa2      	ittt	ge
 8006872:	6821      	ldrge	r1, [r4, #0]
 8006874:	f021 0104 	bicge.w	r1, r1, #4
 8006878:	6021      	strge	r1, [r4, #0]
 800687a:	b90e      	cbnz	r6, 8006880 <_printf_i+0x114>
 800687c:	2d00      	cmp	r5, #0
 800687e:	d04b      	beq.n	8006918 <_printf_i+0x1ac>
 8006880:	4615      	mov	r5, r2
 8006882:	fbb6 f1f3 	udiv	r1, r6, r3
 8006886:	fb03 6711 	mls	r7, r3, r1, r6
 800688a:	5dc7      	ldrb	r7, [r0, r7]
 800688c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006890:	4637      	mov	r7, r6
 8006892:	42bb      	cmp	r3, r7
 8006894:	460e      	mov	r6, r1
 8006896:	d9f4      	bls.n	8006882 <_printf_i+0x116>
 8006898:	2b08      	cmp	r3, #8
 800689a:	d10b      	bne.n	80068b4 <_printf_i+0x148>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	07de      	lsls	r6, r3, #31
 80068a0:	d508      	bpl.n	80068b4 <_printf_i+0x148>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	6861      	ldr	r1, [r4, #4]
 80068a6:	4299      	cmp	r1, r3
 80068a8:	bfde      	ittt	le
 80068aa:	2330      	movle	r3, #48	; 0x30
 80068ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068b4:	1b52      	subs	r2, r2, r5
 80068b6:	6122      	str	r2, [r4, #16]
 80068b8:	f8cd a000 	str.w	sl, [sp]
 80068bc:	464b      	mov	r3, r9
 80068be:	aa03      	add	r2, sp, #12
 80068c0:	4621      	mov	r1, r4
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7ff fee4 	bl	8006690 <_printf_common>
 80068c8:	3001      	adds	r0, #1
 80068ca:	d14a      	bne.n	8006962 <_printf_i+0x1f6>
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	b004      	add	sp, #16
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	f043 0320 	orr.w	r3, r3, #32
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	4833      	ldr	r0, [pc, #204]	; (80069ac <_printf_i+0x240>)
 80068e0:	2778      	movs	r7, #120	; 0x78
 80068e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	6829      	ldr	r1, [r5, #0]
 80068ea:	061f      	lsls	r7, r3, #24
 80068ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80068f0:	d402      	bmi.n	80068f8 <_printf_i+0x18c>
 80068f2:	065f      	lsls	r7, r3, #25
 80068f4:	bf48      	it	mi
 80068f6:	b2b6      	uxthmi	r6, r6
 80068f8:	07df      	lsls	r7, r3, #31
 80068fa:	bf48      	it	mi
 80068fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006900:	6029      	str	r1, [r5, #0]
 8006902:	bf48      	it	mi
 8006904:	6023      	strmi	r3, [r4, #0]
 8006906:	b91e      	cbnz	r6, 8006910 <_printf_i+0x1a4>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	f023 0320 	bic.w	r3, r3, #32
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	2310      	movs	r3, #16
 8006912:	e7a7      	b.n	8006864 <_printf_i+0xf8>
 8006914:	4824      	ldr	r0, [pc, #144]	; (80069a8 <_printf_i+0x23c>)
 8006916:	e7e4      	b.n	80068e2 <_printf_i+0x176>
 8006918:	4615      	mov	r5, r2
 800691a:	e7bd      	b.n	8006898 <_printf_i+0x12c>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	6826      	ldr	r6, [r4, #0]
 8006920:	6961      	ldr	r1, [r4, #20]
 8006922:	1d18      	adds	r0, r3, #4
 8006924:	6028      	str	r0, [r5, #0]
 8006926:	0635      	lsls	r5, r6, #24
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	d501      	bpl.n	8006930 <_printf_i+0x1c4>
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	e002      	b.n	8006936 <_printf_i+0x1ca>
 8006930:	0670      	lsls	r0, r6, #25
 8006932:	d5fb      	bpl.n	800692c <_printf_i+0x1c0>
 8006934:	8019      	strh	r1, [r3, #0]
 8006936:	2300      	movs	r3, #0
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	4615      	mov	r5, r2
 800693c:	e7bc      	b.n	80068b8 <_printf_i+0x14c>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	1d1a      	adds	r2, r3, #4
 8006942:	602a      	str	r2, [r5, #0]
 8006944:	681d      	ldr	r5, [r3, #0]
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	2100      	movs	r1, #0
 800694a:	4628      	mov	r0, r5
 800694c:	f7f9 fc60 	bl	8000210 <memchr>
 8006950:	b108      	cbz	r0, 8006956 <_printf_i+0x1ea>
 8006952:	1b40      	subs	r0, r0, r5
 8006954:	6060      	str	r0, [r4, #4]
 8006956:	6863      	ldr	r3, [r4, #4]
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	2300      	movs	r3, #0
 800695c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006960:	e7aa      	b.n	80068b8 <_printf_i+0x14c>
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	462a      	mov	r2, r5
 8006966:	4649      	mov	r1, r9
 8006968:	4640      	mov	r0, r8
 800696a:	47d0      	blx	sl
 800696c:	3001      	adds	r0, #1
 800696e:	d0ad      	beq.n	80068cc <_printf_i+0x160>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	079b      	lsls	r3, r3, #30
 8006974:	d413      	bmi.n	800699e <_printf_i+0x232>
 8006976:	68e0      	ldr	r0, [r4, #12]
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	4298      	cmp	r0, r3
 800697c:	bfb8      	it	lt
 800697e:	4618      	movlt	r0, r3
 8006980:	e7a6      	b.n	80068d0 <_printf_i+0x164>
 8006982:	2301      	movs	r3, #1
 8006984:	4632      	mov	r2, r6
 8006986:	4649      	mov	r1, r9
 8006988:	4640      	mov	r0, r8
 800698a:	47d0      	blx	sl
 800698c:	3001      	adds	r0, #1
 800698e:	d09d      	beq.n	80068cc <_printf_i+0x160>
 8006990:	3501      	adds	r5, #1
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	9903      	ldr	r1, [sp, #12]
 8006996:	1a5b      	subs	r3, r3, r1
 8006998:	42ab      	cmp	r3, r5
 800699a:	dcf2      	bgt.n	8006982 <_printf_i+0x216>
 800699c:	e7eb      	b.n	8006976 <_printf_i+0x20a>
 800699e:	2500      	movs	r5, #0
 80069a0:	f104 0619 	add.w	r6, r4, #25
 80069a4:	e7f5      	b.n	8006992 <_printf_i+0x226>
 80069a6:	bf00      	nop
 80069a8:	08006ac9 	.word	0x08006ac9
 80069ac:	08006ada 	.word	0x08006ada

080069b0 <memmove>:
 80069b0:	4288      	cmp	r0, r1
 80069b2:	b510      	push	{r4, lr}
 80069b4:	eb01 0402 	add.w	r4, r1, r2
 80069b8:	d902      	bls.n	80069c0 <memmove+0x10>
 80069ba:	4284      	cmp	r4, r0
 80069bc:	4623      	mov	r3, r4
 80069be:	d807      	bhi.n	80069d0 <memmove+0x20>
 80069c0:	1e43      	subs	r3, r0, #1
 80069c2:	42a1      	cmp	r1, r4
 80069c4:	d008      	beq.n	80069d8 <memmove+0x28>
 80069c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ce:	e7f8      	b.n	80069c2 <memmove+0x12>
 80069d0:	4402      	add	r2, r0
 80069d2:	4601      	mov	r1, r0
 80069d4:	428a      	cmp	r2, r1
 80069d6:	d100      	bne.n	80069da <memmove+0x2a>
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069e2:	e7f7      	b.n	80069d4 <memmove+0x24>

080069e4 <memcpy>:
 80069e4:	440a      	add	r2, r1
 80069e6:	4291      	cmp	r1, r2
 80069e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ec:	d100      	bne.n	80069f0 <memcpy+0xc>
 80069ee:	4770      	bx	lr
 80069f0:	b510      	push	{r4, lr}
 80069f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d1f9      	bne.n	80069f2 <memcpy+0xe>
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <_realloc_r>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4680      	mov	r8, r0
 8006a06:	4614      	mov	r4, r2
 8006a08:	460e      	mov	r6, r1
 8006a0a:	b921      	cbnz	r1, 8006a16 <_realloc_r+0x16>
 8006a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4611      	mov	r1, r2
 8006a12:	f7ff bba9 	b.w	8006168 <_malloc_r>
 8006a16:	b92a      	cbnz	r2, 8006a24 <_realloc_r+0x24>
 8006a18:	f7ff fc96 	bl	8006348 <_free_r>
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f000 f81b 	bl	8006a5e <_malloc_usable_size_r>
 8006a28:	4284      	cmp	r4, r0
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	d802      	bhi.n	8006a34 <_realloc_r+0x34>
 8006a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a32:	d812      	bhi.n	8006a5a <_realloc_r+0x5a>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fb96 	bl	8006168 <_malloc_r>
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0ed      	beq.n	8006a1e <_realloc_r+0x1e>
 8006a42:	42bc      	cmp	r4, r7
 8006a44:	4622      	mov	r2, r4
 8006a46:	4631      	mov	r1, r6
 8006a48:	bf28      	it	cs
 8006a4a:	463a      	movcs	r2, r7
 8006a4c:	f7ff ffca 	bl	80069e4 <memcpy>
 8006a50:	4631      	mov	r1, r6
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff fc78 	bl	8006348 <_free_r>
 8006a58:	e7e1      	b.n	8006a1e <_realloc_r+0x1e>
 8006a5a:	4635      	mov	r5, r6
 8006a5c:	e7df      	b.n	8006a1e <_realloc_r+0x1e>

08006a5e <_malloc_usable_size_r>:
 8006a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a62:	1f18      	subs	r0, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bfbc      	itt	lt
 8006a68:	580b      	ldrlt	r3, [r1, r0]
 8006a6a:	18c0      	addlt	r0, r0, r3
 8006a6c:	4770      	bx	lr
	...

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr
