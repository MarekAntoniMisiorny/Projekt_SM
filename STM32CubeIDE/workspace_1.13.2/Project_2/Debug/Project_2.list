
Project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004850  08004850  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004858  08004858  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000030  08004890  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004890  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecae  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c1  00000000  00000000  0002ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a9  00000000  00000000  00031fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000243d  00000000  00000000  00032959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010906  00000000  00000000  00034d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000814b6  00000000  00000000  0004569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d40  00000000  00000000  000c6b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c9894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800474c 	.word	0x0800474c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	0800474c 	.word	0x0800474c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fad3 	bl	80007d4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fa5f 	bl	80006fc <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fac5 	bl	80007d4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fabb 	bl	80007d4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fa6b 	bl	8000748 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fa61 	bl	8000748 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f834 	bl	8000330 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4699      	mov	r9, r3
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	469c      	mov	ip, r3
 80002de:	0413      	lsls	r3, r2, #16
 80002e0:	4647      	mov	r7, r8
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	001d      	movs	r5, r3
 80002e6:	000e      	movs	r6, r1
 80002e8:	4661      	mov	r1, ip
 80002ea:	0404      	lsls	r4, r0, #16
 80002ec:	0c24      	lsrs	r4, r4, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	0007      	movs	r7, r0
 80002f2:	0c10      	lsrs	r0, r2, #16
 80002f4:	434b      	muls	r3, r1
 80002f6:	4365      	muls	r5, r4
 80002f8:	4341      	muls	r1, r0
 80002fa:	4360      	muls	r0, r4
 80002fc:	0c2c      	lsrs	r4, r5, #16
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	1820      	adds	r0, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	4283      	cmp	r3, r0
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4356      	muls	r6, r2
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	042d      	lsls	r5, r5, #16
 800031a:	0c2d      	lsrs	r5, r5, #16
 800031c:	1989      	adds	r1, r1, r6
 800031e:	4463      	add	r3, ip
 8000320:	0400      	lsls	r0, r0, #16
 8000322:	1940      	adds	r0, r0, r5
 8000324:	18c9      	adds	r1, r1, r3
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	000d      	movs	r5, r1
 8000340:	4692      	mov	sl, r2
 8000342:	4699      	mov	r9, r3
 8000344:	b083      	sub	sp, #12
 8000346:	428b      	cmp	r3, r1
 8000348:	d830      	bhi.n	80003ac <__udivmoddi4+0x7c>
 800034a:	d02d      	beq.n	80003a8 <__udivmoddi4+0x78>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 fc58 	bl	8000c04 <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 fc53 	bl	8000c04 <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	d434      	bmi.n	80003d0 <__udivmoddi4+0xa0>
 8000366:	469b      	mov	fp, r3
 8000368:	4653      	mov	r3, sl
 800036a:	465a      	mov	r2, fp
 800036c:	4093      	lsls	r3, r2
 800036e:	4642      	mov	r2, r8
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d83b      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800037c:	42af      	cmp	r7, r5
 800037e:	d100      	bne.n	8000382 <__udivmoddi4+0x52>
 8000380:	e079      	b.n	8000476 <__udivmoddi4+0x146>
 8000382:	465b      	mov	r3, fp
 8000384:	1ba4      	subs	r4, r4, r6
 8000386:	41bd      	sbcs	r5, r7
 8000388:	2b00      	cmp	r3, #0
 800038a:	da00      	bge.n	800038e <__udivmoddi4+0x5e>
 800038c:	e076      	b.n	800047c <__udivmoddi4+0x14c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	465a      	mov	r2, fp
 800039a:	4093      	lsls	r3, r2
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	4642      	mov	r2, r8
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e029      	b.n	80003fc <__udivmoddi4+0xcc>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	d9cf      	bls.n	800034c <__udivmoddi4+0x1c>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2300      	movs	r3, #0
 80003b0:	9200      	str	r2, [sp, #0]
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <__udivmoddi4+0x8e>
 80003ba:	601c      	str	r4, [r3, #0]
 80003bc:	605d      	str	r5, [r3, #4]
 80003be:	9800      	ldr	r0, [sp, #0]
 80003c0:	9901      	ldr	r1, [sp, #4]
 80003c2:	b003      	add	sp, #12
 80003c4:	bcf0      	pop	{r4, r5, r6, r7}
 80003c6:	46bb      	mov	fp, r7
 80003c8:	46b2      	mov	sl, r6
 80003ca:	46a9      	mov	r9, r5
 80003cc:	46a0      	mov	r8, r4
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	4642      	mov	r2, r8
 80003d2:	469b      	mov	fp, r3
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	4652      	mov	r2, sl
 80003da:	40da      	lsrs	r2, r3
 80003dc:	4641      	mov	r1, r8
 80003de:	0013      	movs	r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	408a      	lsls	r2, r1
 80003e4:	0017      	movs	r7, r2
 80003e6:	4642      	mov	r2, r8
 80003e8:	431f      	orrs	r7, r3
 80003ea:	4653      	mov	r3, sl
 80003ec:	4093      	lsls	r3, r2
 80003ee:	001e      	movs	r6, r3
 80003f0:	42af      	cmp	r7, r5
 80003f2:	d9c3      	bls.n	800037c <__udivmoddi4+0x4c>
 80003f4:	2200      	movs	r2, #0
 80003f6:	2300      	movs	r3, #0
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	4643      	mov	r3, r8
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0d8      	beq.n	80003b4 <__udivmoddi4+0x84>
 8000402:	07fb      	lsls	r3, r7, #31
 8000404:	0872      	lsrs	r2, r6, #1
 8000406:	431a      	orrs	r2, r3
 8000408:	4646      	mov	r6, r8
 800040a:	087b      	lsrs	r3, r7, #1
 800040c:	e00e      	b.n	800042c <__udivmoddi4+0xfc>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d101      	bne.n	8000416 <__udivmoddi4+0xe6>
 8000412:	42a2      	cmp	r2, r4
 8000414:	d80c      	bhi.n	8000430 <__udivmoddi4+0x100>
 8000416:	1aa4      	subs	r4, r4, r2
 8000418:	419d      	sbcs	r5, r3
 800041a:	2001      	movs	r0, #1
 800041c:	1924      	adds	r4, r4, r4
 800041e:	416d      	adcs	r5, r5
 8000420:	2100      	movs	r1, #0
 8000422:	3e01      	subs	r6, #1
 8000424:	1824      	adds	r4, r4, r0
 8000426:	414d      	adcs	r5, r1
 8000428:	2e00      	cmp	r6, #0
 800042a:	d006      	beq.n	800043a <__udivmoddi4+0x10a>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d9ee      	bls.n	800040e <__udivmoddi4+0xde>
 8000430:	3e01      	subs	r6, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d1f8      	bne.n	800042c <__udivmoddi4+0xfc>
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	465b      	mov	r3, fp
 8000440:	1900      	adds	r0, r0, r4
 8000442:	4169      	adcs	r1, r5
 8000444:	2b00      	cmp	r3, #0
 8000446:	db24      	blt.n	8000492 <__udivmoddi4+0x162>
 8000448:	002b      	movs	r3, r5
 800044a:	465a      	mov	r2, fp
 800044c:	4644      	mov	r4, r8
 800044e:	40d3      	lsrs	r3, r2
 8000450:	002a      	movs	r2, r5
 8000452:	40e2      	lsrs	r2, r4
 8000454:	001c      	movs	r4, r3
 8000456:	465b      	mov	r3, fp
 8000458:	0015      	movs	r5, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	db2a      	blt.n	80004b4 <__udivmoddi4+0x184>
 800045e:	0026      	movs	r6, r4
 8000460:	409e      	lsls	r6, r3
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4647      	mov	r7, r8
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e79e      	b.n	80003b4 <__udivmoddi4+0x84>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d8bc      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800047a:	e782      	b.n	8000382 <__udivmoddi4+0x52>
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	2100      	movs	r1, #0
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	9100      	str	r1, [sp, #0]
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	2201      	movs	r2, #1
 800048c:	40da      	lsrs	r2, r3
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	e785      	b.n	800039e <__udivmoddi4+0x6e>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	002a      	movs	r2, r5
 800049a:	4646      	mov	r6, r8
 800049c:	409a      	lsls	r2, r3
 800049e:	0023      	movs	r3, r4
 80004a0:	40f3      	lsrs	r3, r6
 80004a2:	4644      	mov	r4, r8
 80004a4:	4313      	orrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dad4      	bge.n	800045e <__udivmoddi4+0x12e>
 80004b4:	4642      	mov	r2, r8
 80004b6:	002f      	movs	r7, r5
 80004b8:	2320      	movs	r3, #32
 80004ba:	0026      	movs	r6, r4
 80004bc:	4097      	lsls	r7, r2
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	003b      	movs	r3, r7
 80004c4:	4333      	orrs	r3, r6
 80004c6:	e7cd      	b.n	8000464 <__udivmoddi4+0x134>

080004c8 <__aeabi_fdiv>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	464f      	mov	r7, r9
 80004cc:	4646      	mov	r6, r8
 80004ce:	46d6      	mov	lr, sl
 80004d0:	0245      	lsls	r5, r0, #9
 80004d2:	b5c0      	push	{r6, r7, lr}
 80004d4:	0047      	lsls	r7, r0, #1
 80004d6:	1c0c      	adds	r4, r1, #0
 80004d8:	0a6d      	lsrs	r5, r5, #9
 80004da:	0e3f      	lsrs	r7, r7, #24
 80004dc:	0fc6      	lsrs	r6, r0, #31
 80004de:	2f00      	cmp	r7, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fdiv+0x1c>
 80004e2:	e06f      	b.n	80005c4 <__aeabi_fdiv+0xfc>
 80004e4:	2fff      	cmp	r7, #255	; 0xff
 80004e6:	d100      	bne.n	80004ea <__aeabi_fdiv+0x22>
 80004e8:	e074      	b.n	80005d4 <__aeabi_fdiv+0x10c>
 80004ea:	2300      	movs	r3, #0
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	4699      	mov	r9, r3
 80004f0:	469a      	mov	sl, r3
 80004f2:	00ed      	lsls	r5, r5, #3
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4315      	orrs	r5, r2
 80004f8:	3f7f      	subs	r7, #127	; 0x7f
 80004fa:	0263      	lsls	r3, r4, #9
 80004fc:	0a5b      	lsrs	r3, r3, #9
 80004fe:	4698      	mov	r8, r3
 8000500:	0063      	lsls	r3, r4, #1
 8000502:	0e1b      	lsrs	r3, r3, #24
 8000504:	0fe4      	lsrs	r4, r4, #31
 8000506:	2b00      	cmp	r3, #0
 8000508:	d04d      	beq.n	80005a6 <__aeabi_fdiv+0xde>
 800050a:	2bff      	cmp	r3, #255	; 0xff
 800050c:	d045      	beq.n	800059a <__aeabi_fdiv+0xd2>
 800050e:	4642      	mov	r2, r8
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	00d2      	lsls	r2, r2, #3
 8000514:	04c9      	lsls	r1, r1, #19
 8000516:	4311      	orrs	r1, r2
 8000518:	4688      	mov	r8, r1
 800051a:	2200      	movs	r2, #0
 800051c:	3b7f      	subs	r3, #127	; 0x7f
 800051e:	0031      	movs	r1, r6
 8000520:	1aff      	subs	r7, r7, r3
 8000522:	464b      	mov	r3, r9
 8000524:	4061      	eors	r1, r4
 8000526:	b2c9      	uxtb	r1, r1
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d900      	bls.n	800052e <__aeabi_fdiv+0x66>
 800052c:	e0b8      	b.n	80006a0 <__aeabi_fdiv+0x1d8>
 800052e:	4870      	ldr	r0, [pc, #448]	; (80006f0 <__aeabi_fdiv+0x228>)
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	58c3      	ldr	r3, [r0, r3]
 8000534:	469f      	mov	pc, r3
 8000536:	2300      	movs	r3, #0
 8000538:	4698      	mov	r8, r3
 800053a:	0026      	movs	r6, r4
 800053c:	4645      	mov	r5, r8
 800053e:	4692      	mov	sl, r2
 8000540:	4653      	mov	r3, sl
 8000542:	2b02      	cmp	r3, #2
 8000544:	d100      	bne.n	8000548 <__aeabi_fdiv+0x80>
 8000546:	e08d      	b.n	8000664 <__aeabi_fdiv+0x19c>
 8000548:	2b03      	cmp	r3, #3
 800054a:	d100      	bne.n	800054e <__aeabi_fdiv+0x86>
 800054c:	e0a1      	b.n	8000692 <__aeabi_fdiv+0x1ca>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d018      	beq.n	8000584 <__aeabi_fdiv+0xbc>
 8000552:	003b      	movs	r3, r7
 8000554:	337f      	adds	r3, #127	; 0x7f
 8000556:	2b00      	cmp	r3, #0
 8000558:	dd6d      	ble.n	8000636 <__aeabi_fdiv+0x16e>
 800055a:	076a      	lsls	r2, r5, #29
 800055c:	d004      	beq.n	8000568 <__aeabi_fdiv+0xa0>
 800055e:	220f      	movs	r2, #15
 8000560:	402a      	ands	r2, r5
 8000562:	2a04      	cmp	r2, #4
 8000564:	d000      	beq.n	8000568 <__aeabi_fdiv+0xa0>
 8000566:	3504      	adds	r5, #4
 8000568:	012a      	lsls	r2, r5, #4
 800056a:	d503      	bpl.n	8000574 <__aeabi_fdiv+0xac>
 800056c:	4b61      	ldr	r3, [pc, #388]	; (80006f4 <__aeabi_fdiv+0x22c>)
 800056e:	401d      	ands	r5, r3
 8000570:	003b      	movs	r3, r7
 8000572:	3380      	adds	r3, #128	; 0x80
 8000574:	2bfe      	cmp	r3, #254	; 0xfe
 8000576:	dd00      	ble.n	800057a <__aeabi_fdiv+0xb2>
 8000578:	e074      	b.n	8000664 <__aeabi_fdiv+0x19c>
 800057a:	01aa      	lsls	r2, r5, #6
 800057c:	0a52      	lsrs	r2, r2, #9
 800057e:	b2d8      	uxtb	r0, r3
 8000580:	e002      	b.n	8000588 <__aeabi_fdiv+0xc0>
 8000582:	000e      	movs	r6, r1
 8000584:	2000      	movs	r0, #0
 8000586:	2200      	movs	r2, #0
 8000588:	05c0      	lsls	r0, r0, #23
 800058a:	07f6      	lsls	r6, r6, #31
 800058c:	4310      	orrs	r0, r2
 800058e:	4330      	orrs	r0, r6
 8000590:	bce0      	pop	{r5, r6, r7}
 8000592:	46ba      	mov	sl, r7
 8000594:	46b1      	mov	r9, r6
 8000596:	46a8      	mov	r8, r5
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d13f      	bne.n	8000620 <__aeabi_fdiv+0x158>
 80005a0:	2202      	movs	r2, #2
 80005a2:	3fff      	subs	r7, #255	; 0xff
 80005a4:	e003      	b.n	80005ae <__aeabi_fdiv+0xe6>
 80005a6:	4643      	mov	r3, r8
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d12d      	bne.n	8000608 <__aeabi_fdiv+0x140>
 80005ac:	2201      	movs	r2, #1
 80005ae:	0031      	movs	r1, r6
 80005b0:	464b      	mov	r3, r9
 80005b2:	4061      	eors	r1, r4
 80005b4:	b2c9      	uxtb	r1, r1
 80005b6:	4313      	orrs	r3, r2
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d838      	bhi.n	800062e <__aeabi_fdiv+0x166>
 80005bc:	484e      	ldr	r0, [pc, #312]	; (80006f8 <__aeabi_fdiv+0x230>)
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	58c3      	ldr	r3, [r0, r3]
 80005c2:	469f      	mov	pc, r3
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	d113      	bne.n	80005f0 <__aeabi_fdiv+0x128>
 80005c8:	2304      	movs	r3, #4
 80005ca:	4699      	mov	r9, r3
 80005cc:	3b03      	subs	r3, #3
 80005ce:	2700      	movs	r7, #0
 80005d0:	469a      	mov	sl, r3
 80005d2:	e792      	b.n	80004fa <__aeabi_fdiv+0x32>
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	d105      	bne.n	80005e4 <__aeabi_fdiv+0x11c>
 80005d8:	2308      	movs	r3, #8
 80005da:	4699      	mov	r9, r3
 80005dc:	3b06      	subs	r3, #6
 80005de:	27ff      	movs	r7, #255	; 0xff
 80005e0:	469a      	mov	sl, r3
 80005e2:	e78a      	b.n	80004fa <__aeabi_fdiv+0x32>
 80005e4:	230c      	movs	r3, #12
 80005e6:	4699      	mov	r9, r3
 80005e8:	3b09      	subs	r3, #9
 80005ea:	27ff      	movs	r7, #255	; 0xff
 80005ec:	469a      	mov	sl, r3
 80005ee:	e784      	b.n	80004fa <__aeabi_fdiv+0x32>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f000 fae9 	bl	8000bc8 <__clzsi2>
 80005f6:	2776      	movs	r7, #118	; 0x76
 80005f8:	1f43      	subs	r3, r0, #5
 80005fa:	409d      	lsls	r5, r3
 80005fc:	2300      	movs	r3, #0
 80005fe:	427f      	negs	r7, r7
 8000600:	4699      	mov	r9, r3
 8000602:	469a      	mov	sl, r3
 8000604:	1a3f      	subs	r7, r7, r0
 8000606:	e778      	b.n	80004fa <__aeabi_fdiv+0x32>
 8000608:	4640      	mov	r0, r8
 800060a:	f000 fadd 	bl	8000bc8 <__clzsi2>
 800060e:	4642      	mov	r2, r8
 8000610:	1f43      	subs	r3, r0, #5
 8000612:	409a      	lsls	r2, r3
 8000614:	2376      	movs	r3, #118	; 0x76
 8000616:	425b      	negs	r3, r3
 8000618:	4690      	mov	r8, r2
 800061a:	1a1b      	subs	r3, r3, r0
 800061c:	2200      	movs	r2, #0
 800061e:	e77e      	b.n	800051e <__aeabi_fdiv+0x56>
 8000620:	2303      	movs	r3, #3
 8000622:	464a      	mov	r2, r9
 8000624:	431a      	orrs	r2, r3
 8000626:	4691      	mov	r9, r2
 8000628:	33fc      	adds	r3, #252	; 0xfc
 800062a:	2203      	movs	r2, #3
 800062c:	e777      	b.n	800051e <__aeabi_fdiv+0x56>
 800062e:	000e      	movs	r6, r1
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	2200      	movs	r2, #0
 8000634:	e7a8      	b.n	8000588 <__aeabi_fdiv+0xc0>
 8000636:	2201      	movs	r2, #1
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b1b      	cmp	r3, #27
 800063c:	dca2      	bgt.n	8000584 <__aeabi_fdiv+0xbc>
 800063e:	379e      	adds	r7, #158	; 0x9e
 8000640:	002a      	movs	r2, r5
 8000642:	40bd      	lsls	r5, r7
 8000644:	40da      	lsrs	r2, r3
 8000646:	1e6b      	subs	r3, r5, #1
 8000648:	419d      	sbcs	r5, r3
 800064a:	4315      	orrs	r5, r2
 800064c:	076a      	lsls	r2, r5, #29
 800064e:	d004      	beq.n	800065a <__aeabi_fdiv+0x192>
 8000650:	220f      	movs	r2, #15
 8000652:	402a      	ands	r2, r5
 8000654:	2a04      	cmp	r2, #4
 8000656:	d000      	beq.n	800065a <__aeabi_fdiv+0x192>
 8000658:	3504      	adds	r5, #4
 800065a:	016a      	lsls	r2, r5, #5
 800065c:	d544      	bpl.n	80006e8 <__aeabi_fdiv+0x220>
 800065e:	2001      	movs	r0, #1
 8000660:	2200      	movs	r2, #0
 8000662:	e791      	b.n	8000588 <__aeabi_fdiv+0xc0>
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	2200      	movs	r2, #0
 8000668:	e78e      	b.n	8000588 <__aeabi_fdiv+0xc0>
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	2600      	movs	r6, #0
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	03d2      	lsls	r2, r2, #15
 8000672:	e789      	b.n	8000588 <__aeabi_fdiv+0xc0>
 8000674:	2300      	movs	r3, #0
 8000676:	4698      	mov	r8, r3
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	03d2      	lsls	r2, r2, #15
 800067c:	4215      	tst	r5, r2
 800067e:	d008      	beq.n	8000692 <__aeabi_fdiv+0x1ca>
 8000680:	4643      	mov	r3, r8
 8000682:	4213      	tst	r3, r2
 8000684:	d105      	bne.n	8000692 <__aeabi_fdiv+0x1ca>
 8000686:	431a      	orrs	r2, r3
 8000688:	0252      	lsls	r2, r2, #9
 800068a:	0026      	movs	r6, r4
 800068c:	20ff      	movs	r0, #255	; 0xff
 800068e:	0a52      	lsrs	r2, r2, #9
 8000690:	e77a      	b.n	8000588 <__aeabi_fdiv+0xc0>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	03d2      	lsls	r2, r2, #15
 8000696:	432a      	orrs	r2, r5
 8000698:	0252      	lsls	r2, r2, #9
 800069a:	20ff      	movs	r0, #255	; 0xff
 800069c:	0a52      	lsrs	r2, r2, #9
 800069e:	e773      	b.n	8000588 <__aeabi_fdiv+0xc0>
 80006a0:	4642      	mov	r2, r8
 80006a2:	016b      	lsls	r3, r5, #5
 80006a4:	0155      	lsls	r5, r2, #5
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	d21a      	bcs.n	80006e0 <__aeabi_fdiv+0x218>
 80006aa:	201b      	movs	r0, #27
 80006ac:	2200      	movs	r2, #0
 80006ae:	3f01      	subs	r7, #1
 80006b0:	2601      	movs	r6, #1
 80006b2:	001c      	movs	r4, r3
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	db01      	blt.n	80006c0 <__aeabi_fdiv+0x1f8>
 80006bc:	429d      	cmp	r5, r3
 80006be:	d801      	bhi.n	80006c4 <__aeabi_fdiv+0x1fc>
 80006c0:	1b5b      	subs	r3, r3, r5
 80006c2:	4332      	orrs	r2, r6
 80006c4:	3801      	subs	r0, #1
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d1f3      	bne.n	80006b2 <__aeabi_fdiv+0x1ea>
 80006ca:	1e58      	subs	r0, r3, #1
 80006cc:	4183      	sbcs	r3, r0
 80006ce:	4313      	orrs	r3, r2
 80006d0:	001d      	movs	r5, r3
 80006d2:	003b      	movs	r3, r7
 80006d4:	337f      	adds	r3, #127	; 0x7f
 80006d6:	000e      	movs	r6, r1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dd00      	ble.n	80006de <__aeabi_fdiv+0x216>
 80006dc:	e73d      	b.n	800055a <__aeabi_fdiv+0x92>
 80006de:	e7aa      	b.n	8000636 <__aeabi_fdiv+0x16e>
 80006e0:	201a      	movs	r0, #26
 80006e2:	2201      	movs	r2, #1
 80006e4:	1b5b      	subs	r3, r3, r5
 80006e6:	e7e3      	b.n	80006b0 <__aeabi_fdiv+0x1e8>
 80006e8:	01aa      	lsls	r2, r5, #6
 80006ea:	2000      	movs	r0, #0
 80006ec:	0a52      	lsrs	r2, r2, #9
 80006ee:	e74b      	b.n	8000588 <__aeabi_fdiv+0xc0>
 80006f0:	08004764 	.word	0x08004764
 80006f4:	f7ffffff 	.word	0xf7ffffff
 80006f8:	080047a4 	.word	0x080047a4

080006fc <__eqsf2>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0042      	lsls	r2, r0, #1
 8000700:	0245      	lsls	r5, r0, #9
 8000702:	024e      	lsls	r6, r1, #9
 8000704:	004c      	lsls	r4, r1, #1
 8000706:	0fc3      	lsrs	r3, r0, #31
 8000708:	0a6d      	lsrs	r5, r5, #9
 800070a:	2001      	movs	r0, #1
 800070c:	0e12      	lsrs	r2, r2, #24
 800070e:	0a76      	lsrs	r6, r6, #9
 8000710:	0e24      	lsrs	r4, r4, #24
 8000712:	0fc9      	lsrs	r1, r1, #31
 8000714:	2aff      	cmp	r2, #255	; 0xff
 8000716:	d006      	beq.n	8000726 <__eqsf2+0x2a>
 8000718:	2cff      	cmp	r4, #255	; 0xff
 800071a:	d003      	beq.n	8000724 <__eqsf2+0x28>
 800071c:	42a2      	cmp	r2, r4
 800071e:	d101      	bne.n	8000724 <__eqsf2+0x28>
 8000720:	42b5      	cmp	r5, r6
 8000722:	d006      	beq.n	8000732 <__eqsf2+0x36>
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	2d00      	cmp	r5, #0
 8000728:	d1fc      	bne.n	8000724 <__eqsf2+0x28>
 800072a:	2cff      	cmp	r4, #255	; 0xff
 800072c:	d1fa      	bne.n	8000724 <__eqsf2+0x28>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d1f8      	bne.n	8000724 <__eqsf2+0x28>
 8000732:	428b      	cmp	r3, r1
 8000734:	d006      	beq.n	8000744 <__eqsf2+0x48>
 8000736:	2001      	movs	r0, #1
 8000738:	2a00      	cmp	r2, #0
 800073a:	d1f3      	bne.n	8000724 <__eqsf2+0x28>
 800073c:	0028      	movs	r0, r5
 800073e:	1e43      	subs	r3, r0, #1
 8000740:	4198      	sbcs	r0, r3
 8000742:	e7ef      	b.n	8000724 <__eqsf2+0x28>
 8000744:	2000      	movs	r0, #0
 8000746:	e7ed      	b.n	8000724 <__eqsf2+0x28>

08000748 <__gesf2>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	0042      	lsls	r2, r0, #1
 800074c:	0245      	lsls	r5, r0, #9
 800074e:	024e      	lsls	r6, r1, #9
 8000750:	004c      	lsls	r4, r1, #1
 8000752:	0fc3      	lsrs	r3, r0, #31
 8000754:	0a6d      	lsrs	r5, r5, #9
 8000756:	0e12      	lsrs	r2, r2, #24
 8000758:	0a76      	lsrs	r6, r6, #9
 800075a:	0e24      	lsrs	r4, r4, #24
 800075c:	0fc8      	lsrs	r0, r1, #31
 800075e:	2aff      	cmp	r2, #255	; 0xff
 8000760:	d01b      	beq.n	800079a <__gesf2+0x52>
 8000762:	2cff      	cmp	r4, #255	; 0xff
 8000764:	d00e      	beq.n	8000784 <__gesf2+0x3c>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d11b      	bne.n	80007a2 <__gesf2+0x5a>
 800076a:	2c00      	cmp	r4, #0
 800076c:	d101      	bne.n	8000772 <__gesf2+0x2a>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d01c      	beq.n	80007ac <__gesf2+0x64>
 8000772:	2d00      	cmp	r5, #0
 8000774:	d00c      	beq.n	8000790 <__gesf2+0x48>
 8000776:	4283      	cmp	r3, r0
 8000778:	d01c      	beq.n	80007b4 <__gesf2+0x6c>
 800077a:	2102      	movs	r1, #2
 800077c:	1e58      	subs	r0, r3, #1
 800077e:	4008      	ands	r0, r1
 8000780:	3801      	subs	r0, #1
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	2e00      	cmp	r6, #0
 8000786:	d122      	bne.n	80007ce <__gesf2+0x86>
 8000788:	2a00      	cmp	r2, #0
 800078a:	d1f4      	bne.n	8000776 <__gesf2+0x2e>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d1f2      	bne.n	8000776 <__gesf2+0x2e>
 8000790:	2800      	cmp	r0, #0
 8000792:	d1f6      	bne.n	8000782 <__gesf2+0x3a>
 8000794:	2001      	movs	r0, #1
 8000796:	4240      	negs	r0, r0
 8000798:	e7f3      	b.n	8000782 <__gesf2+0x3a>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d117      	bne.n	80007ce <__gesf2+0x86>
 800079e:	2cff      	cmp	r4, #255	; 0xff
 80007a0:	d0f0      	beq.n	8000784 <__gesf2+0x3c>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d1e7      	bne.n	8000776 <__gesf2+0x2e>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d1e5      	bne.n	8000776 <__gesf2+0x2e>
 80007aa:	e7e6      	b.n	800077a <__gesf2+0x32>
 80007ac:	2000      	movs	r0, #0
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d0e7      	beq.n	8000782 <__gesf2+0x3a>
 80007b2:	e7e2      	b.n	800077a <__gesf2+0x32>
 80007b4:	42a2      	cmp	r2, r4
 80007b6:	dc05      	bgt.n	80007c4 <__gesf2+0x7c>
 80007b8:	dbea      	blt.n	8000790 <__gesf2+0x48>
 80007ba:	42b5      	cmp	r5, r6
 80007bc:	d802      	bhi.n	80007c4 <__gesf2+0x7c>
 80007be:	d3e7      	bcc.n	8000790 <__gesf2+0x48>
 80007c0:	2000      	movs	r0, #0
 80007c2:	e7de      	b.n	8000782 <__gesf2+0x3a>
 80007c4:	4243      	negs	r3, r0
 80007c6:	4158      	adcs	r0, r3
 80007c8:	0040      	lsls	r0, r0, #1
 80007ca:	3801      	subs	r0, #1
 80007cc:	e7d9      	b.n	8000782 <__gesf2+0x3a>
 80007ce:	2002      	movs	r0, #2
 80007d0:	4240      	negs	r0, r0
 80007d2:	e7d6      	b.n	8000782 <__gesf2+0x3a>

080007d4 <__lesf2>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	0042      	lsls	r2, r0, #1
 80007d8:	0245      	lsls	r5, r0, #9
 80007da:	024e      	lsls	r6, r1, #9
 80007dc:	004c      	lsls	r4, r1, #1
 80007de:	0fc3      	lsrs	r3, r0, #31
 80007e0:	0a6d      	lsrs	r5, r5, #9
 80007e2:	0e12      	lsrs	r2, r2, #24
 80007e4:	0a76      	lsrs	r6, r6, #9
 80007e6:	0e24      	lsrs	r4, r4, #24
 80007e8:	0fc8      	lsrs	r0, r1, #31
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d00b      	beq.n	8000806 <__lesf2+0x32>
 80007ee:	2cff      	cmp	r4, #255	; 0xff
 80007f0:	d00d      	beq.n	800080e <__lesf2+0x3a>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d11f      	bne.n	8000836 <__lesf2+0x62>
 80007f6:	2c00      	cmp	r4, #0
 80007f8:	d116      	bne.n	8000828 <__lesf2+0x54>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d114      	bne.n	8000828 <__lesf2+0x54>
 80007fe:	2000      	movs	r0, #0
 8000800:	2d00      	cmp	r5, #0
 8000802:	d010      	beq.n	8000826 <__lesf2+0x52>
 8000804:	e009      	b.n	800081a <__lesf2+0x46>
 8000806:	2d00      	cmp	r5, #0
 8000808:	d10c      	bne.n	8000824 <__lesf2+0x50>
 800080a:	2cff      	cmp	r4, #255	; 0xff
 800080c:	d113      	bne.n	8000836 <__lesf2+0x62>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d108      	bne.n	8000824 <__lesf2+0x50>
 8000812:	2a00      	cmp	r2, #0
 8000814:	d008      	beq.n	8000828 <__lesf2+0x54>
 8000816:	4283      	cmp	r3, r0
 8000818:	d012      	beq.n	8000840 <__lesf2+0x6c>
 800081a:	2102      	movs	r1, #2
 800081c:	1e58      	subs	r0, r3, #1
 800081e:	4008      	ands	r0, r1
 8000820:	3801      	subs	r0, #1
 8000822:	e000      	b.n	8000826 <__lesf2+0x52>
 8000824:	2002      	movs	r0, #2
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	2d00      	cmp	r5, #0
 800082a:	d1f4      	bne.n	8000816 <__lesf2+0x42>
 800082c:	2800      	cmp	r0, #0
 800082e:	d1fa      	bne.n	8000826 <__lesf2+0x52>
 8000830:	2001      	movs	r0, #1
 8000832:	4240      	negs	r0, r0
 8000834:	e7f7      	b.n	8000826 <__lesf2+0x52>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d1ed      	bne.n	8000816 <__lesf2+0x42>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d1eb      	bne.n	8000816 <__lesf2+0x42>
 800083e:	e7ec      	b.n	800081a <__lesf2+0x46>
 8000840:	42a2      	cmp	r2, r4
 8000842:	dc05      	bgt.n	8000850 <__lesf2+0x7c>
 8000844:	dbf2      	blt.n	800082c <__lesf2+0x58>
 8000846:	42b5      	cmp	r5, r6
 8000848:	d802      	bhi.n	8000850 <__lesf2+0x7c>
 800084a:	d3ef      	bcc.n	800082c <__lesf2+0x58>
 800084c:	2000      	movs	r0, #0
 800084e:	e7ea      	b.n	8000826 <__lesf2+0x52>
 8000850:	4243      	negs	r3, r0
 8000852:	4158      	adcs	r0, r3
 8000854:	0040      	lsls	r0, r0, #1
 8000856:	3801      	subs	r0, #1
 8000858:	e7e5      	b.n	8000826 <__lesf2+0x52>
 800085a:	46c0      	nop			; (mov r8, r8)

0800085c <__aeabi_fmul>:
 800085c:	0243      	lsls	r3, r0, #9
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	464f      	mov	r7, r9
 8000864:	4646      	mov	r6, r8
 8000866:	4699      	mov	r9, r3
 8000868:	46d6      	mov	lr, sl
 800086a:	0fc3      	lsrs	r3, r0, #31
 800086c:	0045      	lsls	r5, r0, #1
 800086e:	4698      	mov	r8, r3
 8000870:	b5c0      	push	{r6, r7, lr}
 8000872:	464b      	mov	r3, r9
 8000874:	1c0f      	adds	r7, r1, #0
 8000876:	0e2d      	lsrs	r5, r5, #24
 8000878:	d100      	bne.n	800087c <__aeabi_fmul+0x20>
 800087a:	e0cb      	b.n	8000a14 <__aeabi_fmul+0x1b8>
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fmul+0x26>
 8000880:	e0cf      	b.n	8000a22 <__aeabi_fmul+0x1c6>
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	04d2      	lsls	r2, r2, #19
 8000888:	431a      	orrs	r2, r3
 800088a:	2300      	movs	r3, #0
 800088c:	4691      	mov	r9, r2
 800088e:	2600      	movs	r6, #0
 8000890:	469a      	mov	sl, r3
 8000892:	3d7f      	subs	r5, #127	; 0x7f
 8000894:	027c      	lsls	r4, r7, #9
 8000896:	007b      	lsls	r3, r7, #1
 8000898:	0a64      	lsrs	r4, r4, #9
 800089a:	0e1b      	lsrs	r3, r3, #24
 800089c:	0fff      	lsrs	r7, r7, #31
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fmul+0x48>
 80008a2:	e0a9      	b.n	80009f8 <__aeabi_fmul+0x19c>
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d011      	beq.n	80008cc <__aeabi_fmul+0x70>
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	00e4      	lsls	r4, r4, #3
 80008ac:	04d2      	lsls	r2, r2, #19
 80008ae:	4314      	orrs	r4, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	3b7f      	subs	r3, #127	; 0x7f
 80008b4:	195b      	adds	r3, r3, r5
 80008b6:	407a      	eors	r2, r7
 80008b8:	2000      	movs	r0, #0
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	1c5d      	adds	r5, r3, #1
 80008be:	2e0a      	cmp	r6, #10
 80008c0:	dd13      	ble.n	80008ea <__aeabi_fmul+0x8e>
 80008c2:	003a      	movs	r2, r7
 80008c4:	2e0b      	cmp	r6, #11
 80008c6:	d047      	beq.n	8000958 <__aeabi_fmul+0xfc>
 80008c8:	4647      	mov	r7, r8
 80008ca:	e03f      	b.n	800094c <__aeabi_fmul+0xf0>
 80008cc:	002b      	movs	r3, r5
 80008ce:	33ff      	adds	r3, #255	; 0xff
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d11e      	bne.n	8000912 <__aeabi_fmul+0xb6>
 80008d4:	2202      	movs	r2, #2
 80008d6:	4316      	orrs	r6, r2
 80008d8:	4642      	mov	r2, r8
 80008da:	3501      	adds	r5, #1
 80008dc:	407a      	eors	r2, r7
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	35ff      	adds	r5, #255	; 0xff
 80008e2:	2e0a      	cmp	r6, #10
 80008e4:	dd00      	ble.n	80008e8 <__aeabi_fmul+0x8c>
 80008e6:	e0e4      	b.n	8000ab2 <__aeabi_fmul+0x256>
 80008e8:	2002      	movs	r0, #2
 80008ea:	2e02      	cmp	r6, #2
 80008ec:	dc1c      	bgt.n	8000928 <__aeabi_fmul+0xcc>
 80008ee:	3e01      	subs	r6, #1
 80008f0:	2e01      	cmp	r6, #1
 80008f2:	d842      	bhi.n	800097a <__aeabi_fmul+0x11e>
 80008f4:	2802      	cmp	r0, #2
 80008f6:	d03d      	beq.n	8000974 <__aeabi_fmul+0x118>
 80008f8:	2801      	cmp	r0, #1
 80008fa:	d166      	bne.n	80009ca <__aeabi_fmul+0x16e>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	05c0      	lsls	r0, r0, #23
 8000902:	4308      	orrs	r0, r1
 8000904:	07d2      	lsls	r2, r2, #31
 8000906:	4310      	orrs	r0, r2
 8000908:	bce0      	pop	{r5, r6, r7}
 800090a:	46ba      	mov	sl, r7
 800090c:	46b1      	mov	r9, r6
 800090e:	46a8      	mov	r8, r5
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000912:	2203      	movs	r2, #3
 8000914:	4316      	orrs	r6, r2
 8000916:	4642      	mov	r2, r8
 8000918:	3501      	adds	r5, #1
 800091a:	407a      	eors	r2, r7
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	35ff      	adds	r5, #255	; 0xff
 8000920:	2e0a      	cmp	r6, #10
 8000922:	dd00      	ble.n	8000926 <__aeabi_fmul+0xca>
 8000924:	e0e4      	b.n	8000af0 <__aeabi_fmul+0x294>
 8000926:	2003      	movs	r0, #3
 8000928:	2101      	movs	r1, #1
 800092a:	40b1      	lsls	r1, r6
 800092c:	26a6      	movs	r6, #166	; 0xa6
 800092e:	00f6      	lsls	r6, r6, #3
 8000930:	4231      	tst	r1, r6
 8000932:	d10a      	bne.n	800094a <__aeabi_fmul+0xee>
 8000934:	2690      	movs	r6, #144	; 0x90
 8000936:	00b6      	lsls	r6, r6, #2
 8000938:	4231      	tst	r1, r6
 800093a:	d116      	bne.n	800096a <__aeabi_fmul+0x10e>
 800093c:	3eb9      	subs	r6, #185	; 0xb9
 800093e:	3eff      	subs	r6, #255	; 0xff
 8000940:	420e      	tst	r6, r1
 8000942:	d01a      	beq.n	800097a <__aeabi_fmul+0x11e>
 8000944:	46a1      	mov	r9, r4
 8000946:	4682      	mov	sl, r0
 8000948:	e000      	b.n	800094c <__aeabi_fmul+0xf0>
 800094a:	0017      	movs	r7, r2
 800094c:	4653      	mov	r3, sl
 800094e:	003a      	movs	r2, r7
 8000950:	2b02      	cmp	r3, #2
 8000952:	d00f      	beq.n	8000974 <__aeabi_fmul+0x118>
 8000954:	464c      	mov	r4, r9
 8000956:	4650      	mov	r0, sl
 8000958:	2803      	cmp	r0, #3
 800095a:	d1cd      	bne.n	80008f8 <__aeabi_fmul+0x9c>
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	03c9      	lsls	r1, r1, #15
 8000960:	4321      	orrs	r1, r4
 8000962:	0249      	lsls	r1, r1, #9
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	0a49      	lsrs	r1, r1, #9
 8000968:	e7ca      	b.n	8000900 <__aeabi_fmul+0xa4>
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	2200      	movs	r2, #0
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	03c9      	lsls	r1, r1, #15
 8000972:	e7c5      	b.n	8000900 <__aeabi_fmul+0xa4>
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	2100      	movs	r1, #0
 8000978:	e7c2      	b.n	8000900 <__aeabi_fmul+0xa4>
 800097a:	0c20      	lsrs	r0, r4, #16
 800097c:	4649      	mov	r1, r9
 800097e:	0424      	lsls	r4, r4, #16
 8000980:	0c24      	lsrs	r4, r4, #16
 8000982:	0027      	movs	r7, r4
 8000984:	0c0e      	lsrs	r6, r1, #16
 8000986:	0409      	lsls	r1, r1, #16
 8000988:	0c09      	lsrs	r1, r1, #16
 800098a:	4374      	muls	r4, r6
 800098c:	434f      	muls	r7, r1
 800098e:	4346      	muls	r6, r0
 8000990:	4348      	muls	r0, r1
 8000992:	0c39      	lsrs	r1, r7, #16
 8000994:	1900      	adds	r0, r0, r4
 8000996:	1809      	adds	r1, r1, r0
 8000998:	428c      	cmp	r4, r1
 800099a:	d903      	bls.n	80009a4 <__aeabi_fmul+0x148>
 800099c:	2080      	movs	r0, #128	; 0x80
 800099e:	0240      	lsls	r0, r0, #9
 80009a0:	4684      	mov	ip, r0
 80009a2:	4466      	add	r6, ip
 80009a4:	043f      	lsls	r7, r7, #16
 80009a6:	0408      	lsls	r0, r1, #16
 80009a8:	0c3f      	lsrs	r7, r7, #16
 80009aa:	19c0      	adds	r0, r0, r7
 80009ac:	0184      	lsls	r4, r0, #6
 80009ae:	1e67      	subs	r7, r4, #1
 80009b0:	41bc      	sbcs	r4, r7
 80009b2:	0c09      	lsrs	r1, r1, #16
 80009b4:	0e80      	lsrs	r0, r0, #26
 80009b6:	1989      	adds	r1, r1, r6
 80009b8:	4304      	orrs	r4, r0
 80009ba:	0189      	lsls	r1, r1, #6
 80009bc:	430c      	orrs	r4, r1
 80009be:	0109      	lsls	r1, r1, #4
 80009c0:	d571      	bpl.n	8000aa6 <__aeabi_fmul+0x24a>
 80009c2:	2301      	movs	r3, #1
 80009c4:	0861      	lsrs	r1, r4, #1
 80009c6:	401c      	ands	r4, r3
 80009c8:	430c      	orrs	r4, r1
 80009ca:	002b      	movs	r3, r5
 80009cc:	337f      	adds	r3, #127	; 0x7f
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dd51      	ble.n	8000a76 <__aeabi_fmul+0x21a>
 80009d2:	0761      	lsls	r1, r4, #29
 80009d4:	d004      	beq.n	80009e0 <__aeabi_fmul+0x184>
 80009d6:	210f      	movs	r1, #15
 80009d8:	4021      	ands	r1, r4
 80009da:	2904      	cmp	r1, #4
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fmul+0x184>
 80009de:	3404      	adds	r4, #4
 80009e0:	0121      	lsls	r1, r4, #4
 80009e2:	d503      	bpl.n	80009ec <__aeabi_fmul+0x190>
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <__aeabi_fmul+0x298>)
 80009e6:	401c      	ands	r4, r3
 80009e8:	002b      	movs	r3, r5
 80009ea:	3380      	adds	r3, #128	; 0x80
 80009ec:	2bfe      	cmp	r3, #254	; 0xfe
 80009ee:	dcc1      	bgt.n	8000974 <__aeabi_fmul+0x118>
 80009f0:	01a1      	lsls	r1, r4, #6
 80009f2:	0a49      	lsrs	r1, r1, #9
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	e783      	b.n	8000900 <__aeabi_fmul+0xa4>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d12c      	bne.n	8000a56 <__aeabi_fmul+0x1fa>
 80009fc:	2301      	movs	r3, #1
 80009fe:	4642      	mov	r2, r8
 8000a00:	431e      	orrs	r6, r3
 8000a02:	002b      	movs	r3, r5
 8000a04:	407a      	eors	r2, r7
 8000a06:	2001      	movs	r0, #1
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	1c5d      	adds	r5, r3, #1
 8000a0c:	2e0a      	cmp	r6, #10
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_fmul+0x1b6>
 8000a10:	e757      	b.n	80008c2 <__aeabi_fmul+0x66>
 8000a12:	e76a      	b.n	80008ea <__aeabi_fmul+0x8e>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d110      	bne.n	8000a3a <__aeabi_fmul+0x1de>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2604      	movs	r6, #4
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	469a      	mov	sl, r3
 8000a20:	e738      	b.n	8000894 <__aeabi_fmul+0x38>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <__aeabi_fmul+0x1d4>
 8000a26:	2302      	movs	r3, #2
 8000a28:	2608      	movs	r6, #8
 8000a2a:	25ff      	movs	r5, #255	; 0xff
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	e731      	b.n	8000894 <__aeabi_fmul+0x38>
 8000a30:	2303      	movs	r3, #3
 8000a32:	260c      	movs	r6, #12
 8000a34:	25ff      	movs	r5, #255	; 0xff
 8000a36:	469a      	mov	sl, r3
 8000a38:	e72c      	b.n	8000894 <__aeabi_fmul+0x38>
 8000a3a:	4648      	mov	r0, r9
 8000a3c:	f000 f8c4 	bl	8000bc8 <__clzsi2>
 8000a40:	464a      	mov	r2, r9
 8000a42:	1f43      	subs	r3, r0, #5
 8000a44:	2576      	movs	r5, #118	; 0x76
 8000a46:	409a      	lsls	r2, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	426d      	negs	r5, r5
 8000a4c:	4691      	mov	r9, r2
 8000a4e:	2600      	movs	r6, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	1a2d      	subs	r5, r5, r0
 8000a54:	e71e      	b.n	8000894 <__aeabi_fmul+0x38>
 8000a56:	0020      	movs	r0, r4
 8000a58:	f000 f8b6 	bl	8000bc8 <__clzsi2>
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	1f43      	subs	r3, r0, #5
 8000a60:	409c      	lsls	r4, r3
 8000a62:	1a2b      	subs	r3, r5, r0
 8000a64:	3b76      	subs	r3, #118	; 0x76
 8000a66:	407a      	eors	r2, r7
 8000a68:	2000      	movs	r0, #0
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	1c5d      	adds	r5, r3, #1
 8000a6e:	2e0a      	cmp	r6, #10
 8000a70:	dd00      	ble.n	8000a74 <__aeabi_fmul+0x218>
 8000a72:	e726      	b.n	80008c2 <__aeabi_fmul+0x66>
 8000a74:	e739      	b.n	80008ea <__aeabi_fmul+0x8e>
 8000a76:	2101      	movs	r1, #1
 8000a78:	1acb      	subs	r3, r1, r3
 8000a7a:	2b1b      	cmp	r3, #27
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_fmul+0x224>
 8000a7e:	e73d      	b.n	80008fc <__aeabi_fmul+0xa0>
 8000a80:	359e      	adds	r5, #158	; 0x9e
 8000a82:	0021      	movs	r1, r4
 8000a84:	40ac      	lsls	r4, r5
 8000a86:	40d9      	lsrs	r1, r3
 8000a88:	1e63      	subs	r3, r4, #1
 8000a8a:	419c      	sbcs	r4, r3
 8000a8c:	4321      	orrs	r1, r4
 8000a8e:	074b      	lsls	r3, r1, #29
 8000a90:	d004      	beq.n	8000a9c <__aeabi_fmul+0x240>
 8000a92:	230f      	movs	r3, #15
 8000a94:	400b      	ands	r3, r1
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d000      	beq.n	8000a9c <__aeabi_fmul+0x240>
 8000a9a:	3104      	adds	r1, #4
 8000a9c:	014b      	lsls	r3, r1, #5
 8000a9e:	d504      	bpl.n	8000aaa <__aeabi_fmul+0x24e>
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e72c      	b.n	8000900 <__aeabi_fmul+0xa4>
 8000aa6:	001d      	movs	r5, r3
 8000aa8:	e78f      	b.n	80009ca <__aeabi_fmul+0x16e>
 8000aaa:	0189      	lsls	r1, r1, #6
 8000aac:	2000      	movs	r0, #0
 8000aae:	0a49      	lsrs	r1, r1, #9
 8000ab0:	e726      	b.n	8000900 <__aeabi_fmul+0xa4>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	2e0f      	cmp	r6, #15
 8000ab6:	d10c      	bne.n	8000ad2 <__aeabi_fmul+0x276>
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	464b      	mov	r3, r9
 8000abc:	03c9      	lsls	r1, r1, #15
 8000abe:	420b      	tst	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__aeabi_fmul+0x282>
 8000ac2:	420c      	tst	r4, r1
 8000ac4:	d10b      	bne.n	8000ade <__aeabi_fmul+0x282>
 8000ac6:	4321      	orrs	r1, r4
 8000ac8:	0249      	lsls	r1, r1, #9
 8000aca:	003a      	movs	r2, r7
 8000acc:	20ff      	movs	r0, #255	; 0xff
 8000ace:	0a49      	lsrs	r1, r1, #9
 8000ad0:	e716      	b.n	8000900 <__aeabi_fmul+0xa4>
 8000ad2:	2e0b      	cmp	r6, #11
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fmul+0x27c>
 8000ad6:	e6f7      	b.n	80008c8 <__aeabi_fmul+0x6c>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	469a      	mov	sl, r3
 8000adc:	e736      	b.n	800094c <__aeabi_fmul+0xf0>
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	03c9      	lsls	r1, r1, #15
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	0249      	lsls	r1, r1, #9
 8000ae8:	4642      	mov	r2, r8
 8000aea:	20ff      	movs	r0, #255	; 0xff
 8000aec:	0a49      	lsrs	r1, r1, #9
 8000aee:	e707      	b.n	8000900 <__aeabi_fmul+0xa4>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e7df      	b.n	8000ab4 <__aeabi_fmul+0x258>
 8000af4:	f7ffffff 	.word	0xf7ffffff

08000af8 <__aeabi_f2iz>:
 8000af8:	0241      	lsls	r1, r0, #9
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0fc3      	lsrs	r3, r0, #31
 8000afe:	0a49      	lsrs	r1, r1, #9
 8000b00:	2000      	movs	r0, #0
 8000b02:	0e12      	lsrs	r2, r2, #24
 8000b04:	2a7e      	cmp	r2, #126	; 0x7e
 8000b06:	dd03      	ble.n	8000b10 <__aeabi_f2iz+0x18>
 8000b08:	2a9d      	cmp	r2, #157	; 0x9d
 8000b0a:	dd02      	ble.n	8000b12 <__aeabi_f2iz+0x1a>
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <__aeabi_f2iz+0x3c>)
 8000b0e:	1898      	adds	r0, r3, r2
 8000b10:	4770      	bx	lr
 8000b12:	2080      	movs	r0, #128	; 0x80
 8000b14:	0400      	lsls	r0, r0, #16
 8000b16:	4301      	orrs	r1, r0
 8000b18:	2a95      	cmp	r2, #149	; 0x95
 8000b1a:	dc07      	bgt.n	8000b2c <__aeabi_f2iz+0x34>
 8000b1c:	2096      	movs	r0, #150	; 0x96
 8000b1e:	1a82      	subs	r2, r0, r2
 8000b20:	40d1      	lsrs	r1, r2
 8000b22:	4248      	negs	r0, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f3      	bne.n	8000b10 <__aeabi_f2iz+0x18>
 8000b28:	0008      	movs	r0, r1
 8000b2a:	e7f1      	b.n	8000b10 <__aeabi_f2iz+0x18>
 8000b2c:	3a96      	subs	r2, #150	; 0x96
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	e7f7      	b.n	8000b22 <__aeabi_f2iz+0x2a>
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	7fffffff 	.word	0x7fffffff

08000b38 <__aeabi_ui2f>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	1e04      	subs	r4, r0, #0
 8000b3c:	d00e      	beq.n	8000b5c <__aeabi_ui2f+0x24>
 8000b3e:	f000 f843 	bl	8000bc8 <__clzsi2>
 8000b42:	239e      	movs	r3, #158	; 0x9e
 8000b44:	0001      	movs	r1, r0
 8000b46:	1a1b      	subs	r3, r3, r0
 8000b48:	2b96      	cmp	r3, #150	; 0x96
 8000b4a:	dc0c      	bgt.n	8000b66 <__aeabi_ui2f+0x2e>
 8000b4c:	2808      	cmp	r0, #8
 8000b4e:	d02c      	beq.n	8000baa <__aeabi_ui2f+0x72>
 8000b50:	3908      	subs	r1, #8
 8000b52:	408c      	lsls	r4, r1
 8000b54:	0264      	lsls	r4, r4, #9
 8000b56:	0a64      	lsrs	r4, r4, #9
 8000b58:	b2d8      	uxtb	r0, r3
 8000b5a:	e001      	b.n	8000b60 <__aeabi_ui2f+0x28>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2400      	movs	r4, #0
 8000b60:	05c0      	lsls	r0, r0, #23
 8000b62:	4320      	orrs	r0, r4
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
 8000b66:	2b99      	cmp	r3, #153	; 0x99
 8000b68:	dd0a      	ble.n	8000b80 <__aeabi_ui2f+0x48>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	321b      	adds	r2, #27
 8000b70:	4090      	lsls	r0, r2
 8000b72:	0002      	movs	r2, r0
 8000b74:	1e50      	subs	r0, r2, #1
 8000b76:	4182      	sbcs	r2, r0
 8000b78:	2005      	movs	r0, #5
 8000b7a:	1a40      	subs	r0, r0, r1
 8000b7c:	40c4      	lsrs	r4, r0
 8000b7e:	4314      	orrs	r4, r2
 8000b80:	2905      	cmp	r1, #5
 8000b82:	dc16      	bgt.n	8000bb2 <__aeabi_ui2f+0x7a>
 8000b84:	0022      	movs	r2, r4
 8000b86:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <__aeabi_ui2f+0x8c>)
 8000b88:	4002      	ands	r2, r0
 8000b8a:	0765      	lsls	r5, r4, #29
 8000b8c:	d009      	beq.n	8000ba2 <__aeabi_ui2f+0x6a>
 8000b8e:	250f      	movs	r5, #15
 8000b90:	402c      	ands	r4, r5
 8000b92:	2c04      	cmp	r4, #4
 8000b94:	d005      	beq.n	8000ba2 <__aeabi_ui2f+0x6a>
 8000b96:	3204      	adds	r2, #4
 8000b98:	0154      	lsls	r4, r2, #5
 8000b9a:	d502      	bpl.n	8000ba2 <__aeabi_ui2f+0x6a>
 8000b9c:	239f      	movs	r3, #159	; 0x9f
 8000b9e:	4002      	ands	r2, r0
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	0192      	lsls	r2, r2, #6
 8000ba4:	0a54      	lsrs	r4, r2, #9
 8000ba6:	b2d8      	uxtb	r0, r3
 8000ba8:	e7da      	b.n	8000b60 <__aeabi_ui2f+0x28>
 8000baa:	0264      	lsls	r4, r4, #9
 8000bac:	2096      	movs	r0, #150	; 0x96
 8000bae:	0a64      	lsrs	r4, r4, #9
 8000bb0:	e7d6      	b.n	8000b60 <__aeabi_ui2f+0x28>
 8000bb2:	1f4a      	subs	r2, r1, #5
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	0022      	movs	r2, r4
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <__aeabi_ui2f+0x8c>)
 8000bba:	4002      	ands	r2, r0
 8000bbc:	0765      	lsls	r5, r4, #29
 8000bbe:	d0f0      	beq.n	8000ba2 <__aeabi_ui2f+0x6a>
 8000bc0:	e7e5      	b.n	8000b8e <__aeabi_ui2f+0x56>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	fbffffff 	.word	0xfbffffff

08000bc8 <__clzsi2>:
 8000bc8:	211c      	movs	r1, #28
 8000bca:	2301      	movs	r3, #1
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d301      	bcc.n	8000bd6 <__clzsi2+0xe>
 8000bd2:	0c00      	lsrs	r0, r0, #16
 8000bd4:	3910      	subs	r1, #16
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	d301      	bcc.n	8000be0 <__clzsi2+0x18>
 8000bdc:	0a00      	lsrs	r0, r0, #8
 8000bde:	3908      	subs	r1, #8
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d301      	bcc.n	8000bea <__clzsi2+0x22>
 8000be6:	0900      	lsrs	r0, r0, #4
 8000be8:	3904      	subs	r1, #4
 8000bea:	a202      	add	r2, pc, #8	; (adr r2, 8000bf4 <__clzsi2+0x2c>)
 8000bec:	5c10      	ldrb	r0, [r2, r0]
 8000bee:	1840      	adds	r0, r0, r1
 8000bf0:	4770      	bx	lr
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	02020304 	.word	0x02020304
 8000bf8:	01010101 	.word	0x01010101
	...

08000c04 <__clzdi2>:
 8000c04:	b510      	push	{r4, lr}
 8000c06:	2900      	cmp	r1, #0
 8000c08:	d103      	bne.n	8000c12 <__clzdi2+0xe>
 8000c0a:	f7ff ffdd 	bl	8000bc8 <__clzsi2>
 8000c0e:	3020      	adds	r0, #32
 8000c10:	e002      	b.n	8000c18 <__clzdi2+0x14>
 8000c12:	0008      	movs	r0, r1
 8000c14:	f7ff ffd8 	bl	8000bc8 <__clzsi2>
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <MX_GPIO_Init>:

/** Configure pins
     PB3   ------> TSC_G5_IO1
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	240c      	movs	r4, #12
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0018      	movs	r0, r3
 8000c28:	2314      	movs	r3, #20
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f003 fd61 	bl	80046f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c36:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c38:	2104      	movs	r1, #4
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	2204      	movs	r2, #4
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c66:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c68:	2102      	movs	r1, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_GPIO_Init+0xfc>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	2202      	movs	r2, #2
 8000c74:	4013      	ands	r3, r2
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_Btn_GPIO_Port, USER_Btn_Pin, GPIO_PIN_RESET);
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	4827      	ldr	r0, [pc, #156]	; (8000d1c <MX_GPIO_Init+0x100>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	0019      	movs	r1, r3
 8000c84:	f000 fedc 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c88:	23a0      	movs	r3, #160	; 0xa0
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fed5 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0192      	lsls	r2, r2, #6
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <MX_GPIO_Init+0x100>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fd44 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	193a      	adds	r2, r7, r4
 8000cd6:	23a0      	movs	r3, #160	; 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fd31 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2202      	movs	r2, #2
 8000cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <MX_GPIO_Init+0x104>)
 8000d06:	0019      	movs	r1, r3
 8000d08:	0010      	movs	r0, r2
 8000d0a:	f000 fd1b 	bl	8001744 <HAL_GPIO_Init>

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b009      	add	sp, #36	; 0x24
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	50000800 	.word	0x50000800
 8000d20:	50000400 	.word	0x50000400

08000d24 <__led_pwm_start>:
  * @brief Starts LED's Timer PWM channel
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void __led_pwm_start(const LED_PWM_Handle_TypeDef* hled)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(hled->Timer, hled->Channel);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f001 febe 	bl	8002ab8 <HAL_TIM_PWM_Start>
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <__led_pwm_write>:
  * @param[in] hled   : LED PWM handler
  * @retval PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void __led_pwm_write(LED_PWM_Handle_TypeDef* hled, float duty)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  hled->Duty = duty;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	609a      	str	r2, [r3, #8]
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hled->Timer)+1)) / 100;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff feea 	bl	8000b38 <__aeabi_ui2f>
 8000d64:	1c03      	adds	r3, r0, #0
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	1c18      	adds	r0, r3, #0
 8000d6a:	f7ff fd77 	bl	800085c <__aeabi_fmul>
 8000d6e:	1c03      	adds	r3, r0, #0
 8000d70:	4918      	ldr	r1, [pc, #96]	; (8000dd4 <__led_pwm_write+0x90>)
 8000d72:	1c18      	adds	r0, r3, #0
 8000d74:	f7ff fba8 	bl	80004c8 <__aeabi_fdiv>
 8000d78:	1c03      	adds	r3, r0, #0
 8000d7a:	1c18      	adds	r0, r3, #0
 8000d7c:	f7ff febc 	bl	8000af8 <__aeabi_f2iz>
 8000d80:	0003      	movs	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <__led_pwm_write+0x54>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d96:	e018      	b.n	8000dca <__led_pwm_write+0x86>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d105      	bne.n	8000dac <__led_pwm_write+0x68>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000daa:	e00e      	b.n	8000dca <__led_pwm_write+0x86>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d105      	bne.n	8000dc0 <__led_pwm_write+0x7c>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000dbe:	e004      	b.n	8000dca <__led_pwm_write+0x86>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	42c80000 	.word	0x42c80000

08000dd8 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  LED_PWM_WriteDuty(hled, 0.0f);
 8000de0:	2200      	movs	r2, #0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	1c11      	adds	r1, r2, #0
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f808 	bl	8000dfc <LED_PWM_WriteDuty>
  __led_pwm_start(hled);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff ff98 	bl	8000d24 <__led_pwm_start>
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  if(duty < 0.0f)
 8000e06:	2100      	movs	r1, #0
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f7ff fa1b 	bl	8000244 <__aeabi_fcmplt>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d002      	beq.n	8000e18 <LED_PWM_WriteDuty+0x1c>
    duty = 0.0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	e007      	b.n	8000e28 <LED_PWM_WriteDuty+0x2c>
  else if(duty > 100.0f)
 8000e18:	4908      	ldr	r1, [pc, #32]	; (8000e3c <LED_PWM_WriteDuty+0x40>)
 8000e1a:	6838      	ldr	r0, [r7, #0]
 8000e1c:	f7ff fa26 	bl	800026c <__aeabi_fcmpgt>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <LED_PWM_WriteDuty+0x2c>
    duty = 100.0f;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <LED_PWM_WriteDuty+0x40>)
 8000e26:	603b      	str	r3, [r7, #0]

  __led_pwm_write(hled, duty);
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1c11      	adds	r1, r2, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff ff88 	bl	8000d44 <__led_pwm_write>
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	42c80000 	.word	0x42c80000

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 faa8 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f82e 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f7ff fee6 	bl	8000c1c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e50:	f000 f8e6 	bl	8001020 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f9fa 	bl	800124c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim2);
   //_Bool LD1_State;
   //HAL_TIM_Base_Start_IT(&htim2);
   //HAL_UART_Receive_IT(&huart2, (uint8_t*)msg, TIM2_MSG_LEN);
  LED_PWM_Init(&hledr);
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <main+0x58>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ffbc 	bl	8000dd8 <LED_PWM_Init>
    LED_PWM_Init(&hledg);
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <main+0x5c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ffb8 	bl	8000dd8 <LED_PWM_Init>
    LED_PWM_Init(&hledb);
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <main+0x60>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ffb4 	bl	8000dd8 <LED_PWM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //cnt = ENC_GetCounter(&henc1);

	      LED_PWM_WriteDuty(&hledg, 0.0f);
 8000e70:	2200      	movs	r2, #0
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <main+0x5c>)
 8000e74:	1c11      	adds	r1, r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff ffc0 	bl	8000dfc <LED_PWM_WriteDuty>
	      LED_PWM_WriteDuty(&hledr, 0.0f);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <main+0x58>)
 8000e80:	1c11      	adds	r1, r2, #0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ffba 	bl	8000dfc <LED_PWM_WriteDuty>
	      LED_PWM_WriteDuty(&hledb, 100.0f);
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <main+0x64>)
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <main+0x60>)
 8000e8c:	1c11      	adds	r1, r2, #0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff ffb4 	bl	8000dfc <LED_PWM_WriteDuty>
	      LED_PWM_WriteDuty(&hledg, 0.0f);
 8000e94:	e7ec      	b.n	8000e70 <main+0x30>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	2000000c 	.word	0x2000000c
 8000ea0:	20000018 	.word	0x20000018
 8000ea4:	42c80000 	.word	0x42c80000

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b09f      	sub	sp, #124	; 0x7c
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	2440      	movs	r4, #64	; 0x40
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2338      	movs	r3, #56	; 0x38
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f003 fc1b 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebe:	232c      	movs	r3, #44	; 0x2c
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	2314      	movs	r3, #20
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f003 fc13 	bl	80046f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2328      	movs	r3, #40	; 0x28
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f003 fc0c 	bl	80046f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <SystemClock_Config+0xd4>)
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	0109      	lsls	r1, r1, #4
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000eee:	0021      	movs	r1, r4
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2201      	movs	r2, #1
 8000efa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	22a0      	movs	r2, #160	; 0xa0
 8000f06:	0212      	lsls	r2, r2, #8
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fdb2 	bl	8001a7c <HAL_RCC_OscConfig>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f1c:	f000 f830 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	212c      	movs	r1, #44	; 0x2c
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	220f      	movs	r2, #15
 8000f26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2100      	movs	r1, #0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 f96d 	bl	8002224 <HAL_RCC_ClockConfig>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f4e:	f000 f817 	bl	8000f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2202      	movs	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fb83 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f6a:	f000 f809 	bl	8000f80 <Error_Handler>
  }
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b01f      	add	sp, #124	; 0x7c
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	ffffe7ff 	.word	0xffffe7ff

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_MspInit+0x24>)
 8000f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_MspInit+0x24>)
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0549      	lsls	r1, r1, #21
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 fa32 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <TIM2_IRQHandler+0x14>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f001 fdf6 	bl	8002bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	2000004c 	.word	0x2000004c

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <USART2_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f002 fb66 	bl	80036d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	2000008c 	.word	0x2000008c

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	2318      	movs	r3, #24
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	0018      	movs	r0, r3
 800102c:	2310      	movs	r3, #16
 800102e:	001a      	movs	r2, r3
 8001030:	2100      	movs	r1, #0
 8001032:	f003 fb5f 	bl	80046f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001036:	2310      	movs	r3, #16
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	0018      	movs	r0, r3
 800103c:	2308      	movs	r3, #8
 800103e:	001a      	movs	r2, r3
 8001040:	2100      	movs	r1, #0
 8001042:	f003 fb57 	bl	80046f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	003b      	movs	r3, r7
 8001048:	0018      	movs	r0, r3
 800104a:	2310      	movs	r3, #16
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f003 fb50 	bl	80046f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_TIM2_Init+0x128>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	05d2      	lsls	r2, r2, #23
 800105a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <MX_TIM2_Init+0x128>)
 800105e:	2247      	movs	r2, #71	; 0x47
 8001060:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <MX_TIM2_Init+0x128>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MX_TIM2_Init+0x128>)
 800106a:	4a38      	ldr	r2, [pc, #224]	; (800114c <MX_TIM2_Init+0x12c>)
 800106c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_TIM2_Init+0x128>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MX_TIM2_Init+0x128>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <MX_TIM2_Init+0x128>)
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fc93 	bl	80029a8 <HAL_TIM_Base_Init>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001086:	f7ff ff7b 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108a:	2118      	movs	r1, #24
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0152      	lsls	r2, r2, #5
 8001092:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001094:	187a      	adds	r2, r7, r1
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <MX_TIM2_Init+0x128>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f001 ff4c 	bl	8002f38 <HAL_TIM_ConfigClockSource>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80010a4:	f7ff ff6c 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_TIM2_Init+0x128>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 fcbc 	bl	8002a28 <HAL_TIM_PWM_Init>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010b4:	f7ff ff64 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2110      	movs	r1, #16
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	187a      	adds	r2, r7, r1
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM2_Init+0x128>)
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f002 fa4f 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80010d6:	f7ff ff53 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010da:	003b      	movs	r3, r7
 80010dc:	2260      	movs	r2, #96	; 0x60
 80010de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010e0:	003b      	movs	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	003b      	movs	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ec:	003b      	movs	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	0039      	movs	r1, r7
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_TIM2_Init+0x128>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fe57 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001102:	f7ff ff3d 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8001106:	003b      	movs	r3, r7
 8001108:	22fa      	movs	r2, #250	; 0xfa
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110e:	0039      	movs	r1, r7
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_TIM2_Init+0x128>)
 8001112:	2204      	movs	r2, #4
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fe49 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800111e:	f7ff ff2f 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001122:	0039      	movs	r1, r7
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_TIM2_Init+0x128>)
 8001126:	2208      	movs	r2, #8
 8001128:	0018      	movs	r0, r3
 800112a:	f001 fe3f 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8001132:	f7ff ff25 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <MX_TIM2_Init+0x128>)
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f827 	bl	800118c <HAL_TIM_MspPostInit>

}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b00a      	add	sp, #40	; 0x28
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	2000004c 	.word	0x2000004c
 800114c:	000003e7 	.word	0x000003e7

08001150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	429a      	cmp	r2, r3
 8001162:	d10d      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_TIM_Base_MspInit+0x38>)
 8001166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_TIM_Base_MspInit+0x38>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	200f      	movs	r0, #15
 8001176:	f000 fa2b 	bl	80015d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117a:	200f      	movs	r0, #15
 800117c:	f000 fa3d 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b08b      	sub	sp, #44	; 0x2c
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	2414      	movs	r4, #20
 8001196:	193b      	adds	r3, r7, r4
 8001198:	0018      	movs	r0, r3
 800119a:	2314      	movs	r3, #20
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f003 faa8 	bl	80046f4 <memset>
  if(timHandle->Instance==TIM2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d144      	bne.n	800123a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011ce:	2102      	movs	r1, #2
 80011d0:	430a      	orrs	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_TIM_MspPostInit+0xb8>)
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2202      	movs	r2, #2
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2203      	movs	r2, #3
 80011e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2202      	movs	r2, #2
 80011ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	2202      	movs	r2, #2
 80011fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	193a      	adds	r2, r7, r4
 8001200:	23a0      	movs	r3, #160	; 0xa0
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fa9c 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800120c:	0021      	movs	r1, r4
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	00d2      	lsls	r2, r2, #3
 8001214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2202      	movs	r2, #2
 800121a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2202      	movs	r2, #2
 800122c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	187b      	adds	r3, r7, r1
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_TIM_MspPostInit+0xbc>)
 8001232:	0019      	movs	r1, r3
 8001234:	0010      	movs	r0, r2
 8001236:	f000 fa85 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b00b      	add	sp, #44	; 0x2c
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000
 8001248:	50000400 	.word	0x50000400

0800124c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <MX_USART2_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001258:	22e1      	movs	r2, #225	; 0xe1
 800125a:	0252      	lsls	r2, r2, #9
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001290:	0018      	movs	r0, r3
 8001292:	f002 f9cb 	bl	800362c <HAL_UART_Init>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f7ff fe71 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000008c 	.word	0x2000008c
 80012a8:	40004400 	.word	0x40004400

080012ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	240c      	movs	r4, #12
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	0018      	movs	r0, r3
 80012ba:	2314      	movs	r3, #20
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f003 fa18 	bl	80046f4 <memset>
  if(uartHandle->Instance==USART2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_UART_MspInit+0x90>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d131      	bne.n	8001332 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_UART_MspInit+0x94>)
 80012d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x94>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0289      	lsls	r1, r1, #10
 80012d8:	430a      	orrs	r2, r1
 80012da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_UART_MspInit+0x94>)
 80012de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_UART_MspInit+0x94>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	430a      	orrs	r2, r1
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0x94>)
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f4:	0021      	movs	r1, r4
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	220c      	movs	r2, #12
 80012fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2202      	movs	r2, #2
 8001300:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2203      	movs	r2, #3
 800130c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2204      	movs	r2, #4
 8001312:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	187a      	adds	r2, r7, r1
 8001316:	23a0      	movs	r3, #160	; 0xa0
 8001318:	05db      	lsls	r3, r3, #23
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f000 fa11 	bl	8001744 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f000 f952 	bl	80015d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f000 f964 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b009      	add	sp, #36	; 0x24
 8001338:	bd90      	pop	{r4, r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	40004400 	.word	0x40004400
 8001340:	40021000 	.word	0x40021000

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001346:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff fe64 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopForever+0xe>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001372:	f003 f9c7 	bl	8004704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fd63 	bl	8000e40 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
   ldr   r0, =_estack
 800137c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001388:	08004860 	.word	0x08004860
  ldr r2, =_sbss
 800138c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001390:	20000118 	.word	0x20000118

08001394 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_COMP_IRQHandler>
	...

08001398 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x3c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Init+0x3c>)
 80013aa:	2140      	movs	r1, #64	; 0x40
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f811 	bl	80013d8 <HAL_InitTick>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e001      	b.n	80013c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c2:	f7ff fde3 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_InitTick+0x5c>)
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_InitTick+0x60>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	0019      	movs	r1, r3
 80013ea:	23fa      	movs	r3, #250	; 0xfa
 80013ec:	0098      	lsls	r0, r3, #2
 80013ee:	f7fe fe8b 	bl	8000108 <__udivsi3>
 80013f2:	0003      	movs	r3, r0
 80013f4:	0019      	movs	r1, r3
 80013f6:	0020      	movs	r0, r4
 80013f8:	f7fe fe86 	bl	8000108 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 f90b 	bl	800161a <HAL_SYSTICK_Config>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00f      	b.n	800142c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d80b      	bhi.n	800142a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2301      	movs	r3, #1
 8001416:	425b      	negs	r3, r3
 8001418:	2200      	movs	r2, #0
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f8d8 	bl	80015d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_InitTick+0x64>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b003      	add	sp, #12
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	20000024 	.word	0x20000024
 8001438:	2000002c 	.word	0x2000002c
 800143c:	20000028 	.word	0x20000028

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x1c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x20>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	18d2      	adds	r2, r2, r3
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_IncTick+0x20>)
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	2000002c 	.word	0x2000002c
 8001460:	20000114 	.word	0x20000114

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <HAL_GetTick+0x10>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	20000114 	.word	0x20000114

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	0002      	movs	r2, r0
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	d809      	bhi.n	80014a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	231f      	movs	r3, #31
 8001494:	401a      	ands	r2, r3
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_EnableIRQ+0x30>)
 8001498:	2101      	movs	r1, #1
 800149a:	4091      	lsls	r1, r2
 800149c:	000a      	movs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
  }
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	0002      	movs	r2, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b7f      	cmp	r3, #127	; 0x7f
 80014c0:	d828      	bhi.n	8001514 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c2:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <__NVIC_SetPriority+0xd4>)
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	33c0      	adds	r3, #192	; 0xc0
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	589b      	ldr	r3, [r3, r2]
 80014d2:	1dfa      	adds	r2, r7, #7
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	0011      	movs	r1, r2
 80014d8:	2203      	movs	r2, #3
 80014da:	400a      	ands	r2, r1
 80014dc:	00d2      	lsls	r2, r2, #3
 80014de:	21ff      	movs	r1, #255	; 0xff
 80014e0:	4091      	lsls	r1, r2
 80014e2:	000a      	movs	r2, r1
 80014e4:	43d2      	mvns	r2, r2
 80014e6:	401a      	ands	r2, r3
 80014e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	401a      	ands	r2, r3
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	0018      	movs	r0, r3
 80014f8:	2303      	movs	r3, #3
 80014fa:	4003      	ands	r3, r0
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001500:	481f      	ldr	r0, [pc, #124]	; (8001580 <__NVIC_SetPriority+0xd4>)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	430a      	orrs	r2, r1
 800150c:	33c0      	adds	r3, #192	; 0xc0
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001512:	e031      	b.n	8001578 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <__NVIC_SetPriority+0xd8>)
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0019      	movs	r1, r3
 800151c:	230f      	movs	r3, #15
 800151e:	400b      	ands	r3, r1
 8001520:	3b08      	subs	r3, #8
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3306      	adds	r3, #6
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	3304      	adds	r3, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1dfa      	adds	r2, r7, #7
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	0011      	movs	r1, r2
 8001534:	2203      	movs	r2, #3
 8001536:	400a      	ands	r2, r1
 8001538:	00d2      	lsls	r2, r2, #3
 800153a:	21ff      	movs	r1, #255	; 0xff
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	43d2      	mvns	r2, r2
 8001542:	401a      	ands	r2, r3
 8001544:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	401a      	ands	r2, r3
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	0018      	movs	r0, r3
 8001554:	2303      	movs	r3, #3
 8001556:	4003      	ands	r3, r0
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <__NVIC_SetPriority+0xd8>)
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	001c      	movs	r4, r3
 8001564:	230f      	movs	r3, #15
 8001566:	4023      	ands	r3, r4
 8001568:	3b08      	subs	r3, #8
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	430a      	orrs	r2, r1
 800156e:	3306      	adds	r3, #6
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	18c3      	adds	r3, r0, r3
 8001574:	3304      	adds	r3, #4
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b003      	add	sp, #12
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	045b      	lsls	r3, r3, #17
 8001598:	429a      	cmp	r2, r3
 800159a:	d301      	bcc.n	80015a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159c:	2301      	movs	r3, #1
 800159e:	e010      	b.n	80015c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <SysTick_Config+0x44>)
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	3a01      	subs	r2, #1
 80015a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a8:	2301      	movs	r3, #1
 80015aa:	425b      	negs	r3, r3
 80015ac:	2103      	movs	r1, #3
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff7c 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x44>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	210f      	movs	r1, #15
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	1c02      	adds	r2, r0, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	0002      	movs	r2, r0
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff ff33 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ffaf 	bl	8001588 <SysTick_Config>
 800162a:	0003      	movs	r3, r0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	230f      	movs	r3, #15
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2225      	movs	r2, #37	; 0x25
 8001648:	5c9b      	ldrb	r3, [r3, r2]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2224      	movs	r2, #36	; 0x24
 800165a:	2100      	movs	r1, #0
 800165c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e024      	b.n	80016ac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	210e      	movs	r1, #14
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	438a      	bics	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	221c      	movs	r2, #28
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2101      	movs	r1, #1
 8001690:	4091      	lsls	r1, r2
 8001692:	000a      	movs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2225      	movs	r2, #37	; 0x25
 800169a:	2101      	movs	r1, #1
 800169c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2224      	movs	r2, #36	; 0x24
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

    return status;
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	210f      	movs	r1, #15
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2225      	movs	r2, #37	; 0x25
 80016c8:	5c9b      	ldrb	r3, [r3, r2]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d006      	beq.n	80016de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	e02a      	b.n	8001734 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	210e      	movs	r1, #14
 80016ea:	438a      	bics	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	221c      	movs	r2, #28
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2101      	movs	r1, #1
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2225      	movs	r2, #37	; 0x25
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2224      	movs	r2, #36	; 0x24
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	0010      	movs	r0, r2
 8001732:	4798      	blx	r3
    }
  }
  return status;
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800175a:	e155      	b.n	8001a08 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4091      	lsls	r1, r2
 8001766:	000a      	movs	r2, r1
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_Init+0x30>
 8001772:	e146      	b.n	8001a02 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2203      	movs	r2, #3
 800177a:	4013      	ands	r3, r2
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001788:	2b02      	cmp	r3, #2
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	409a      	lsls	r2, r3
 800179a:	0013      	movs	r3, r2
 800179c:	43da      	mvns	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	2201      	movs	r2, #1
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d017      	beq.n	800182a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2203      	movs	r2, #3
 8001830:	4013      	ands	r3, r2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	58d3      	ldr	r3, [r2, r3]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2207      	movs	r2, #7
 8001848:	4013      	ands	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2107      	movs	r1, #7
 8001862:	400b      	ands	r3, r1
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	401a      	ands	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <HAL_GPIO_Init+0x17c>
 80018be:	e0a0      	b.n	8001a02 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018cc:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <HAL_GPIO_Init+0x2e0>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	589b      	ldr	r3, [r3, r2]
 80018d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2203      	movs	r2, #3
 80018de:	4013      	ands	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	409a      	lsls	r2, r3
 80018e6:	0013      	movs	r3, r2
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	23a0      	movs	r3, #160	; 0xa0
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x1f6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x2e4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x1f2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_GPIO_Init+0x2e8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x1ee>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x2ec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x1ea>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x1e6>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a46      	ldr	r2, [pc, #280]	; (8001a38 <HAL_GPIO_Init+0x2f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x1e2>
 8001922:	2305      	movs	r3, #5
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 8001926:	2306      	movs	r3, #6
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x1f8>
 800193a:	2300      	movs	r3, #0
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	2103      	movs	r1, #3
 8001940:	400a      	ands	r2, r1
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x2e0>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	035b      	lsls	r3, r3, #13
 8001972:	4013      	ands	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	039b      	lsls	r3, r3, #14
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43da      	mvns	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	4013      	ands	r3, r2
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	40da      	lsrs	r2, r3
 8001a10:	1e13      	subs	r3, r2, #0
 8001a12:	d000      	beq.n	8001a16 <HAL_GPIO_Init+0x2d2>
 8001a14:	e6a2      	b.n	800175c <HAL_GPIO_Init+0x18>
  }
}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b006      	add	sp, #24
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	50000400 	.word	0x50000400
 8001a2c:	50000800 	.word	0x50000800
 8001a30:	50000c00 	.word	0x50000c00
 8001a34:	50001000 	.word	0x50001000
 8001a38:	50001c00 	.word	0x50001c00
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	0008      	movs	r0, r1
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	1c0a      	adds	r2, r1, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	1c7b      	adds	r3, r7, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a6a:	1cbb      	adds	r3, r7, #2
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 fbbf 	bl	800220e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a90:	4bc9      	ldr	r3, [pc, #804]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9a:	4bc7      	ldr	r3, [pc, #796]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x36>
 8001ab0:	e07e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d007      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d112      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x68>
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4bbb      	ldr	r3, [pc, #748]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5a>
 8001ad4:	e06b      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d167      	bne.n	8001bae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 fb95 	bl	800220e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x84>
 8001af0:	4bb1      	ldr	r3, [pc, #708]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4bb0      	ldr	r3, [pc, #704]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0249      	lsls	r1, r1, #9
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e027      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	23a0      	movs	r3, #160	; 0xa0
 8001b06:	02db      	lsls	r3, r3, #11
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0xae>
 8001b0c:	4baa      	ldr	r3, [pc, #680]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4ba9      	ldr	r3, [pc, #676]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	02c9      	lsls	r1, r1, #11
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4ba7      	ldr	r3, [pc, #668]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4ba6      	ldr	r3, [pc, #664]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0249      	lsls	r1, r1, #9
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e012      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	4ba3      	ldr	r3, [pc, #652]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4ba2      	ldr	r3, [pc, #648]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b30:	49a2      	ldr	r1, [pc, #648]	; (8001dbc <HAL_RCC_OscConfig+0x340>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4ba0      	ldr	r3, [pc, #640]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4b9c      	ldr	r3, [pc, #624]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b9b      	ldr	r3, [pc, #620]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b4a:	499d      	ldr	r1, [pc, #628]	; (8001dc0 <HAL_RCC_OscConfig+0x344>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fc84 	bl	8001464 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b62:	f7ff fc7f 	bl	8001464 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d902      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f000 fb4c 	bl	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b76:	4b90      	ldr	r3, [pc, #576]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d0ef      	beq.n	8001b62 <HAL_RCC_OscConfig+0xe6>
 8001b82:	e015      	b.n	8001bb0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc6e 	bl	8001464 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fc69 	bl	8001464 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e336      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ba0:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x112>
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_RCC_OscConfig+0x140>
 8001bba:	e099      	b.n	8001cf0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	2220      	movs	r2, #32
 8001bda:	4393      	bics	r3, r2
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d13e      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d13b      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bf0:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCC_OscConfig+0x188>
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e304      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a6e      	ldr	r2, [pc, #440]	; (8001dc4 <HAL_RCC_OscConfig+0x348>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	021a      	lsls	r2, r3, #8
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2209      	movs	r2, #9
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2c:	f000 fc42 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8001c30:	0001      	movs	r1, r0
 8001c32:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	220f      	movs	r2, #15
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x34c>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	000a      	movs	r2, r1
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCC_OscConfig+0x350>)
 8001c46:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x354>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2513      	movs	r5, #19
 8001c4e:	197c      	adds	r4, r7, r5
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fbc1 	bl	80013d8 <HAL_InitTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c5a:	197b      	adds	r3, r7, r5
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d046      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001c62:	197b      	adds	r3, r7, r5
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	e2d2      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d027      	beq.n	8001cbe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2209      	movs	r2, #9
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fbf0 	bl	8001464 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fbeb 	bl	8001464 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e2b8      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d0f1      	beq.n	8001c8a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x348>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	021a      	lsls	r2, r3, #8
 8001cb6:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fbcb 	bl	8001464 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbc6 	bl	8001464 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e293      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f1      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x280>
 8001cfa:	e0a2      	b.n	8001e42 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d140      	bne.n	8001d84 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x29e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e279      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x358>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	0a19      	lsrs	r1, r3, #8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	061a      	lsls	r2, r3, #24
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	0b5b      	lsrs	r3, r3, #13
 8001d48:	3301      	adds	r3, #1
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	0212      	lsls	r2, r2, #8
 8001d4e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	210f      	movs	r1, #15
 8001d58:	400b      	ands	r3, r1
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x34c>)
 8001d5c:	5ccb      	ldrb	r3, [r1, r3]
 8001d5e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x350>)
 8001d62:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCC_OscConfig+0x354>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2513      	movs	r5, #19
 8001d6a:	197c      	adds	r4, r7, r5
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fb33 	bl	80013d8 <HAL_InitTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d76:	197b      	adds	r3, r7, r5
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d061      	beq.n	8001e42 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d7e:	197b      	adds	r3, r7, r5
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	e244      	b.n	800220e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d040      	beq.n	8001e0e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x33c>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0049      	lsls	r1, r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb63 	bl	8001464 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da2:	e019      	b.n	8001dd8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da4:	f7ff fb5e 	bl	8001464 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d912      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e22b      	b.n	800220e <HAL_RCC_OscConfig+0x792>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	fffeffff 	.word	0xfffeffff
 8001dc0:	fffbffff 	.word	0xfffbffff
 8001dc4:	ffffe0ff 	.word	0xffffe0ff
 8001dc8:	080047e4 	.word	0x080047e4
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	20000028 	.word	0x20000028
 8001dd4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dd8:	4bca      	ldr	r3, [pc, #808]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d0df      	beq.n	8001da4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de4:	4bc7      	ldr	r3, [pc, #796]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4ac7      	ldr	r2, [pc, #796]	; (8002108 <HAL_RCC_OscConfig+0x68c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df2:	4bc4      	ldr	r3, [pc, #784]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df8:	4bc2      	ldr	r3, [pc, #776]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	0a19      	lsrs	r1, r3, #8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	061a      	lsls	r2, r3, #24
 8001e06:	4bbf      	ldr	r3, [pc, #764]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	e019      	b.n	8001e42 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0e:	4bbd      	ldr	r3, [pc, #756]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4bbc      	ldr	r3, [pc, #752]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e14:	49bd      	ldr	r1, [pc, #756]	; (800210c <HAL_RCC_OscConfig+0x690>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fb23 	bl	8001464 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb1e 	bl	8001464 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1eb      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e36:	4bb3      	ldr	r3, [pc, #716]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2208      	movs	r2, #8
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d036      	beq.n	8001eba <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d019      	beq.n	8001e88 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e54:	4bab      	ldr	r3, [pc, #684]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e58:	4baa      	ldr	r3, [pc, #680]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fb00 	bl	8001464 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fafb 	bl	8001464 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1c8      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7c:	4ba1      	ldr	r3, [pc, #644]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f1      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3ee>
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b9e      	ldr	r3, [pc, #632]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	4b9d      	ldr	r3, [pc, #628]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	438a      	bics	r2, r1
 8001e92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fae6 	bl	8001464 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fae1 	bl	8001464 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1ae      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eb0:	4b94      	ldr	r3, [pc, #592]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f1      	bne.n	8001e9e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x44a>
 8001ec4:	e0ae      	b.n	8002024 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2023      	movs	r0, #35	; 0x23
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	055b      	lsls	r3, r3, #21
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b8a      	ldr	r3, [pc, #552]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0549      	lsls	r1, r1, #21
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ee8:	183b      	adds	r3, r7, r0
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d11a      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b85      	ldr	r3, [pc, #532]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0049      	lsls	r1, r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7ff faac 	bl	8001464 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7ff faa7 	bl	8001464 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e174      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b7a      	ldr	r3, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x694>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d0>
 8001f3c:	4b71      	ldr	r3, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0049      	lsls	r1, r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	651a      	str	r2, [r3, #80]	; 0x50
 8001f4a:	e031      	b.n	8001fb0 <HAL_RCC_OscConfig+0x534>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4f2>
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f5a:	496c      	ldr	r1, [pc, #432]	; (800210c <HAL_RCC_OscConfig+0x690>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f66:	496b      	ldr	r1, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x698>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_OscConfig+0x534>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	23a0      	movs	r3, #160	; 0xa0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d10e      	bne.n	8001f98 <HAL_RCC_OscConfig+0x51c>
 8001f7a:	4b62      	ldr	r3, [pc, #392]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7e:	4b61      	ldr	r3, [pc, #388]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	00c9      	lsls	r1, r1, #3
 8001f84:	430a      	orrs	r2, r1
 8001f86:	651a      	str	r2, [r3, #80]	; 0x50
 8001f88:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x534>
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001f9e:	495b      	ldr	r1, [pc, #364]	; (800210c <HAL_RCC_OscConfig+0x690>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	651a      	str	r2, [r3, #80]	; 0x50
 8001fa4:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001faa:	495a      	ldr	r1, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x698>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fa54 	bl	8001464 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fa4f 	bl	8001464 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0x69c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e11b      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fd6:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8001fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d0ef      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x546>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fa3e 	bl	8001464 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fa39 	bl	8001464 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a47      	ldr	r2, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x69c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e105      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002002:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8002004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800200e:	2323      	movs	r3, #35	; 0x23
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 800201a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 800201e:	493f      	ldr	r1, [pc, #252]	; (800211c <HAL_RCC_OscConfig+0x6a0>)
 8002020:	400a      	ands	r2, r1
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	4013      	ands	r3, r2
 800202c:	d049      	beq.n	80020c2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d026      	beq.n	8002084 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002036:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8002044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002046:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x6a4>)
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x6a4>)
 8002054:	2180      	movs	r1, #128	; 0x80
 8002056:	0189      	lsls	r1, r1, #6
 8002058:	430a      	orrs	r2, r1
 800205a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fa02 	bl	8001464 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7ff f9fd 	bl	8001464 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ca      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d0f1      	beq.n	8002066 <HAL_RCC_OscConfig+0x5ea>
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCC_OscConfig+0x6a4>)
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x6a4>)
 8002096:	4923      	ldr	r1, [pc, #140]	; (8002124 <HAL_RCC_OscConfig+0x6a8>)
 8002098:	400a      	ands	r2, r1
 800209a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f9e2 	bl	8001464 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a6:	f7ff f9dd 	bl	8001464 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0aa      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d1f1      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_RCC_OscConfig+0x650>
 80020ca:	e09f      	b.n	800220c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d100      	bne.n	80020d4 <HAL_RCC_OscConfig+0x658>
 80020d2:	e078      	b.n	80021c6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d159      	bne.n	8002190 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x688>)
 80020e2:	4911      	ldr	r1, [pc, #68]	; (8002128 <HAL_RCC_OscConfig+0x6ac>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f9bc 	bl	8001464 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f9b7 	bl	8001464 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d915      	bls.n	800212c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e084      	b.n	800220e <HAL_RCC_OscConfig+0x792>
 8002104:	40021000 	.word	0x40021000
 8002108:	ffff1fff 	.word	0xffff1fff
 800210c:	fffffeff 	.word	0xfffffeff
 8002110:	40007000 	.word	0x40007000
 8002114:	fffffbff 	.word	0xfffffbff
 8002118:	00001388 	.word	0x00001388
 800211c:	efffffff 	.word	0xefffffff
 8002120:	40010000 	.word	0x40010000
 8002124:	ffffdfff 	.word	0xffffdfff
 8002128:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	049b      	lsls	r3, r3, #18
 8002134:	4013      	ands	r3, r2
 8002136:	d1dc      	bne.n	80020f2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a37      	ldr	r2, [pc, #220]	; (800221c <HAL_RCC_OscConfig+0x7a0>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002150:	431a      	orrs	r2, r3
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 8002154:	430a      	orrs	r2, r1
 8002156:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	0449      	lsls	r1, r1, #17
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff f97d 	bl	8001464 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f978 	bl	8001464 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e045      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	049b      	lsls	r3, r3, #18
 800218a:	4013      	ands	r3, r2
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x6f4>
 800218e:	e03d      	b.n	800220c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_OscConfig+0x7a4>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff f962 	bl	8001464 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff f95d 	bl	8001464 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e02a      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	049b      	lsls	r3, r3, #18
 80021c0:	4013      	ands	r3, r2
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x72a>
 80021c4:	e022      	b.n	800220c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01d      	b.n	800220e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x79c>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10f      	bne.n	8002208 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	23f0      	movs	r3, #240	; 0xf0
 80021ec:	039b      	lsls	r3, r3, #14
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	401a      	ands	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b00a      	add	sp, #40	; 0x28
 8002214:	bdb0      	pop	{r4, r5, r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	40021000 	.word	0x40021000
 800221c:	ff02ffff 	.word	0xff02ffff
 8002220:	feffffff 	.word	0xfeffffff

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e128      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b96      	ldr	r3, [pc, #600]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d91e      	bls.n	8002284 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b93      	ldr	r3, [pc, #588]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b90      	ldr	r3, [pc, #576]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002258:	f7ff f904 	bl	8001464 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002260:	e009      	b.n	8002276 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002262:	f7ff f8ff 	bl	8001464 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	4a8a      	ldr	r2, [pc, #552]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e109      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b87      	ldr	r3, [pc, #540]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228e:	4b83      	ldr	r3, [pc, #524]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	22f0      	movs	r2, #240	; 0xf0
 8002294:	4393      	bics	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b7f      	ldr	r3, [pc, #508]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_RCC_ClockConfig+0x8a>
 80022ac:	e089      	b.n	80023c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022b6:	4b79      	ldr	r3, [pc, #484]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	4013      	ands	r3, r2
 80022c0:	d120      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0e1      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ce:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	049b      	lsls	r3, r3, #18
 80022d6:	4013      	ands	r3, r2
 80022d8:	d114      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0d5      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0ca      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022f4:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0c2      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b65      	ldr	r3, [pc, #404]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2203      	movs	r2, #3
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b62      	ldr	r3, [pc, #392]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002314:	430a      	orrs	r2, r1
 8002316:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff f8a4 	bl	8001464 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d111      	bne.n	800234c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	e009      	b.n	800233e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7ff f89b 	bl	8001464 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0a5      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	220c      	movs	r2, #12
 8002344:	4013      	ands	r3, r2
 8002346:	2b08      	cmp	r3, #8
 8002348:	d1ef      	bne.n	800232a <HAL_RCC_ClockConfig+0x106>
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d111      	bne.n	8002378 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	e009      	b.n	800236a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7ff f885 	bl	8001464 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e08f      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	220c      	movs	r2, #12
 8002370:	4013      	ands	r3, r2
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_ClockConfig+0x132>
 8002376:	e024      	b.n	80023c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d11b      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002380:	e009      	b.n	8002396 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002382:	f7ff f86f 	bl	8001464 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4a42      	ldr	r2, [pc, #264]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e079      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	220c      	movs	r2, #12
 800239c:	4013      	ands	r3, r2
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d1ef      	bne.n	8002382 <HAL_RCC_ClockConfig+0x15e>
 80023a2:	e00e      	b.n	80023c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff f85e 	bl	8001464 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e068      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	220c      	movs	r2, #12
 80023be:	4013      	ands	r3, r2
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d21e      	bcs.n	800240e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4393      	bics	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e2:	f7ff f83f 	bl	8001464 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	e009      	b.n	8002400 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff f83a 	bl	8001464 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_RCC_ClockConfig+0x274>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e044      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_ClockConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	4013      	ands	r3, r2
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d1ee      	bne.n	80023ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x27c>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2208      	movs	r2, #8
 8002432:	4013      	ands	r3, r2
 8002434:	d00a      	beq.n	800244c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_RCC_ClockConfig+0x280>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00da      	lsls	r2, r3, #3
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002448:	430a      	orrs	r2, r1
 800244a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244c:	f000 f832 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002450:	0001      	movs	r1, r0
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	220f      	movs	r2, #15
 800245a:	4013      	ands	r3, r2
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x284>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	000a      	movs	r2, r1
 8002462:	40da      	lsrs	r2, r3
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_RCC_ClockConfig+0x288>)
 8002466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_ClockConfig+0x28c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	250b      	movs	r5, #11
 800246e:	197c      	adds	r4, r7, r5
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe ffb1 	bl	80013d8 <HAL_InitTick>
 8002476:	0003      	movs	r3, r0
 8002478:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800247a:	197b      	adds	r3, r7, r5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002482:	197b      	adds	r3, r7, r5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	e000      	b.n	800248a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	40022000 	.word	0x40022000
 8002498:	00001388 	.word	0x00001388
 800249c:	40021000 	.word	0x40021000
 80024a0:	fffff8ff 	.word	0xfffff8ff
 80024a4:	ffffc7ff 	.word	0xffffc7ff
 80024a8:	080047e4 	.word	0x080047e4
 80024ac:	20000024 	.word	0x20000024
 80024b0:	20000028 	.word	0x20000028

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_GetSysClockFreq+0x138>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c2:	230c      	movs	r3, #12
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d014      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x40>
 80024ca:	d900      	bls.n	80024ce <HAL_RCC_GetSysClockFreq+0x1a>
 80024cc:	e07b      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x112>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x24>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x3a>
 80024d6:	e076      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024d8:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_RCC_GetSysClockFreq+0x138>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	4013      	ands	r3, r2
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024e6:	e07c      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ec:	e079      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024f2:	e076      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	0c9a      	lsrs	r2, r3, #18
 80024f8:	230f      	movs	r3, #15
 80024fa:	401a      	ands	r2, r3
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_GetSysClockFreq+0x148>)
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	0d9a      	lsrs	r2, r3, #22
 8002506:	2303      	movs	r3, #3
 8002508:	4013      	ands	r3, r2
 800250a:	3301      	adds	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	4013      	ands	r3, r2
 8002518:	d01a      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002524:	2300      	movs	r3, #0
 8002526:	69b8      	ldr	r0, [r7, #24]
 8002528:	69f9      	ldr	r1, [r7, #28]
 800252a:	f7fd fed3 	bl	80002d4 <__aeabi_lmul>
 800252e:	0002      	movs	r2, r0
 8002530:	000b      	movs	r3, r1
 8002532:	0010      	movs	r0, r2
 8002534:	0019      	movs	r1, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f7fd fea7 	bl	8000294 <__aeabi_uldivmod>
 8002546:	0002      	movs	r2, r0
 8002548:	000b      	movs	r3, r1
 800254a:	0013      	movs	r3, r2
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
 800254e:	e037      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d01a      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002564:	2300      	movs	r3, #0
 8002566:	68b8      	ldr	r0, [r7, #8]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	f7fd feb3 	bl	80002d4 <__aeabi_lmul>
 800256e:	0002      	movs	r2, r0
 8002570:	000b      	movs	r3, r1
 8002572:	0010      	movs	r0, r2
 8002574:	0019      	movs	r1, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f7fd fe87 	bl	8000294 <__aeabi_uldivmod>
 8002586:	0002      	movs	r2, r0
 8002588:	000b      	movs	r3, r1
 800258a:	0013      	movs	r3, r2
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
 800258e:	e017      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	0018      	movs	r0, r3
 8002594:	2300      	movs	r3, #0
 8002596:	0019      	movs	r1, r3
 8002598:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800259a:	2300      	movs	r3, #0
 800259c:	f7fd fe9a 	bl	80002d4 <__aeabi_lmul>
 80025a0:	0002      	movs	r2, r0
 80025a2:	000b      	movs	r3, r1
 80025a4:	0010      	movs	r0, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	001c      	movs	r4, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	001d      	movs	r5, r3
 80025b0:	0022      	movs	r2, r4
 80025b2:	002b      	movs	r3, r5
 80025b4:	f7fd fe6e 	bl	8000294 <__aeabi_uldivmod>
 80025b8:	0002      	movs	r2, r0
 80025ba:	000b      	movs	r3, r1
 80025bc:	0013      	movs	r3, r2
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025c4:	e00d      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_GetSysClockFreq+0x138>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	3301      	adds	r3, #1
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	0212      	lsls	r2, r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b00e      	add	sp, #56	; 0x38
 80025ea:	bdb0      	pop	{r4, r5, r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	003d0900 	.word	0x003d0900
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	080047fc 	.word	0x080047fc

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <HAL_RCC_GetHCLKFreq+0x10>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000024 	.word	0x20000024

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002618:	f7ff fff2 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800261c:	0001      	movs	r1, r0
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	2207      	movs	r2, #7
 8002626:	4013      	ands	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_RCC_GetPCLK1Freq+0x28>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	40d9      	lsrs	r1, r3
 800262e:	000b      	movs	r3, r1
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	40021000 	.word	0x40021000
 800263c:	080047f4 	.word	0x080047f4

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	0001      	movs	r1, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	0adb      	lsrs	r3, r3, #11
 8002650:	2207      	movs	r2, #7
 8002652:	4013      	ands	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	40d9      	lsrs	r1, r3
 800265a:	000b      	movs	r3, r1
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40021000 	.word	0x40021000
 8002668:	080047f4 	.word	0x080047f4

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002674:	2317      	movs	r3, #23
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2220      	movs	r2, #32
 8002682:	4013      	ands	r3, r2
 8002684:	d106      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d100      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002692:	e104      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002694:	4bb9      	ldr	r3, [pc, #740]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	d10a      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4bb6      	ldr	r3, [pc, #728]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a4:	4bb5      	ldr	r3, [pc, #724]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	0549      	lsls	r1, r1, #21
 80026aa:	430a      	orrs	r2, r1
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026ae:	2317      	movs	r3, #23
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4bb2      	ldr	r3, [pc, #712]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	d11a      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4baf      	ldr	r3, [pc, #700]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4bae      	ldr	r3, [pc, #696]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	0049      	lsls	r1, r1, #1
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fec8 	bl	8001464 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fec3 	bl	8001464 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	; 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e143      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4ba4      	ldr	r3, [pc, #656]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4013      	ands	r3, r2
 80026f6:	d0f0      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026f8:	4ba0      	ldr	r3, [pc, #640]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	23c0      	movs	r3, #192	; 0xc0
 80026fe:	039b      	lsls	r3, r3, #14
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	23c0      	movs	r3, #192	; 0xc0
 800271a:	039b      	lsls	r3, r3, #14
 800271c:	4013      	ands	r3, r2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d013      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	23c0      	movs	r3, #192	; 0xc0
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	401a      	ands	r2, r3
 800272e:	23c0      	movs	r3, #192	; 0xc0
 8002730:	029b      	lsls	r3, r3, #10
 8002732:	429a      	cmp	r2, r3
 8002734:	d10a      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002736:	4b91      	ldr	r3, [pc, #580]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	029b      	lsls	r3, r3, #10
 800273e:	401a      	ands	r2, r3
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e113      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800274c:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800274e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d049      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	23c0      	movs	r3, #192	; 0xc0
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	4013      	ands	r3, r2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	429a      	cmp	r2, r3
 800276c:	d004      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	4013      	ands	r3, r2
 8002776:	d10d      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d034      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d02e      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002794:	4b79      	ldr	r3, [pc, #484]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800279e:	4b77      	ldr	r3, [pc, #476]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027a2:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0309      	lsls	r1, r1, #12
 80027a8:	430a      	orrs	r2, r1
 80027aa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ac:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b0:	4b72      	ldr	r3, [pc, #456]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027b2:	4975      	ldr	r1, [pc, #468]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027b8:	4b70      	ldr	r3, [pc, #448]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d014      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fe4c 	bl	8001464 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d0:	e009      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fe47 	bl	8001464 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a6b      	ldr	r2, [pc, #428]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0c6      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0ef      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4013      	ands	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	23c0      	movs	r3, #192	; 0xc0
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	401a      	ands	r2, r3
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	429a      	cmp	r2, r3
 800280e:	d10c      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002810:	4b5a      	ldr	r3, [pc, #360]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5e      	ldr	r2, [pc, #376]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	039b      	lsls	r3, r3, #14
 8002822:	401a      	ands	r2, r3
 8002824:	4b55      	ldr	r3, [pc, #340]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800282c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	029b      	lsls	r3, r3, #10
 8002836:	401a      	ands	r2, r3
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800283a:	430a      	orrs	r2, r1
 800283c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	d01f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	401a      	ands	r2, r3
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	429a      	cmp	r2, r3
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800285a:	4b48      	ldr	r3, [pc, #288]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	039b      	lsls	r3, r3, #14
 800286c:	401a      	ands	r2, r3
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002876:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	401a      	ands	r2, r3
 8002882:	4b3e      	ldr	r3, [pc, #248]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002884:	430a      	orrs	r2, r1
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002888:	2317      	movs	r3, #23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002898:	493e      	ldr	r1, [pc, #248]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800289a:	400a      	ands	r2, r1
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a8:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	2203      	movs	r2, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	220c      	movs	r2, #12
 80028cc:	4393      	bics	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2208      	movs	r2, #8
 80028fe:	4013      	ands	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002912:	430a      	orrs	r2, r1
 8002914:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002928:	4013      	ands	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002932:	430a      	orrs	r2, r1
 8002934:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	4013      	ands	r3, r2
 800293e:	d009      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002950:	430a      	orrs	r2, r1
 8002952:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	4013      	ands	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800296e:	430a      	orrs	r2, r1
 8002970:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b006      	add	sp, #24
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	40007000 	.word	0x40007000
 8002984:	fffcffff 	.word	0xfffcffff
 8002988:	fff7ffff 	.word	0xfff7ffff
 800298c:	00001388 	.word	0x00001388
 8002990:	ffcfffff 	.word	0xffcfffff
 8002994:	efffffff 	.word	0xefffffff
 8002998:	fffff3ff 	.word	0xfffff3ff
 800299c:	ffffcfff 	.word	0xffffcfff
 80029a0:	fbffffff 	.word	0xfbffffff
 80029a4:	fff3ffff 	.word	0xfff3ffff

080029a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e032      	b.n	8002a20 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2239      	movs	r2, #57	; 0x39
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2238      	movs	r2, #56	; 0x38
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe fbbd 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2239      	movs	r2, #57	; 0x39
 80029da:	2102      	movs	r1, #2
 80029dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	0019      	movs	r1, r3
 80029e8:	0010      	movs	r0, r2
 80029ea:	f000 fba1 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	223e      	movs	r2, #62	; 0x3e
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223a      	movs	r2, #58	; 0x3a
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223b      	movs	r2, #59	; 0x3b
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223c      	movs	r2, #60	; 0x3c
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223d      	movs	r2, #61	; 0x3d
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2239      	movs	r2, #57	; 0x39
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e032      	b.n	8002aa0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2239      	movs	r2, #57	; 0x39
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2238      	movs	r2, #56	; 0x38
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f829 	bl	8002aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2239      	movs	r2, #57	; 0x39
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f000 fb61 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223e      	movs	r2, #62	; 0x3e
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223a      	movs	r2, #58	; 0x3a
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223b      	movs	r2, #59	; 0x3b
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223c      	movs	r2, #60	; 0x3c
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223d      	movs	r2, #61	; 0x3d
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2239      	movs	r2, #57	; 0x39
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <HAL_TIM_PWM_Start+0x22>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	223a      	movs	r2, #58	; 0x3a
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	4193      	sbcs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e01f      	b.n	8002b1a <HAL_TIM_PWM_Start+0x62>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d108      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x3a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	223b      	movs	r2, #59	; 0x3b
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	4193      	sbcs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e013      	b.n	8002b1a <HAL_TIM_PWM_Start+0x62>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d108      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x52>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	223c      	movs	r2, #60	; 0x3c
 8002afc:	5c9b      	ldrb	r3, [r3, r2]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	4193      	sbcs	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e007      	b.n	8002b1a <HAL_TIM_PWM_Start+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223d      	movs	r2, #61	; 0x3d
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	4193      	sbcs	r3, r2
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e052      	b.n	8002bc8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_PWM_Start+0x7a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	223a      	movs	r2, #58	; 0x3a
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	5499      	strb	r1, [r3, r2]
 8002b30:	e013      	b.n	8002b5a <HAL_TIM_PWM_Start+0xa2>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x8a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	223b      	movs	r2, #59	; 0x3b
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	5499      	strb	r1, [r3, r2]
 8002b40:	e00b      	b.n	8002b5a <HAL_TIM_PWM_Start+0xa2>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start+0x9a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	223c      	movs	r2, #60	; 0x3c
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	5499      	strb	r1, [r3, r2]
 8002b50:	e003      	b.n	8002b5a <HAL_TIM_PWM_Start+0xa2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	223d      	movs	r2, #61	; 0x3d
 8002b56:	2102      	movs	r1, #2
 8002b58:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fce0 	bl	8003528 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	05db      	lsls	r3, r3, #23
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d00e      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xda>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_TIM_PWM_Start+0x118>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xda>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIM_PWM_Start+0x11c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xda>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIM_PWM_Start+0x120>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d111      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d010      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e007      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40011400 	.word	0x40011400

08002bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d124      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d11d      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2203      	movs	r2, #3
 8002c06:	4252      	negs	r2, r2
 8002c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2203      	movs	r2, #3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fa6e 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e007      	b.n	8002c36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fa61 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fa6d 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2204      	movs	r2, #4
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d125      	bne.n	8002c96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2204      	movs	r2, #4
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11e      	bne.n	8002c96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	4252      	negs	r2, r2
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	23c0      	movs	r3, #192	; 0xc0
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4013      	ands	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fa41 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002c7e:	e007      	b.n	8002c90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 fa34 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 fa40 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d124      	bne.n	8002cee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2208      	movs	r2, #8
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11d      	bne.n	8002cee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2209      	movs	r2, #9
 8002cb8:	4252      	negs	r2, r2
 8002cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 fa15 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002cd6:	e007      	b.n	8002ce8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fa08 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fa14 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d125      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2210      	movs	r2, #16
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d11e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2211      	movs	r2, #17
 8002d10:	4252      	negs	r2, r2
 8002d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2208      	movs	r2, #8
 8002d18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	23c0      	movs	r3, #192	; 0xc0
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f9e8 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f9db 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f9e7 	bl	8003110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10f      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4252      	negs	r2, r2
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 f9b5 	bl	80030e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2240      	movs	r2, #64	; 0x40
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d10f      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d108      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	4252      	negs	r2, r2
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f9be 	bl	8003120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db8:	2317      	movs	r3, #23
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2238      	movs	r2, #56	; 0x38
 8002dc4:	5c9b      	ldrb	r3, [r3, r2]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_PWM_ConfigChannel+0x22>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0ad      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2238      	movs	r2, #56	; 0x38
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d100      	bne.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ddc:	e076      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x120>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d900      	bls.n	8002de6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002de4:	e095      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d04e      	beq.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d900      	bls.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002df2:	e08e      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d021      	beq.n	8002e44 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e00:	e087      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	0011      	movs	r1, r2
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f9ee 	bl	80031ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	619a      	str	r2, [r3, #24]
      break;
 8002e42:	e06b      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 fa09 	bl	8003264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	0109      	lsls	r1, r1, #4
 8002e60:	430a      	orrs	r2, r1
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4931      	ldr	r1, [pc, #196]	; (8002f34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      break;
 8002e88:	e048      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	0011      	movs	r1, r2
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fa28 	bl	80032e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69d9      	ldr	r1, [r3, #28]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	61da      	str	r2, [r3, #28]
      break;
 8002eca:	e027      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	0011      	movs	r1, r2
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 fa47 	bl	8003368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0109      	lsls	r1, r1, #4
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	490f      	ldr	r1, [pc, #60]	; (8002f34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69d9      	ldr	r1, [r3, #28]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	61da      	str	r2, [r3, #28]
      break;
 8002f10:	e004      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f12:	2317      	movs	r3, #23
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
      break;
 8002f1a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2238      	movs	r2, #56	; 0x38
 8002f20:	2100      	movs	r1, #0
 8002f22:	5499      	strb	r1, [r3, r2]

  return status;
 8002f24:	2317      	movs	r3, #23
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	781b      	ldrb	r3, [r3, #0]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b006      	add	sp, #24
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	fffffbff 	.word	0xfffffbff

08002f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	230f      	movs	r3, #15
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2238      	movs	r2, #56	; 0x38
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0bc      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x19a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2238      	movs	r2, #56	; 0x38
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2239      	movs	r2, #57	; 0x39
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2277      	movs	r2, #119	; 0x77
 8002f74:	4393      	bics	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	0192      	lsls	r2, r2, #6
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xde>
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0192      	lsls	r2, r2, #6
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d900      	bls.n	8002f9e <HAL_TIM_ConfigClockSource+0x66>
 8002f9c:	e088      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	0152      	lsls	r2, r2, #5
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d100      	bne.n	8002fa8 <HAL_TIM_ConfigClockSource+0x70>
 8002fa6:	e088      	b.n	80030ba <HAL_TIM_ConfigClockSource+0x182>
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	0152      	lsls	r2, r2, #5
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d900      	bls.n	8002fb2 <HAL_TIM_ConfigClockSource+0x7a>
 8002fb0:	e07e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fb2:	2b70      	cmp	r3, #112	; 0x70
 8002fb4:	d018      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0xb0>
 8002fb6:	d900      	bls.n	8002fba <HAL_TIM_ConfigClockSource+0x82>
 8002fb8:	e07a      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fba:	2b60      	cmp	r3, #96	; 0x60
 8002fbc:	d04f      	beq.n	800305e <HAL_TIM_ConfigClockSource+0x126>
 8002fbe:	d900      	bls.n	8002fc2 <HAL_TIM_ConfigClockSource+0x8a>
 8002fc0:	e076      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fc2:	2b50      	cmp	r3, #80	; 0x50
 8002fc4:	d03b      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x106>
 8002fc6:	d900      	bls.n	8002fca <HAL_TIM_ConfigClockSource+0x92>
 8002fc8:	e072      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d057      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x146>
 8002fce:	d900      	bls.n	8002fd2 <HAL_TIM_ConfigClockSource+0x9a>
 8002fd0:	e06e      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d063      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fd6:	d86b      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d060      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fdc:	d868      	bhi.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d05d      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d05b      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x166>
 8002fe6:	e063      	b.n	80030b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ff8:	f000 fa76 	bl	80034e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2277      	movs	r2, #119	; 0x77
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
      break;
 8003014:	e052      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003026:	f000 fa5f 	bl	80034e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	01c9      	lsls	r1, r1, #7
 8003038:	430a      	orrs	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e03e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	001a      	movs	r2, r3
 800304c:	f000 f9d2 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2150      	movs	r1, #80	; 0x50
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fa2c 	bl	80034b4 <TIM_ITRx_SetConfig>
      break;
 800305c:	e02e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800306a:	001a      	movs	r2, r3
 800306c:	f000 f9f0 	bl	8003450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2160      	movs	r1, #96	; 0x60
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fa1c 	bl	80034b4 <TIM_ITRx_SetConfig>
      break;
 800307c:	e01e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	001a      	movs	r2, r3
 800308c:	f000 f9b2 	bl	80033f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	0018      	movs	r0, r3
 8003098:	f000 fa0c 	bl	80034b4 <TIM_ITRx_SetConfig>
      break;
 800309c:	e00e      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f000 fa03 	bl	80034b4 <TIM_ITRx_SetConfig>
      break;
 80030ae:	e005      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2239      	movs	r2, #57	; 0x39
 80030c0:	2101      	movs	r1, #1
 80030c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2238      	movs	r2, #56	; 0x38
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

  return status;
 80030cc:	230f      	movs	r3, #15
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	ffff00ff 	.word	0xffff00ff

080030e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	429a      	cmp	r2, r3
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0x32>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <TIM_Base_SetConfig+0xac>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x32>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <TIM_Base_SetConfig+0xb0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x32>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <TIM_Base_SetConfig+0xb4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2270      	movs	r2, #112	; 0x70
 8003166:	4393      	bics	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	429a      	cmp	r2, r3
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x66>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <TIM_Base_SetConfig+0xac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x66>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <TIM_Base_SetConfig+0xb0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x66>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <TIM_Base_SetConfig+0xb4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <TIM_Base_SetConfig+0xb8>)
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	4393      	bics	r3, r2
 80031ae:	001a      	movs	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	615a      	str	r2, [r3, #20]
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b004      	add	sp, #16
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40010800 	.word	0x40010800
 80031e4:	40011400 	.word	0x40011400
 80031e8:	fffffcff 	.word	0xfffffcff

080031ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4393      	bics	r3, r2
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2270      	movs	r2, #112	; 0x70
 800321a:	4393      	bics	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2203      	movs	r2, #3
 8003222:	4393      	bics	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2202      	movs	r2, #2
 8003234:	4393      	bics	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	621a      	str	r2, [r3, #32]
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b006      	add	sp, #24
 8003262:	bd80      	pop	{r7, pc}

08003264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	2210      	movs	r2, #16
 8003274:	4393      	bics	r3, r2
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <TIM_OC2_SetConfig+0x7c>)
 8003292:	4013      	ands	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <TIM_OC2_SetConfig+0x80>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4393      	bics	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b006      	add	sp, #24
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	ffff8fff 	.word	0xffff8fff
 80032e4:	fffffcff 	.word	0xfffffcff

080032e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <TIM_OC3_SetConfig+0x78>)
 80032f8:	401a      	ands	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2270      	movs	r2, #112	; 0x70
 8003314:	4393      	bics	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2203      	movs	r2, #3
 800331c:	4393      	bics	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <TIM_OC3_SetConfig+0x7c>)
 800332e:	4013      	ands	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b006      	add	sp, #24
 800335e:	bd80      	pop	{r7, pc}
 8003360:	fffffeff 	.word	0xfffffeff
 8003364:	fffffdff 	.word	0xfffffdff

08003368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <TIM_OC4_SetConfig+0x7c>)
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <TIM_OC4_SetConfig+0x80>)
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <TIM_OC4_SetConfig+0x84>)
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <TIM_OC4_SetConfig+0x88>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b006      	add	sp, #24
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	ffffefff 	.word	0xffffefff
 80033e8:	ffff8fff 	.word	0xffff8fff
 80033ec:	fffffcff 	.word	0xfffffcff
 80033f0:	ffffdfff 	.word	0xffffdfff

080033f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	2201      	movs	r2, #1
 800340c:	4393      	bics	r3, r2
 800340e:	001a      	movs	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	22f0      	movs	r2, #240	; 0xf0
 800341e:	4393      	bics	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	220a      	movs	r2, #10
 8003430:	4393      	bics	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b006      	add	sp, #24
 800344e:	bd80      	pop	{r7, pc}

08003450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	2210      	movs	r2, #16
 8003462:	4393      	bics	r3, r2
 8003464:	001a      	movs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <TIM_TI2_ConfigInputStage+0x60>)
 800347a:	4013      	ands	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	031b      	lsls	r3, r3, #12
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	22a0      	movs	r2, #160	; 0xa0
 800348c:	4393      	bics	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b006      	add	sp, #24
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	ffff0fff 	.word	0xffff0fff

080034b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2270      	movs	r2, #112	; 0x70
 80034c8:	4393      	bics	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	2207      	movs	r2, #7
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <TIM_ETR_SetConfig+0x3c>)
 8003500:	4013      	ands	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	021a      	lsls	r2, r3, #8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	431a      	orrs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b006      	add	sp, #24
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffff00ff 	.word	0xffff00ff

08003528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	221f      	movs	r2, #31
 8003538:	4013      	ands	r3, r2
 800353a:	2201      	movs	r2, #1
 800353c:	409a      	lsls	r2, r3
 800353e:	0013      	movs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	43d2      	mvns	r2, r2
 800354a:	401a      	ands	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	211f      	movs	r1, #31
 8003558:	400b      	ands	r3, r1
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4099      	lsls	r1, r3
 800355e:	000b      	movs	r3, r1
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2238      	movs	r2, #56	; 0x38
 800357e:	5c9b      	ldrb	r3, [r3, r2]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e047      	b.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2238      	movs	r2, #56	; 0x38
 800358c:	2101      	movs	r1, #1
 800358e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2239      	movs	r2, #57	; 0x39
 8003594:	2102      	movs	r1, #2
 8003596:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2270      	movs	r2, #112	; 0x70
 80035ac:	4393      	bics	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	05db      	lsls	r3, r3, #23
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d00e      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10c      	bne.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	4393      	bics	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2239      	movs	r2, #57	; 0x39
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2238      	movs	r2, #56	; 0x38
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b004      	add	sp, #16
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40000400 	.word	0x40000400
 8003624:	40010800 	.word	0x40010800
 8003628:	40011400 	.word	0x40011400

0800362c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e044      	b.n	80036c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d107      	bne.n	8003656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2278      	movs	r2, #120	; 0x78
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f7fd fe2b 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2224      	movs	r2, #36	; 0x24
 800365a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 fb2e 	bl	8003cd0 <UART_SetConfig>
 8003674:	0003      	movs	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e024      	b.n	80036c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 fdbf 	bl	800420c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	490d      	ldr	r1, [pc, #52]	; (80036d0 <HAL_UART_Init+0xa4>)
 800369a:	400a      	ands	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	212a      	movs	r1, #42	; 0x2a
 80036aa:	438a      	bics	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fe57 	bl	8004374 <UART_CheckIdleState>
 80036c6:	0003      	movs	r3, r0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	ffffb7ff 	.word	0xffffb7ff

080036d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b0ab      	sub	sp, #172	; 0xac
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	22a4      	movs	r2, #164	; 0xa4
 80036e4:	18b9      	adds	r1, r7, r2
 80036e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	20a0      	movs	r0, #160	; 0xa0
 80036f0:	1839      	adds	r1, r7, r0
 80036f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	219c      	movs	r1, #156	; 0x9c
 80036fc:	1879      	adds	r1, r7, r1
 80036fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003700:	0011      	movs	r1, r2
 8003702:	18bb      	adds	r3, r7, r2
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a99      	ldr	r2, [pc, #612]	; (800396c <HAL_UART_IRQHandler+0x298>)
 8003708:	4013      	ands	r3, r2
 800370a:	2298      	movs	r2, #152	; 0x98
 800370c:	18bc      	adds	r4, r7, r2
 800370e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003710:	18bb      	adds	r3, r7, r2
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d114      	bne.n	8003742 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003718:	187b      	adds	r3, r7, r1
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2220      	movs	r2, #32
 800371e:	4013      	ands	r3, r2
 8003720:	d00f      	beq.n	8003742 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003722:	183b      	adds	r3, r7, r0
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	4013      	ands	r3, r2
 800372a:	d00a      	beq.n	8003742 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003730:	2b00      	cmp	r3, #0
 8003732:	d100      	bne.n	8003736 <HAL_UART_IRQHandler+0x62>
 8003734:	e2a0      	b.n	8003c78 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	0010      	movs	r0, r2
 800373e:	4798      	blx	r3
      }
      return;
 8003740:	e29a      	b.n	8003c78 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003742:	2398      	movs	r3, #152	; 0x98
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d100      	bne.n	800374e <HAL_UART_IRQHandler+0x7a>
 800374c:	e114      	b.n	8003978 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800374e:	239c      	movs	r3, #156	; 0x9c
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	4013      	ands	r3, r2
 8003758:	d106      	bne.n	8003768 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800375a:	23a0      	movs	r3, #160	; 0xa0
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a83      	ldr	r2, [pc, #524]	; (8003970 <HAL_UART_IRQHandler+0x29c>)
 8003762:	4013      	ands	r3, r2
 8003764:	d100      	bne.n	8003768 <HAL_UART_IRQHandler+0x94>
 8003766:	e107      	b.n	8003978 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003768:	23a4      	movs	r3, #164	; 0xa4
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	d012      	beq.n	800379a <HAL_UART_IRQHandler+0xc6>
 8003774:	23a0      	movs	r3, #160	; 0xa0
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4013      	ands	r3, r2
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2284      	movs	r2, #132	; 0x84
 800378e:	589b      	ldr	r3, [r3, r2]
 8003790:	2201      	movs	r2, #1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2184      	movs	r1, #132	; 0x84
 8003798:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800379a:	23a4      	movs	r3, #164	; 0xa4
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2202      	movs	r2, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d011      	beq.n	80037ca <HAL_UART_IRQHandler+0xf6>
 80037a6:	239c      	movs	r3, #156	; 0x9c
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2202      	movs	r2, #2
 80037b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2284      	movs	r2, #132	; 0x84
 80037be:	589b      	ldr	r3, [r3, r2]
 80037c0:	2204      	movs	r2, #4
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2184      	movs	r1, #132	; 0x84
 80037c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ca:	23a4      	movs	r3, #164	; 0xa4
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2204      	movs	r2, #4
 80037d2:	4013      	ands	r3, r2
 80037d4:	d011      	beq.n	80037fa <HAL_UART_IRQHandler+0x126>
 80037d6:	239c      	movs	r3, #156	; 0x9c
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	d00b      	beq.n	80037fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2204      	movs	r2, #4
 80037e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2284      	movs	r2, #132	; 0x84
 80037ee:	589b      	ldr	r3, [r3, r2]
 80037f0:	2202      	movs	r2, #2
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2184      	movs	r1, #132	; 0x84
 80037f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037fa:	23a4      	movs	r3, #164	; 0xa4
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2208      	movs	r2, #8
 8003802:	4013      	ands	r3, r2
 8003804:	d017      	beq.n	8003836 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003806:	23a0      	movs	r3, #160	; 0xa0
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2220      	movs	r2, #32
 800380e:	4013      	ands	r3, r2
 8003810:	d105      	bne.n	800381e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003812:	239c      	movs	r3, #156	; 0x9c
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800381c:	d00b      	beq.n	8003836 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2208      	movs	r2, #8
 8003824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2284      	movs	r2, #132	; 0x84
 800382a:	589b      	ldr	r3, [r3, r2]
 800382c:	2208      	movs	r2, #8
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2184      	movs	r1, #132	; 0x84
 8003834:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003836:	23a4      	movs	r3, #164	; 0xa4
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	4013      	ands	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_UART_IRQHandler+0x198>
 8003844:	23a0      	movs	r3, #160	; 0xa0
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	04db      	lsls	r3, r3, #19
 800384e:	4013      	ands	r3, r2
 8003850:	d00c      	beq.n	800386c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2284      	movs	r2, #132	; 0x84
 8003860:	589b      	ldr	r3, [r3, r2]
 8003862:	2220      	movs	r2, #32
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2184      	movs	r1, #132	; 0x84
 800386a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2284      	movs	r2, #132	; 0x84
 8003870:	589b      	ldr	r3, [r3, r2]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d100      	bne.n	8003878 <HAL_UART_IRQHandler+0x1a4>
 8003876:	e201      	b.n	8003c7c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003878:	23a4      	movs	r3, #164	; 0xa4
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2220      	movs	r2, #32
 8003880:	4013      	ands	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003884:	23a0      	movs	r3, #160	; 0xa0
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	4013      	ands	r3, r2
 800388e:	d008      	beq.n	80038a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	0010      	movs	r0, r2
 80038a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2284      	movs	r2, #132	; 0x84
 80038a6:	589b      	ldr	r3, [r3, r2]
 80038a8:	2194      	movs	r1, #148	; 0x94
 80038aa:	187a      	adds	r2, r7, r1
 80038ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d004      	beq.n	80038c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2228      	movs	r2, #40	; 0x28
 80038c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038c4:	d047      	beq.n	8003956 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fe65 	bl	8004598 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2240      	movs	r2, #64	; 0x40
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d137      	bne.n	800394c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038dc:	f3ef 8310 	mrs	r3, PRIMASK
 80038e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80038e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e4:	2090      	movs	r0, #144	; 0x90
 80038e6:	183a      	adds	r2, r7, r0
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	2301      	movs	r3, #1
 80038ec:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	438a      	bics	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	183b      	adds	r3, r7, r0
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_UART_IRQHandler+0x2a0>)
 8003922:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	0018      	movs	r0, r3
 800392a:	f7fd fec3 	bl	80016b4 <HAL_DMA_Abort_IT>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d01a      	beq.n	8003968 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	0018      	movs	r0, r3
 800393e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e012      	b.n	8003968 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f9af 	bl	8003ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	e00d      	b.n	8003968 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f9aa 	bl	8003ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e008      	b.n	8003968 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f9a5 	bl	8003ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2284      	movs	r2, #132	; 0x84
 8003962:	2100      	movs	r1, #0
 8003964:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003966:	e189      	b.n	8003c7c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	46c0      	nop			; (mov r8, r8)
    return;
 800396a:	e187      	b.n	8003c7c <HAL_UART_IRQHandler+0x5a8>
 800396c:	0000080f 	.word	0x0000080f
 8003970:	04000120 	.word	0x04000120
 8003974:	08004661 	.word	0x08004661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	2b01      	cmp	r3, #1
 800397e:	d000      	beq.n	8003982 <HAL_UART_IRQHandler+0x2ae>
 8003980:	e13b      	b.n	8003bfa <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003982:	23a4      	movs	r3, #164	; 0xa4
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d100      	bne.n	8003990 <HAL_UART_IRQHandler+0x2bc>
 800398e:	e134      	b.n	8003bfa <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003990:	23a0      	movs	r3, #160	; 0xa0
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	4013      	ands	r3, r2
 800399a:	d100      	bne.n	800399e <HAL_UART_IRQHandler+0x2ca>
 800399c:	e12d      	b.n	8003bfa <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d000      	beq.n	80039b6 <HAL_UART_IRQHandler+0x2e2>
 80039b4:	e0a1      	b.n	8003afa <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	217e      	movs	r1, #126	; 0x7e
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d100      	bne.n	80039ce <HAL_UART_IRQHandler+0x2fa>
 80039cc:	e158      	b.n	8003c80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2258      	movs	r2, #88	; 0x58
 80039d2:	5a9b      	ldrh	r3, [r3, r2]
 80039d4:	187a      	adds	r2, r7, r1
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d300      	bcc.n	80039de <HAL_UART_IRQHandler+0x30a>
 80039dc:	e150      	b.n	8003c80 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	187a      	adds	r2, r7, r1
 80039e2:	215a      	movs	r1, #90	; 0x5a
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2220      	movs	r2, #32
 80039f2:	4013      	ands	r3, r2
 80039f4:	d16f      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8310 	mrs	r3, PRIMASK
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a00:	2301      	movs	r3, #1
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	499e      	ldr	r1, [pc, #632]	; (8003c90 <HAL_UART_IRQHandler+0x5bc>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a28:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a30:	677b      	str	r3, [r7, #116]	; 0x74
 8003a32:	2301      	movs	r3, #1
 8003a34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	673b      	str	r3, [r7, #112]	; 0x70
 8003a64:	2301      	movs	r3, #1
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2140      	movs	r1, #64	; 0x40
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a86:	f383 8810 	msr	PRIMASK, r3
}
 8003a8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	2120      	movs	r1, #32
 8003a92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2110      	movs	r1, #16
 8003abc:	438a      	bics	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fd fdaf 	bl	8001634 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2258      	movs	r2, #88	; 0x58
 8003ae0:	5a9a      	ldrh	r2, [r3, r2]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	215a      	movs	r1, #90	; 0x5a
 8003ae6:	5a5b      	ldrh	r3, [r3, r1]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 f8e0 	bl	8003cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af8:	e0c2      	b.n	8003c80 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2258      	movs	r2, #88	; 0x58
 8003afe:	5a99      	ldrh	r1, [r3, r2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	225a      	movs	r2, #90	; 0x5a
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	208e      	movs	r0, #142	; 0x8e
 8003b0a:	183b      	adds	r3, r7, r0
 8003b0c:	1a8a      	subs	r2, r1, r2
 8003b0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	225a      	movs	r2, #90	; 0x5a
 8003b14:	5a9b      	ldrh	r3, [r3, r2]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d100      	bne.n	8003b1e <HAL_UART_IRQHandler+0x44a>
 8003b1c:	e0b2      	b.n	8003c84 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d100      	bne.n	8003b28 <HAL_UART_IRQHandler+0x454>
 8003b26:	e0ad      	b.n	8003c84 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b28:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b30:	2488      	movs	r4, #136	; 0x88
 8003b32:	193a      	adds	r2, r7, r4
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	2301      	movs	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4951      	ldr	r1, [pc, #324]	; (8003c94 <HAL_UART_IRQHandler+0x5c0>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	193b      	adds	r3, r7, r4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b60:	f3ef 8310 	mrs	r3, PRIMASK
 8003b64:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	2484      	movs	r4, #132	; 0x84
 8003b6a:	193a      	adds	r2, r7, r4
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	438a      	bics	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb4:	2480      	movs	r4, #128	; 0x80
 8003bb6:	193a      	adds	r2, r7, r4
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2110      	movs	r1, #16
 8003bd2:	438a      	bics	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	193b      	adds	r3, r7, r4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	f383 8810 	msr	PRIMASK, r3
}
 8003be2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	881a      	ldrh	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f860 	bl	8003cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf8:	e044      	b.n	8003c84 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bfa:	23a4      	movs	r3, #164	; 0xa4
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	035b      	lsls	r3, r3, #13
 8003c04:	4013      	ands	r3, r2
 8003c06:	d010      	beq.n	8003c2a <HAL_UART_IRQHandler+0x556>
 8003c08:	239c      	movs	r3, #156	; 0x9c
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	03db      	lsls	r3, r3, #15
 8003c12:	4013      	ands	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0352      	lsls	r2, r2, #13
 8003c1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 fd5e 	bl	80046e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c28:	e02f      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c2a:	23a4      	movs	r3, #164	; 0xa4
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c36:	23a0      	movs	r3, #160	; 0xa0
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01e      	beq.n	8003c88 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	0010      	movs	r0, r2
 8003c52:	4798      	blx	r3
    }
    return;
 8003c54:	e018      	b.n	8003c88 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c56:	23a4      	movs	r3, #164	; 0xa4
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
 8003c62:	23a0      	movs	r3, #160	; 0xa0
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d00d      	beq.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 fd0c 	bl	800468e <UART_EndTransmit_IT>
    return;
 8003c76:	e008      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	e006      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	e004      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	e002      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	e000      	b.n	8003c8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003c88:	46c0      	nop			; (mov r8, r8)
  }

}
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b02b      	add	sp, #172	; 0xac
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	fffffeff 	.word	0xfffffeff
 8003c94:	fffffedf 	.word	0xfffffedf

08003c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	1cbb      	adds	r3, r7, #2
 8003cc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b08e      	sub	sp, #56	; 0x38
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd8:	231a      	movs	r3, #26
 8003cda:	2218      	movs	r2, #24
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4ac3      	ldr	r2, [pc, #780]	; (8004010 <UART_SetConfig+0x340>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4abe      	ldr	r2, [pc, #760]	; (8004014 <UART_SetConfig+0x344>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4ab8      	ldr	r2, [pc, #736]	; (8004018 <UART_SetConfig+0x348>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d40:	4313      	orrs	r3, r2
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4ab4      	ldr	r2, [pc, #720]	; (800401c <UART_SetConfig+0x34c>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	0019      	movs	r1, r3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ab0      	ldr	r2, [pc, #704]	; (8004020 <UART_SetConfig+0x350>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d131      	bne.n	8003dc8 <UART_SetConfig+0xf8>
 8003d64:	4baf      	ldr	r3, [pc, #700]	; (8004024 <UART_SetConfig+0x354>)
 8003d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d01d      	beq.n	8003dac <UART_SetConfig+0xdc>
 8003d70:	d823      	bhi.n	8003dba <UART_SetConfig+0xea>
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d00c      	beq.n	8003d90 <UART_SetConfig+0xc0>
 8003d76:	d820      	bhi.n	8003dba <UART_SetConfig+0xea>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <UART_SetConfig+0xb2>
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d00e      	beq.n	8003d9e <UART_SetConfig+0xce>
 8003d80:	e01b      	b.n	8003dba <UART_SetConfig+0xea>
 8003d82:	231b      	movs	r3, #27
 8003d84:	2218      	movs	r2, #24
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e0b4      	b.n	8003efa <UART_SetConfig+0x22a>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2218      	movs	r2, #24
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2202      	movs	r2, #2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e0ad      	b.n	8003efa <UART_SetConfig+0x22a>
 8003d9e:	231b      	movs	r3, #27
 8003da0:	2218      	movs	r2, #24
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	19db      	adds	r3, r3, r7
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e0a6      	b.n	8003efa <UART_SetConfig+0x22a>
 8003dac:	231b      	movs	r3, #27
 8003dae:	2218      	movs	r2, #24
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2208      	movs	r2, #8
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e09f      	b.n	8003efa <UART_SetConfig+0x22a>
 8003dba:	231b      	movs	r3, #27
 8003dbc:	2218      	movs	r2, #24
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	19db      	adds	r3, r3, r7
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e098      	b.n	8003efa <UART_SetConfig+0x22a>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a96      	ldr	r2, [pc, #600]	; (8004028 <UART_SetConfig+0x358>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d131      	bne.n	8003e36 <UART_SetConfig+0x166>
 8003dd2:	4b94      	ldr	r3, [pc, #592]	; (8004024 <UART_SetConfig+0x354>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d01d      	beq.n	8003e1a <UART_SetConfig+0x14a>
 8003dde:	d823      	bhi.n	8003e28 <UART_SetConfig+0x158>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00c      	beq.n	8003dfe <UART_SetConfig+0x12e>
 8003de4:	d820      	bhi.n	8003e28 <UART_SetConfig+0x158>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <UART_SetConfig+0x120>
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00e      	beq.n	8003e0c <UART_SetConfig+0x13c>
 8003dee:	e01b      	b.n	8003e28 <UART_SetConfig+0x158>
 8003df0:	231b      	movs	r3, #27
 8003df2:	2218      	movs	r2, #24
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e07d      	b.n	8003efa <UART_SetConfig+0x22a>
 8003dfe:	231b      	movs	r3, #27
 8003e00:	2218      	movs	r2, #24
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	19db      	adds	r3, r3, r7
 8003e06:	2202      	movs	r2, #2
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e076      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e0c:	231b      	movs	r3, #27
 8003e0e:	2218      	movs	r2, #24
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	19db      	adds	r3, r3, r7
 8003e14:	2204      	movs	r2, #4
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e06f      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e1a:	231b      	movs	r3, #27
 8003e1c:	2218      	movs	r2, #24
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	19db      	adds	r3, r3, r7
 8003e22:	2208      	movs	r2, #8
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e068      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e28:	231b      	movs	r3, #27
 8003e2a:	2218      	movs	r2, #24
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	2210      	movs	r2, #16
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e061      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7c      	ldr	r2, [pc, #496]	; (800402c <UART_SetConfig+0x35c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d106      	bne.n	8003e4e <UART_SetConfig+0x17e>
 8003e40:	231b      	movs	r3, #27
 8003e42:	2218      	movs	r2, #24
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e055      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a77      	ldr	r2, [pc, #476]	; (8004030 <UART_SetConfig+0x360>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d106      	bne.n	8003e66 <UART_SetConfig+0x196>
 8003e58:	231b      	movs	r3, #27
 8003e5a:	2218      	movs	r2, #24
 8003e5c:	189b      	adds	r3, r3, r2
 8003e5e:	19db      	adds	r3, r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e049      	b.n	8003efa <UART_SetConfig+0x22a>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6b      	ldr	r2, [pc, #428]	; (8004018 <UART_SetConfig+0x348>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d13e      	bne.n	8003eee <UART_SetConfig+0x21e>
 8003e70:	4b6c      	ldr	r3, [pc, #432]	; (8004024 <UART_SetConfig+0x354>)
 8003e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e74:	23c0      	movs	r3, #192	; 0xc0
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4013      	ands	r3, r2
 8003e7a:	22c0      	movs	r2, #192	; 0xc0
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <UART_SetConfig+0x202>
 8003e82:	22c0      	movs	r2, #192	; 0xc0
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d82a      	bhi.n	8003ee0 <UART_SetConfig+0x210>
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d011      	beq.n	8003eb6 <UART_SetConfig+0x1e6>
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d822      	bhi.n	8003ee0 <UART_SetConfig+0x210>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <UART_SetConfig+0x1d8>
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	00d2      	lsls	r2, r2, #3
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <UART_SetConfig+0x1f4>
 8003ea6:	e01b      	b.n	8003ee0 <UART_SetConfig+0x210>
 8003ea8:	231b      	movs	r3, #27
 8003eaa:	2218      	movs	r2, #24
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e021      	b.n	8003efa <UART_SetConfig+0x22a>
 8003eb6:	231b      	movs	r3, #27
 8003eb8:	2218      	movs	r2, #24
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e01a      	b.n	8003efa <UART_SetConfig+0x22a>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	2204      	movs	r2, #4
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	e013      	b.n	8003efa <UART_SetConfig+0x22a>
 8003ed2:	231b      	movs	r3, #27
 8003ed4:	2218      	movs	r2, #24
 8003ed6:	189b      	adds	r3, r3, r2
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	2208      	movs	r2, #8
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e00c      	b.n	8003efa <UART_SetConfig+0x22a>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	2218      	movs	r2, #24
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	19db      	adds	r3, r3, r7
 8003ee8:	2210      	movs	r2, #16
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e005      	b.n	8003efa <UART_SetConfig+0x22a>
 8003eee:	231b      	movs	r3, #27
 8003ef0:	2218      	movs	r2, #24
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a46      	ldr	r2, [pc, #280]	; (8004018 <UART_SetConfig+0x348>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d000      	beq.n	8003f06 <UART_SetConfig+0x236>
 8003f04:	e09a      	b.n	800403c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f06:	231b      	movs	r3, #27
 8003f08:	2218      	movs	r2, #24
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d01d      	beq.n	8003f50 <UART_SetConfig+0x280>
 8003f14:	dc20      	bgt.n	8003f58 <UART_SetConfig+0x288>
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d015      	beq.n	8003f46 <UART_SetConfig+0x276>
 8003f1a:	dc1d      	bgt.n	8003f58 <UART_SetConfig+0x288>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <UART_SetConfig+0x256>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d005      	beq.n	8003f30 <UART_SetConfig+0x260>
 8003f24:	e018      	b.n	8003f58 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f26:	f7fe fb75 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f2e:	e01c      	b.n	8003f6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f30:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <UART_SetConfig+0x354>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	4013      	ands	r3, r2
 8003f38:	d002      	beq.n	8003f40 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	; (8004034 <UART_SetConfig+0x364>)
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f3e:	e014      	b.n	8003f6a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <UART_SetConfig+0x368>)
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f44:	e011      	b.n	8003f6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f46:	f7fe fab5 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f4e:	e00c      	b.n	8003f6a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f56:	e008      	b.n	8003f6a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f5c:	231a      	movs	r3, #26
 8003f5e:	2218      	movs	r2, #24
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
        break;
 8003f68:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d100      	bne.n	8003f72 <UART_SetConfig+0x2a2>
 8003f70:	e133      	b.n	80041da <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	0013      	movs	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d305      	bcc.n	8003f8e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d906      	bls.n	8003f9c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003f8e:	231a      	movs	r3, #26
 8003f90:	2218      	movs	r2, #24
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e11e      	b.n	80041da <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	6939      	ldr	r1, [r7, #16]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	000b      	movs	r3, r1
 8003faa:	0e1b      	lsrs	r3, r3, #24
 8003fac:	0010      	movs	r0, r2
 8003fae:	0205      	lsls	r5, r0, #8
 8003fb0:	431d      	orrs	r5, r3
 8003fb2:	000b      	movs	r3, r1
 8003fb4:	021c      	lsls	r4, r3, #8
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	1900      	adds	r0, r0, r4
 8003fc8:	4169      	adcs	r1, r5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f7fc f95c 	bl	8000294 <__aeabi_uldivmod>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	000b      	movs	r3, r1
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe6:	23c0      	movs	r3, #192	; 0xc0
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d309      	bcc.n	8004002 <UART_SetConfig+0x332>
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	035b      	lsls	r3, r3, #13
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d204      	bcs.n	8004002 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e0eb      	b.n	80041da <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004002:	231a      	movs	r3, #26
 8004004:	2218      	movs	r2, #24
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e0e4      	b.n	80041da <UART_SetConfig+0x50a>
 8004010:	efff69f3 	.word	0xefff69f3
 8004014:	ffffcfff 	.word	0xffffcfff
 8004018:	40004800 	.word	0x40004800
 800401c:	fffff4ff 	.word	0xfffff4ff
 8004020:	40013800 	.word	0x40013800
 8004024:	40021000 	.word	0x40021000
 8004028:	40004400 	.word	0x40004400
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40005000 	.word	0x40005000
 8004034:	003d0900 	.word	0x003d0900
 8004038:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	429a      	cmp	r2, r3
 8004046:	d000      	beq.n	800404a <UART_SetConfig+0x37a>
 8004048:	e070      	b.n	800412c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800404a:	231b      	movs	r3, #27
 800404c:	2218      	movs	r2, #24
 800404e:	189b      	adds	r3, r3, r2
 8004050:	19db      	adds	r3, r3, r7
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d822      	bhi.n	800409e <UART_SetConfig+0x3ce>
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <UART_SetConfig+0x528>)
 800405c:	18d3      	adds	r3, r2, r3
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7fe fad7 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8004066:	0003      	movs	r3, r0
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800406a:	e021      	b.n	80040b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fae8 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8004070:	0003      	movs	r3, r0
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004074:	e01c      	b.n	80040b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004076:	4b61      	ldr	r3, [pc, #388]	; (80041fc <UART_SetConfig+0x52c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	4013      	ands	r3, r2
 800407e:	d002      	beq.n	8004086 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004080:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <UART_SetConfig+0x530>)
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004084:	e014      	b.n	80040b0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004086:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <UART_SetConfig+0x534>)
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800408a:	e011      	b.n	80040b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408c:	f7fe fa12 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8004090:	0003      	movs	r3, r0
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80040a2:	231a      	movs	r3, #26
 80040a4:	2218      	movs	r2, #24
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
        break;
 80040ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d100      	bne.n	80040b8 <UART_SetConfig+0x3e8>
 80040b6:	e090      	b.n	80041da <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	005a      	lsls	r2, r3, #1
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	18d2      	adds	r2, r2, r3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	0019      	movs	r1, r3
 80040ca:	0010      	movs	r0, r2
 80040cc:	f7fc f81c 	bl	8000108 <__udivsi3>
 80040d0:	0003      	movs	r3, r0
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d921      	bls.n	800411e <UART_SetConfig+0x44e>
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d21c      	bcs.n	800411e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	200e      	movs	r0, #14
 80040ea:	2418      	movs	r4, #24
 80040ec:	1903      	adds	r3, r0, r4
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	210f      	movs	r1, #15
 80040f2:	438a      	bics	r2, r1
 80040f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2207      	movs	r2, #7
 80040fe:	4013      	ands	r3, r2
 8004100:	b299      	uxth	r1, r3
 8004102:	1903      	adds	r3, r0, r4
 8004104:	19db      	adds	r3, r3, r7
 8004106:	1902      	adds	r2, r0, r4
 8004108:	19d2      	adds	r2, r2, r7
 800410a:	8812      	ldrh	r2, [r2, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	1902      	adds	r2, r0, r4
 8004116:	19d2      	adds	r2, r2, r7
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e05d      	b.n	80041da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800411e:	231a      	movs	r3, #26
 8004120:	2218      	movs	r2, #24
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e056      	b.n	80041da <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800412c:	231b      	movs	r3, #27
 800412e:	2218      	movs	r2, #24
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b08      	cmp	r3, #8
 8004138:	d822      	bhi.n	8004180 <UART_SetConfig+0x4b0>
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <UART_SetConfig+0x538>)
 800413e:	18d3      	adds	r3, r2, r3
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe fa66 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8004148:	0003      	movs	r3, r0
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800414c:	e021      	b.n	8004192 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414e:	f7fe fa77 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8004152:	0003      	movs	r3, r0
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004156:	e01c      	b.n	8004192 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <UART_SetConfig+0x52c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2210      	movs	r2, #16
 800415e:	4013      	ands	r3, r2
 8004160:	d002      	beq.n	8004168 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <UART_SetConfig+0x530>)
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004166:	e014      	b.n	8004192 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004168:	4b26      	ldr	r3, [pc, #152]	; (8004204 <UART_SetConfig+0x534>)
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800416c:	e011      	b.n	8004192 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fe f9a1 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8004172:	0003      	movs	r3, r0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004176:	e00c      	b.n	8004192 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800417e:	e008      	b.n	8004192 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004184:	231a      	movs	r3, #26
 8004186:	2218      	movs	r2, #24
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
        break;
 8004190:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085a      	lsrs	r2, r3, #1
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	18d2      	adds	r2, r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f7fb ffad 	bl	8000108 <__udivsi3>
 80041ae:	0003      	movs	r3, r0
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d90a      	bls.n	80041ce <UART_SetConfig+0x4fe>
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	429a      	cmp	r2, r3
 80041c0:	d205      	bcs.n	80041ce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	e005      	b.n	80041da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80041ce:	231a      	movs	r3, #26
 80041d0:	2218      	movs	r2, #24
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	19db      	adds	r3, r3, r7
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2200      	movs	r2, #0
 80041de:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2200      	movs	r2, #0
 80041e4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041e6:	231a      	movs	r3, #26
 80041e8:	2218      	movs	r2, #24
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	19db      	adds	r3, r3, r7
 80041ee:	781b      	ldrb	r3, [r3, #0]
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b00e      	add	sp, #56	; 0x38
 80041f6:	bdb0      	pop	{r4, r5, r7, pc}
 80041f8:	08004808 	.word	0x08004808
 80041fc:	40021000 	.word	0x40021000
 8004200:	003d0900 	.word	0x003d0900
 8004204:	00f42400 	.word	0x00f42400
 8004208:	0800482c 	.word	0x0800482c

0800420c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d00b      	beq.n	8004236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a4a      	ldr	r2, [pc, #296]	; (8004350 <UART_AdvFeatureConfig+0x144>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2202      	movs	r2, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d00b      	beq.n	8004258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a43      	ldr	r2, [pc, #268]	; (8004354 <UART_AdvFeatureConfig+0x148>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2204      	movs	r2, #4
 800425e:	4013      	ands	r3, r2
 8004260:	d00b      	beq.n	800427a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <UART_AdvFeatureConfig+0x14c>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2208      	movs	r2, #8
 8004280:	4013      	ands	r3, r2
 8004282:	d00b      	beq.n	800429c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a34      	ldr	r2, [pc, #208]	; (800435c <UART_AdvFeatureConfig+0x150>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2210      	movs	r2, #16
 80042a2:	4013      	ands	r3, r2
 80042a4:	d00b      	beq.n	80042be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <UART_AdvFeatureConfig+0x154>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2220      	movs	r2, #32
 80042c4:	4013      	ands	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	4a25      	ldr	r2, [pc, #148]	; (8004364 <UART_AdvFeatureConfig+0x158>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	4013      	ands	r3, r2
 80042e8:	d01d      	beq.n	8004326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <UART_AdvFeatureConfig+0x15c>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	035b      	lsls	r3, r3, #13
 800430a:	429a      	cmp	r2, r3
 800430c:	d10b      	bne.n	8004326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a15      	ldr	r2, [pc, #84]	; (800436c <UART_AdvFeatureConfig+0x160>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	4013      	ands	r3, r2
 800432e:	d00b      	beq.n	8004348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <UART_AdvFeatureConfig+0x164>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}
 8004350:	fffdffff 	.word	0xfffdffff
 8004354:	fffeffff 	.word	0xfffeffff
 8004358:	fffbffff 	.word	0xfffbffff
 800435c:	ffff7fff 	.word	0xffff7fff
 8004360:	ffffefff 	.word	0xffffefff
 8004364:	ffffdfff 	.word	0xffffdfff
 8004368:	ffefffff 	.word	0xffefffff
 800436c:	ff9fffff 	.word	0xff9fffff
 8004370:	fff7ffff 	.word	0xfff7ffff

08004374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b092      	sub	sp, #72	; 0x48
 8004378:	af02      	add	r7, sp, #8
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2284      	movs	r2, #132	; 0x84
 8004380:	2100      	movs	r1, #0
 8004382:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004384:	f7fd f86e 	bl	8001464 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2208      	movs	r2, #8
 8004394:	4013      	ands	r3, r2
 8004396:	2b08      	cmp	r3, #8
 8004398:	d12c      	bne.n	80043f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	0391      	lsls	r1, r2, #14
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4a46      	ldr	r2, [pc, #280]	; (80044bc <UART_CheckIdleState+0x148>)
 80043a4:	9200      	str	r2, [sp, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f000 f88c 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d021      	beq.n	80043f4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b0:	f3ef 8310 	mrs	r3, PRIMASK
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ba:	2301      	movs	r3, #1
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	438a      	bics	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2278      	movs	r2, #120	; 0x78
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e05f      	b.n	80044b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2204      	movs	r2, #4
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d146      	bne.n	8004490 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	03d1      	lsls	r1, r2, #15
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <UART_CheckIdleState+0x148>)
 800440c:	9200      	str	r2, [sp, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	f000 f858 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d03b      	beq.n	8004490 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	60fb      	str	r3, [r7, #12]
  return(result);
 800441e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
 8004422:	2301      	movs	r3, #1
 8004424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4921      	ldr	r1, [pc, #132]	; (80044c0 <UART_CheckIdleState+0x14c>)
 800443a:	400a      	ands	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444a:	f3ef 8310 	mrs	r3, PRIMASK
 800444e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	633b      	str	r3, [r7, #48]	; 0x30
 8004454:	2301      	movs	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	438a      	bics	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	2120      	movs	r1, #32
 8004482:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2278      	movs	r2, #120	; 0x78
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e011      	b.n	80044b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2278      	movs	r2, #120	; 0x78
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b010      	add	sp, #64	; 0x40
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	01ffffff 	.word	0x01ffffff
 80044c0:	fffffedf 	.word	0xfffffedf

080044c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d4:	e04b      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	d048      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fc ffc2 	bl	8001464 <HAL_GetTick>
 80044e0:	0002      	movs	r2, r0
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e04b      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2204      	movs	r2, #4
 80044fe:	4013      	ands	r3, r2
 8004500:	d035      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2208      	movs	r2, #8
 800450a:	4013      	ands	r3, r2
 800450c:	2b08      	cmp	r3, #8
 800450e:	d111      	bne.n	8004534 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f83c 	bl	8004598 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2284      	movs	r2, #132	; 0x84
 8004524:	2108      	movs	r1, #8
 8004526:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2278      	movs	r2, #120	; 0x78
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e02c      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	401a      	ands	r2, r3
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	429a      	cmp	r2, r3
 8004546:	d112      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 f81f 	bl	8004598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2284      	movs	r2, #132	; 0x84
 800455e:	2120      	movs	r1, #32
 8004560:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2278      	movs	r2, #120	; 0x78
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00f      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	425a      	negs	r2, r3
 800457e:	4153      	adcs	r3, r2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d0a4      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08e      	sub	sp, #56	; 0x38
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a0:	f3ef 8310 	mrs	r3, PRIMASK
 80045a4:	617b      	str	r3, [r7, #20]
  return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	2301      	movs	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f383 8810 	msr	PRIMASK, r3
}
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4926      	ldr	r1, [pc, #152]	; (800465c <UART_EndRxTransfer+0xc4>)
 80045c2:	400a      	ands	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f383 8810 	msr	PRIMASK, r3
}
 80045d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
 80045d6:	623b      	str	r3, [r7, #32]
  return(result);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
 80045dc:	2301      	movs	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f383 8810 	msr	PRIMASK, r3
}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	438a      	bics	r2, r1
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f383 8810 	msr	PRIMASK, r3
}
 8004602:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	2b01      	cmp	r3, #1
 800460a:	d118      	bne.n	800463e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460c:	f3ef 8310 	mrs	r3, PRIMASK
 8004610:	60bb      	str	r3, [r7, #8]
  return(result);
 8004612:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004616:	2301      	movs	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2110      	movs	r1, #16
 800462e:	438a      	bics	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	2120      	movs	r1, #32
 8004644:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b00e      	add	sp, #56	; 0x38
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	fffffedf 	.word	0xfffffedf

08004660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	225a      	movs	r2, #90	; 0x5a
 8004672:	2100      	movs	r1, #0
 8004674:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2252      	movs	r2, #82	; 0x52
 800467a:	2100      	movs	r1, #0
 800467c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0018      	movs	r0, r3
 8004682:	f7ff fb11 	bl	8003ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b004      	add	sp, #16
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004696:	f3ef 8310 	mrs	r3, PRIMASK
 800469a:	60bb      	str	r3, [r7, #8]
  return(result);
 800469c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	2301      	movs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f383 8810 	msr	PRIMASK, r3
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	438a      	bics	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff fade 	bl	8003c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b006      	add	sp, #24
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <memset>:
 80046f4:	0003      	movs	r3, r0
 80046f6:	1882      	adds	r2, r0, r2
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	7019      	strb	r1, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <__libc_init_array>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	2600      	movs	r6, #0
 8004708:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x38>)
 800470a:	4d0d      	ldr	r5, [pc, #52]	; (8004740 <__libc_init_array+0x3c>)
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	42a6      	cmp	r6, r4
 8004712:	d109      	bne.n	8004728 <__libc_init_array+0x24>
 8004714:	2600      	movs	r6, #0
 8004716:	f000 f819 	bl	800474c <_init>
 800471a:	4c0a      	ldr	r4, [pc, #40]	; (8004744 <__libc_init_array+0x40>)
 800471c:	4d0a      	ldr	r5, [pc, #40]	; (8004748 <__libc_init_array+0x44>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	42a6      	cmp	r6, r4
 8004724:	d105      	bne.n	8004732 <__libc_init_array+0x2e>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	00b3      	lsls	r3, r6, #2
 800472a:	58eb      	ldr	r3, [r5, r3]
 800472c:	4798      	blx	r3
 800472e:	3601      	adds	r6, #1
 8004730:	e7ee      	b.n	8004710 <__libc_init_array+0xc>
 8004732:	00b3      	lsls	r3, r6, #2
 8004734:	58eb      	ldr	r3, [r5, r3]
 8004736:	4798      	blx	r3
 8004738:	3601      	adds	r6, #1
 800473a:	e7f2      	b.n	8004722 <__libc_init_array+0x1e>
 800473c:	08004858 	.word	0x08004858
 8004740:	08004858 	.word	0x08004858
 8004744:	0800485c 	.word	0x0800485c
 8004748:	08004858 	.word	0x08004858

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
